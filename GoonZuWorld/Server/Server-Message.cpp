//---------------------------------
// 2004/3/4 김태곤
//---------------------------------

#include "..\Common\CommonHeader.h"
#include "..\Server\Server.h"

#include "..\Common\Map\Map.h"
#include "..\Common\Skill\Skill-Manager.h"
#include "..\Common\Order\Order.h"
#include "..\Common\SystemNPC\ForeignMerchantNPC\ForeignMerchantNPC.h"
#include "..\Common\NPCManager\NPC.h"
#include "Char\CharManager\CharManager.h"

// 건물
#include "..\CommonLogic\Cityhall\Cityhall.h"
#include "..\CommonLogic\Bank\Bank-Manager.h"
#include "..\CommonLogic\Stock\Stock.h"
#include "..\CommonLogic\Market\Market.h"
#include "..\CommonLogic\House\House.h"
#include "..\CommonLogic\Hunt\Hunt.h"
#include "..\CommonLogic\PostOffice\PostOffice.h"

#include "..\CommonLogic\MsgRval-Define.h"

// 파티 시스템
#include "..\Common\PartyMgr\PartyMgr.h"


#include "../../Server/AuthServer/AuthMsg.h"
#include "..\..\DBManager\GameDBManager_World\DBMsg-Person.h"
#include "..\..\DBManager\GameDBManager_World\DBMsg-System.h"
#include "..\..\DBManager\GameDBManager_World\DBMsg-Web.h"
#include "..\..\DBManager\GameDBManager_World\DBMsg-Stock.h"
#include "MsgType-System.h"
#include "MsgType-Person.h"

#include "..\Common\Map\MapManager\MapManager.h"


// 공지
#include "Notice\Notice.h"

#include "../../../AdminSystem/MasterServer/MasterMsg.h"

//-----------------------------------------
// Server
//-----------------------------------------
#include "Statistics/Statistics.h"

#define ServerMessageMap(AAA,BBB) m_pServerMsgPtr[AAA].ServerMsgFunc = &cltServer::BBB

// 메시지맵을 등록한다.
void cltServer::RegisterServerMsgMap()
{
	m_pServerMsgPtr = new stServerMsgPtr[GAMEMSG_END];
	m_pbUseMsg = new bool[GAMEMSG_END];

	if(m_pServerMsgPtr == NULL || m_pbUseMsg == NULL)
	{
		if (pclClient->GameMode != GAMEMODE_SERVER)
			MessageBox(NULL, TEXT("함수포인터 할당 실패"), NULL, MB_OK);
	}
	else
	{
		// 알 수 없는 메시지가 왔을때 처리할 함수를 할당한다.
		for(int i = 0; i < GAMEMSG_END; i++)
		{
			ServerMessageMap(i, ServerMsgNullFunc);
			m_pbUseMsg[i] = true;
		}

		// APEX-
#ifdef _CHINA
		ServerMessageMap(GAMEMSG_REQUEST_APEXDATA, DoMsg_GAMEMSG_REQUEST_APEXDATA);
#endif
		// -APEX

		//---------------------------------
		// Person
		//---------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_PERSON_IP, DoMsg_GAMEMSG_REQUEST_PERSON_IP);
		ServerMessageMap(GAMEMSG_REQUEST_UPDATECHILDLIST, DoMsg_GAMEMSG_REQUEST_UPDATECHILDLIST);
		ServerMessageMap(GAMEMSG_REQUEST_RENOUNCEPUPIL, DoMsg_GAMEMSG_REQUEST_RENOUNCEPUPIL);
		ServerMessageMap(GAMEMSG_REQUEST_APPLYFATHER, DoMsg_GAMEMSG_REQUEST_APPLYFATHER);
		ServerMessageMap(GAMEMSG_REQUEST_FATHERAPPLYERLIST, DoMsg_GAMEMSG_REQUEST_FATHERAPPLYERLIST);
		ServerMessageMap(GAMEMSG_REQUEST_HORSEFREE, DoMsg_GAMEMSG_REQUEST_HORSEFREE);
		//KHY - 1001 - 기승동물 5마리 보유 수정.
		ServerMessageMap(GAMEMSG_REQUEST_CHANGEHORSE, DoMsg_GAMEMSG_REQUEST_CHANGEHORSE);
		//----------------------------------------------------------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_DECREASESKILLBONUS, DoMsg_GAMEMSG_REQUEST_DECREASESKILLBONUS);
		ServerMessageMap(GAMEMSG_REQUEST_USERID, DoMsg_GAMEMSG_REQUEST_USERID);		// 유저 아이디 요청( 미니 홈페이지를 띄우기 위해서 )
		ServerMessageMap(GAMEMSG_REQUEST_PLAYTIME, DoMsg_GAMEMSG_REQUEST_PLAYTIME);		
		//		ServerMessageMap(GAMEMSG_REQUEST_SETSCHOOL, DoMsg_GAMEMSG_REQUEST_SETSCHOOL);
		ServerMessageMap(GAMEMSG_REQUEST_SETFATHER, DoMsg_GAMEMSG_REQUEST_SETFATHER);
		ServerMessageMap(GAMEMSG_REQUEST_SCHOOLUSERNUM, DoMsg_GAMEMSG_REQUEST_SCHOOLUSERNUM);
		ServerMessageMap(GAMEMSG_REQUEST_PERSONPRIVATEINFO, DoMsg_GAMEMSG_REQUEST_PERSONPRIVATEINFO);
		ServerMessageMap(GAMEMSG_REQUEST_PERSONPRIVATEINFOBYPERSONID, DoMsg_GAMEMSG_REQUEST_PERSONPRIVATEINFOBYPERSONID);
		ServerMessageMap(GAMEMSG_REQUEST_ADDINFO, DoMsg_GAMEMSG_REQUEST_ADDINFO);
		ServerMessageMap(GAMEMSG_REQUEST_CHANGEMAGIC, DoMsg_GAMEMSG_REQUEST_CHANGEMAGIC);
		ServerMessageMap(GAMEMSG_REQUEST_PERSONNAME_FROMPERSONID, DoMsg_GAMEMSG_REQUEST_PERSONNAME_FROMPERSONID);
				

		//KHY - 0910 - 클라이언트로부터, 웹에서 읽어들인 정보를 받는다.
		ServerMessageMap(GAMEMSG_REQUEST_CHARSERVERRTN, DoMsg_GAMEMSG_REQUEST_CHARSERVERRTN );


		//---------------------------------
		// Quest
		//---------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_SETQUESTGOING, DoMsg_GAMEMSG_REQUEST_SETQUESTGOING);
		ServerMessageMap(GAMEMSG_REQUEST_CANCELQUEST, DoMsg_GAMEMSG_REQUEST_CANCELQUEST);
		ServerMessageMap(GAMEMSG_REQUEST_QUESTSTATUS, DoMsg_GAMEMSG_REQUEST_QUESTSTATUS);

		//---------------------------------
		// 귓속말
		//---------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_WHISPERCHAT_CREATE, DoMsg_GAMEMSG_REQUEST_WHISPERCHAT_CREATE);
		ServerMessageMap(GAMEMSG_REQUEST_WHISPERCHAT_INVITE, DoMsg_GAMEMSG_REQUEST_WHISPERCHAT_INVITE);
		ServerMessageMap(GAMEMSG_REQUEST_WHISPERCHAT_USERLIST, DoMsg_GAMEMSG_REQUEST_WHISPERCHAT_USERLIST);
		ServerMessageMap(GAMEMSG_REQUEST_WHISPERCHAT_OUT, DoMsg_GAMEMSG_REQUEST_WHISPERCHAT_OUT);

		//---------------------------------
		// 추천인
		//---------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_RECOMMENDPERSON, DoMsg_GAMEMSG_REQUEST_RECOMMENDPERSON);
		ServerMessageMap(GAMEMSG_REQUEST_CAPTIONKINDCHANGE, DoMsg_GAMEMSG_REQUEST_CAPTIONKINDCHANGE);
		ServerMessageMap(GAMEMSG_REQUEST_HEARTBEAT, DoMsg_GAMEMSG_REQUEST_HEARTBEAT);
		ServerMessageMap(GAMEMSG_REQUEST_LOGIN, DoMsg_GAMEMSG_REQUEST_LOGIN);
		ServerMessageMap(GAMEMSG_REQUEST_SELECTCHAR, DoMsg_GAMEMSG_REQUEST_SELECTCHAR);
		ServerMessageMap(GAMEMSG_REQUEST_MAKENEWCHAR, DoMsg_GAMEMSG_REQUEST_MAKENEWCHAR);
		ServerMessageMap(GAMEMSG_REQUEST_DELUSERCHAR, DoMsg_GAMEMSG_REQUEST_DELUSERCHAR);//케릭터삭제
		ServerMessageMap(GAMEMSG_REQUEST_PREDELUSERCHAR, DoMsg_GAMEMSG_REQUEST_PREDELUSERCHAR);//케릭삭제유예기간 [성웅]
		ServerMessageMap(GAMEMSG_REQUEST_NAME, DoMsg_GAMEMSG_REQUEST_NAME);
		ServerMessageMap(GAMEMSG_REQUEST_VILLAGESTRUCT, DoMsg_GAMEMSG_REQUEST_VILLAGESTRUCT);
		ServerMessageMap(GAMEMSG_REQUEST_ALLCHARINFO, DoMsg_GAMEMSG_REQUEST_ALLCHARINFO);
		ServerMessageMap(GAMEMSG_REQUEST_USEBONUS, DoMsg_GAMEMSG_REQUEST_USEBONUS);

		ServerMessageMap(GAMEMSG_REQUEST_USERORDER, DoMsg_GAMEMSG_REQUEST_USERORDER);
		ServerMessageMap(GAMEMSG_REQUEST_CHANGESTATUSINFO, DoMsg_GAMEMSG_REQUEST_CHANGESTATUSINFO);

		ServerMessageMap(GAMEMSG_REQUEST_CHAT, DoMsg_GAMEMSG_REQUEST_CHAT);
		ServerMessageMap(GAMEMSG_REQUEST_HEADCHAT, DoMsg_GAMEMSG_REQUEST_HEADCHAT);

		ServerMessageMap(GAMEMSG_REQUEST_ITEMMOVE, DoMsg_GAMEMSG_REQUEST_ITEMMOVE);
		ServerMessageMap(GAMEMSG_REQUEST_ITEMCHANGE, DoMsg_GAMEMSG_REQUEST_ITEMCHANGE);
		ServerMessageMap(GAMEMSG_REQUEST_USEITEM, DoMsg_GAMEMSG_REQUEST_USEITEM);
		ServerMessageMap(GAMEMSG_REQUEST_ITEMSPLIT, DoMsg_GAMEMSG_REQUEST_ITEMSPLIT);

		ServerMessageMap(GAMEMSG_REQUEST_HANAUTH_LOGIN, DoMsg_GAMEMSG_REQUEST_HANAUTH_LOGIN);
		ServerMessageMap(GAMEMSG_REQUEST_TAIWAN_LOGIN, DoMsg_GAMEMSG_REQUEST_TAIWAN_LOGIN);
		ServerMessageMap(GAMEMSG_REQUEST_HANAUTH_GAMERUNAUTH, DoMsg_GAMEMSG_REQUEST_HANAUTH_GAMERUNAUTH);
		

		//---------------------------------
		// 건물
		//---------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_STRINFO, DoMsg_GAMEMSG_REQUEST_STRINFO);
		ServerMessageMap(GAMEMSG_REQUEST_VILLAGEINFOSTRINFO, DoMsg_GAMEMSG_REQUEST_VILLAGEINFOSTRINFO);	// 마을 상세 정보중에서 특정 건물의 정보를 요청한다. 
		ServerMessageMap(GAMEMSG_REQUEST_GETSTRNOTICE, DoMsg_GAMEMSG_REQUEST_GETSTRNOTICE);

		ServerMessageMap(GAMEMSG_REQUEST_GETTAXLIST, DoMsg_GAMEMSG_REQUEST_GETTAXLIST);
		ServerMessageMap(GAMEMSG_REQUEST_SETTAX, DoMsg_GAMEMSG_REQUEST_SETTAX);
		ServerMessageMap(GAMEMSG_REQUEST_PAYTAX, DoMsg_GAMEMSG_REQUEST_PAYTAX);

		ServerMessageMap(GAMEMSG_REQUEST_GETDIVIDENDLIST, DoMsg_GAMEMSG_REQUEST_GETDIVIDENDLIST);
		ServerMessageMap(GAMEMSG_REQUEST_PAYDIVIDEND, DoMsg_GAMEMSG_REQUEST_PAYDIVIDEND);
		ServerMessageMap(GAMEMSG_REQUEST_HIRENPC, DoMsg_GAMEMSG_REQUEST_HIRENPC);
		ServerMessageMap(GAMEMSG_REQUEST_GETNPCLIST, DoMsg_GAMEMSG_REQUEST_GETNPCLIST);
		ServerMessageMap(GAMEMSG_REQUEST_NPCPAYMENT, DoMsg_GAMEMSG_REQUEST_NPCPAYMENT);
		ServerMessageMap(GAMEMSG_REQUEST_APPLYRESIDENT, DoMsg_GAMEMSG_REQUEST_APPLYRESIDENT);
		ServerMessageMap(GAMEMSG_REQUEST_APPLYRESIDENT2, DoMsg_GAMEMSG_REQUEST_APPLYRESIDENT2);
		ServerMessageMap(GAMEMSG_REQUEST_CANCELRESIDENT, DoMsg_GAMEMSG_REQUEST_CANCELRESIDENT);
		ServerMessageMap(GAMEMSG_REQUEST_BERESIDENT, DoMsg_GAMEMSG_REQUEST_BERESIDENT);
		ServerMessageMap(GAMEMSG_REQUEST_RESIDENTAPPLYERLIST, DoMsg_GAMEMSG_REQUEST_RESIDENTAPPLYERLIST);
		ServerMessageMap(GAMEMSG_REQUEST_RESIDENTLIST, DoMsg_GAMEMSG_REQUEST_RESIDENTLIST);
		ServerMessageMap(GAMEMSG_REQUEST_RESIDENTINFO, DoMsg_GAMEMSG_REQUEST_RESIDENTINFO);
		ServerMessageMap(GAMEMSG_REQUEST_SETRESIDENTSCORE, DoMsg_GAMEMSG_REQUEST_SETRESIDENTSCORE);
		ServerMessageMap(GAMEMSG_REQUEST_SETSTRUCTUREMESSAGE, DoMsg_GAMEMSG_REQUEST_SETSTRUCTUREMESSAGE);
		ServerMessageMap(GAMEMSG_REQUEST_RESIDENTSHARE, DoMsg_GAMEMSG_REQUEST_RESIDENTSHARE);
		ServerMessageMap(GAMEMSG_REQUEST_GETSTRUCTURELIST, DoMsg_GAMEMSG_REQUEST_GETSTRUCTURELIST);
		ServerMessageMap(GAMEMSG_REQUEST_BUILDSTRUCTURE, DoMsg_GAMEMSG_REQUEST_BUILDSTRUCTURE);
		ServerMessageMap(GAMEMSG_REQUEST_DESTROYSTRUCTURE, DoMsg_GAMEMSG_REQUEST_DESTROYSTRUCTURE);
		ServerMessageMap(GAMEMSG_REQUEST_VILLAGENOTICE, DoMsg_GAMEMSG_REQUEST_VILLAGENOTICE);
		ServerMessageMap(GAMEMSG_REQUEST_ALLSTRCHIEFINFO, DoMsg_GAMEMSG_REQUEST_ALLSTRCHIEFINFO);
		ServerMessageMap(GAMEMSG_REQUEST_REPAIRSTRUCTURE, DoMsg_GAMEMSG_REQUEST_REPAIRSTRUCTURE);
		ServerMessageMap(GAMEMSG_REQUEST_PROFITTOCAPITALFUND, DoMsg_GAMEMSG_REQUEST_PROFITTOCAPITALFUND);
		ServerMessageMap(GAMEMSG_REQUEST_STARTEVENT, DoMsg_GAMEMSG_REQUEST_STARTEVENT);
		ServerMessageMap(GAMEMSG_REQUEST_VILLAGEBOARD, DoMsg_GAMEMSG_REQUEST_VILLAGEBOARD);
		ServerMessageMap(GAMEMSG_REQUEST_VILLAGELEVELDETAILINFO, DoMsg_GAMEMSG_REQUEST_VILLAGELEVELDETAILINFO);
		ServerMessageMap(GAMEMSG_REQUEST_CHANGESTRBASEMONEY, DoMsg_GAMEMSG_REQUEST_CHANGESTRBASEMONEY);
		ServerMessageMap(GAMEMSG_REQUEST_HIREEVENTNPC, DoMsg_GAMEMSG_REQUEST_HIREEVENTNPC);
		ServerMessageMap(GAMEMSG_REQUEST_EVENT_INSERTMATERIAL, DoMsg_GAMEMSG_REQUEST_EVENT_INSERTMATERIAL);
		ServerMessageMap(GAMEMSG_REQUEST_EVENT_MATERIALLIST, DoMsg_GAMEMSG_REQUEST_EVENT_MATERIALLIST);
		ServerMessageMap(GAMEMSG_REQUEST_EVENT_MATERIALCOMPLETE, DoMsg_GAMEMSG_REQUEST_EVENT_MATERIALCOMPLETE);
		ServerMessageMap(GAMEMSG_REQUEST_DONATEVILLAGEMONEY, DoMsg_GAMEMSG_REQUEST_DONATEVILLAGEMONEY);
		ServerMessageMap(GAMEMSG_REQUEST_DONATEMEMBERLIST, DoMsg_GAMEMSG_REQUEST_DONATEMEMBERLIST);
		//---------------------------------
		// 시전 
		//---------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_INPUTTOBANK, DoMsg_GAMEMSG_REQUEST_INPUTTOBANK);
		ServerMessageMap(GAMEMSG_REQUEST_INPUTTOBANKALLMONEY, DoMsg_GAMEMSG_REQUEST_INPUTTOBANKALLMONEY);

		ServerMessageMap(GAMEMSG_REQUEST_OUTPUTFROMBANK, DoMsg_GAMEMSG_REQUEST_OUTPUTFROMBANK);
		ServerMessageMap(GAMEMSG_REQUEST_OUTPUTFROMBANKALLMONEY, DoMsg_GAMEMSG_REQUEST_OUTPUTFROMBANKALLMONEY);
		ServerMessageMap(GAMEMSG_REQUEST_CREATEBANKACCOUNT, DoMsg_GAMEMSG_REQUEST_CREATEBANKACCOUNT);
		ServerMessageMap(GAMEMSG_REQUEST_CLOSEBANKACCOUNT, DoMsg_GAMEMSG_REQUEST_CLOSEBANKACCOUNT);
		ServerMessageMap(GAMEMSG_REQUEST_MOVEITEMINVTOSTG, DoMsg_GAMEMSG_REQUEST_MOVEITEMINVTOSTG);
		ServerMessageMap(GAMEMSG_REQUEST_MOVEITEMSTGTOINV, DoMsg_GAMEMSG_REQUEST_MOVEITEMSTGTOINV);
		ServerMessageMap(GAMEMSG_REQUEST_MAKEITEMINV, DoMsg_GAMEMSG_REQUEST_MAKEITEMINV);
		ServerMessageMap(GAMEMSG_REQUEST_UPGRADEITEM, DoMsg_GAMEMSG_REQUEST_UPGRADEITEM);
		ServerMessageMap(GAMEMSG_REQUEST_PERFORMANCEUPGRADEITEM, DoMsg_GAMEMSG_REQUEST_PERFORMANCEUPGRADEITEM);
//		ServerMessageMap(GAMEMSG_REQUEST_MONSTERCORP_START, DoMsg_GAMEMSG_REQUEST_MONSTERCORP_START);
		ServerMessageMap(GAMEMSG_REQUEST_MONSTERCORP_SCORE, DoMsg_GAMEMSG_REQUEST_MONSTERCORP_SCORE);
		ServerMessageMap(GAMEMSG_REQUEST_MONSTERCORP_COMBOINFO, DoMsg_GAMEMSG_REQUEST_MONSTERCORP_COMBOINFO);
		ServerMessageMap(GAMEMSG_REQUEST_ROULETTEGAME_INFO, DoMsg_GAMEMSG_REQUEST_ROULETTEGAME_INFO);
		ServerMessageMap(GAMEMSG_REQUEST_ROULETTEGAME_STOP, DoMsg_GAMEMSG_REQUEST_ROULETTEGAME_STOP);

		ServerMessageMap(GAMEMSG_REQUEST_STGINFO, DoMsg_GAMEMSG_REQUEST_STGINFO);
		ServerMessageMap(GAMEMSG_REQUEST_HOUSEUNITSTABLECREATE, DoMsg_GAMEMSG_REQUEST_HOUSEUNITSTABLECREATE);
		ServerMessageMap(GAMEMSG_REQUEST_HOUSEUNITHORSEIN, DoMsg_GAMEMSG_REQUEST_HOUSEUNITHORSEIN);
		ServerMessageMap(GAMEMSG_REQUEST_HOUSEUNITHORSEOUT, DoMsg_GAMEMSG_REQUEST_HOUSEUNITHORSEOUT);
		ServerMessageMap(GAMEMSG_REQUEST_HOUSEUNITUSEDGOODSBUILDINGCREATE, DoMsg_GAMEMSG_REQUEST_HOUSEUNITUSEDGOODSBUILDINGCREATE);
		ServerMessageMap(GAMEMSG_REQUEST_HOUSEUNITMAKEITEMFROMUSEDGOODSINFO, DoMsg_GAMEMSG_REQUEST_HOUSEUNITMAKEITEMFROMUSEDGOODSINFO);
		ServerMessageMap(GAMEMSG_REQUEST_HOUSEUNITMAKEITEMFROMUSEDGOODS, DoMsg_GAMEMSG_REQUEST_HOUSEUNITMAKEITEMFROMUSEDGOODS);
		ServerMessageMap(GAMEMSG_REQUEST_HOUSEUNITNAMECHANGE, DoMsg_GAMEMSG_REQUEST_HOUSEUNITNAMECHANGE);
		ServerMessageMap(GAMEMSG_REQUEST_HOUSEITEMARRANGEMENT, DoMsg_GAMEMSG_REQUEST_HOUSEITEMARRANGEMENT);
		

		//--------------------------------
		// 농업, 수산업, 축산업, 광업 등등
		//--------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_AGRICULTUREAUTOGAIN, DoMsg_GAMEMSG_REQUEST_AGRICULTUREAUTOGAIN);
		ServerMessageMap(GAMEMSG_REQUEST_FARMINGSTART, DoMsg_GAMEMSG_REQUEST_FARMINGSTART);
		ServerMessageMap(GAMEMSG_REQUEST_FARMINGPAYRENTFEE, DoMsg_GAMEMSG_REQUEST_FARMINGPAYRENTFEE);

		ServerMessageMap(GAMEMSG_REQUEST_MININGSTART, DoMsg_GAMEMSG_REQUEST_MININGSTART);
		ServerMessageMap(GAMEMSG_REQUEST_MININGPAYRENTFEE, DoMsg_GAMEMSG_REQUEST_MININGPAYRENTFEE);


		//--------------------------------
		// 여각 
		//--------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_STOCKBIDVILLAGELIST, DoMsg_GAMEMSG_REQUEST_STOCKBIDVILLAGELIST);
		ServerMessageMap(GAMEMSG_REQUEST_STOCKBIDDERLIST, DoMsg_GAMEMSG_REQUEST_STOCKBIDDERLIST);
		ServerMessageMap(GAMEMSG_REQUEST_BIDSTOCK, DoMsg_GAMEMSG_REQUEST_BIDSTOCK);
		ServerMessageMap(GAMEMSG_REQUEST_CANCELBIDSTOCK, DoMsg_GAMEMSG_REQUEST_CANCELBIDSTOCK);
		ServerMessageMap(GAMEMSG_REQUEST_STOCKDISTRIBUTIONORDER, DoMsg_GAMEMSG_REQUEST_STOCKDISTRIBUTIONORDER);
		ServerMessageMap(GAMEMSG_REQUEST_STOCKBIDDATE, DoMsg_GAMEMSG_REQUEST_STOCKBIDDATE);
		ServerMessageMap(GAMEMSG_REQUEST_BUYSTOCK, DoMsg_GAMEMSG_REQUEST_BUYSTOCK);
		ServerMessageMap(GAMEMSG_REQUEST_SELLSTOCK, DoMsg_GAMEMSG_REQUEST_SELLSTOCK);
		ServerMessageMap(GAMEMSG_REQUEST_CANCELSTOCKORDER, DoMsg_GAMEMSG_REQUEST_CANCELSTOCKORDER);
		ServerMessageMap(GAMEMSG_REQUEST_STOCKORDERINFO, DoMsg_GAMEMSG_REQUEST_STOCKORDERINFO);
		ServerMessageMap(GAMEMSG_REQUEST_SETSTOCKFEE, DoMsg_GAMEMSG_REQUEST_SETSTOCKFEE);
		ServerMessageMap(GAMEMSG_REQUEST_INVESTLIST, DoMsg_GAMEMSG_REQUEST_INVESTLIST);
		ServerMessageMap(GAMEMSG_REQUEST_BECHIEF, DoMsg_GAMEMSG_REQUEST_BECHIEF);
		ServerMessageMap(GAMEMSG_REQUEST_CHIEFINFO, DoMsg_GAMEMSG_REQUEST_CHIEFINFO);
		ServerMessageMap(GAMEMSG_REQUEST_BUYBIDSTOCK, DoMsg_GAMEMSG_REQUEST_BUYBIDSTOCK);
		ServerMessageMap(GAMEMSG_REQUEST_MYSTOCKINFO, DoMsg_GAMEMSG_REQUEST_MYSTOCKINFO);
		ServerMessageMap(GAMEMSG_REQUEST_CANDIDATE, DoMsg_GAMEMSG_REQUEST_CANDIDATE);
		ServerMessageMap(GAMEMSG_REQUEST_CANCELCANDIDATE, DoMsg_GAMEMSG_REQUEST_CANCELCANDIDATE);
		ServerMessageMap(GAMEMSG_REQUEST_CANDIDATELIST, DoMsg_GAMEMSG_REQUEST_CANDIDATELIST);
		ServerMessageMap(GAMEMSG_REQUEST_DELCANDIDATE, DoMsg_GAMEMSG_REQUEST_DELCANDIDATE);
		ServerMessageMap(GAMEMSG_REQUEST_RESIGN, DoMsg_GAMEMSG_REQUEST_RESIGN);
		ServerMessageMap(GAMEMSG_REQUEST_SETBANKFEE, DoMsg_GAMEMSG_REQUEST_SETBANKFEE);
		ServerMessageMap(GAMEMSG_REQUEST_SELLITEM, DoMsg_GAMEMSG_REQUEST_SELLITEM);
		ServerMessageMap(GAMEMSG_REQUEST_GETFROMMARKET, DoMsg_GAMEMSG_REQUEST_GETFROMMARKET);
		ServerMessageMap(GAMEMSG_REQUEST_MARKETORDER, DoMsg_GAMEMSG_REQUEST_MARKETORDER);
		ServerMessageMap(GAMEMSG_REQUEST_BUYITEM, DoMsg_GAMEMSG_REQUEST_BUYITEM);
		
		ServerMessageMap(GAMEMSG_REQUEST_STOCKOFFERINGINFO, DoMsg_GAMEMSG_REQUEST_STOCKOFFERINGINFO);
		ServerMessageMap(GAMEMSG_REQUEST_STOCKOFFERINGORDER, DoMsg_GAMEMSG_REQUEST_STOCKOFFERINGORDER);

		ServerMessageMap( GAMEMSG_REQUEST_EXCHANGESTOCK, DoMsg_GAMEMSG_REQUEST_EXCHANGESTOCK);
		
		ServerMessageMap( GAMEMSG_REQUEST_GETBEGINNERVILLAGESTOCK, DoMsg_GAMEMSG_REQUEST_GETBEGINNERVILLAGESTOCK );
		
		//-------------------------------------
		// 시전 관련 
		//-------------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_SETMARKETFEE, DoMsg_GAMEMSG_REQUEST_SETMARKETFEE);
		ServerMessageMap(GAMEMSG_REQUEST_PRODUCTPRICE, DoMsg_GAMEMSG_REQUEST_PRODUCTPRICE);
		//-------------------------------------
		// 시전 관련 
		//-------------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_CHANGEHOUSECONTRACT, DoMsg_GAMEMSG_REQUEST_CHANGEHOUSECONTRACT);
		ServerMessageMap(GAMEMSG_REQUEST_HOUSEUNITLIST, DoMsg_GAMEMSG_REQUEST_HOUSEUNITLIST);
		ServerMessageMap(GAMEMSG_REQUEST_HOUSEUNITLIST_DETAIL, DoMsg_GAMEMSG_REQUEST_HOUSEUNITLIST_DETAIL);

		ServerMessageMap(GAMEMSG_REQUEST_HOUSEAPPLYERLIST, DoMsg_GAMEMSG_REQUEST_HOUSEAPPLYERLIST);
		ServerMessageMap(GAMEMSG_REQUEST_HOUSERENTAPPLY, DoMsg_GAMEMSG_REQUEST_HOUSERENTAPPLY);
		ServerMessageMap(GAMEMSG_REQUEST_HOUSERENTAPPLYCANCEL, DoMsg_GAMEMSG_REQUEST_HOUSERENTAPPLYCANCEL);

		ServerMessageMap(GAMEMSG_REQUEST_HOUSERENT, DoMsg_GAMEMSG_REQUEST_HOUSERENT);
		ServerMessageMap(GAMEMSG_REQUEST_DELHOUSEAPPLYER, DoMsg_GAMEMSG_REQUEST_DELHOUSEAPPLYER);
		ServerMessageMap(GAMEMSG_REQUEST_HOUSECANCELLATIONPENALTYMONEY, DoMsg_GAMEMSG_REQUEST_HOUSECANCELLATIONPENALTYMONEY);
		ServerMessageMap(GAMEMSG_REQUEST_HOUSECANCELLATION, DoMsg_GAMEMSG_REQUEST_HOUSECANCELLATION);
		//-------------------------------------
		// 수렵장 관련 
		//-------------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_ENTERHUNT, DoMsg_GAMEMSG_REQUEST_ENTERHUNT);
		ServerMessageMap(GAMEMSG_REQUEST_HUNTMONSTERFIELDLISTADD, DoMsg_GAMEMSG_REQUEST_HUNTMONSTERFIELDLISTADD);
		ServerMessageMap(GAMEMSG_REQUEST_HUNTMONSTERFIELDLISTDEL, DoMsg_GAMEMSG_REQUEST_HUNTMONSTERFIELDLISTDEL);
		ServerMessageMap(GAMEMSG_REQUEST_HUNTMONSTERIN, DoMsg_GAMEMSG_REQUEST_HUNTMONSTERIN);
		ServerMessageMap(GAMEMSG_REQUEST_HUNTMONSTEROUT, DoMsg_GAMEMSG_REQUEST_HUNTMONSTEROUT);

		//-------------------------------------
		// 역참 관련 
		//-------------------------------------		
		ServerMessageMap(GAMEMSG_REQUEST_POSTOFFICE_SENDITEM, DoMsg_GAMEMSG_REQUEST_POSTOFFICE_SENDITEM);
		ServerMessageMap(GAMEMSG_REQUEST_POSTOFFICE_SENDMONEY, DoMsg_GAMEMSG_REQUEST_POSTOFFICE_SENDMONEY);
		ServerMessageMap(GAMEMSG_REQUEST_POSTOFFICE_SENDMSG, DoMsg_GAMEMSG_REQUEST_POSTOFFICE_SENDMSG);
		ServerMessageMap(GAMEMSG_REQUEST_POSTOFFICE_RECVITEMLIST, DoMsg_GAMEMSG_REQUEST_POSTOFFICE_RECVITEMLIST);
		ServerMessageMap(GAMEMSG_REQUEST_POSTOFFICE_RECVMONEYLIST, DoMsg_GAMEMSG_REQUEST_POSTOFFICE_RECVMONEYLIST);
		ServerMessageMap(GAMEMSG_REQUEST_POSTOFFICE_RECVMSGLIST, DoMsg_GAMEMSG_REQUEST_POSTOFFICE_RECVMSGLIST);
		ServerMessageMap(GAMEMSG_REQUEST_POSTOFFICE_DELMSG, DoMsg_GAMEMSG_REQUEST_POSTOFFICE_DELMSG);
		ServerMessageMap(GAMEMSG_REQUEST_POSTOFFICE_GETITEM, DoMsg_GAMEMSG_REQUEST_POSTOFFICE_GETITEM);
		ServerMessageMap(GAMEMSG_REQUEST_POSTOFFICE_GETMONEY, DoMsg_GAMEMSG_REQUEST_POSTOFFICE_GETMONEY);
		ServerMessageMap(GAMEMSG_REQUEST_POSTOFFICE_SETFEE, DoMsg_GAMEMSG_REQUEST_POSTOFFICE_SETFEE);
		ServerMessageMap(GAMEMSG_REQUEST_POSTOFFICE_GETRECORD, DoMsg_GAMEMSG_REQUEST_POSTOFFICE_GETRECORD);

		//[진성] 우체국에서 단체 메시지 보내기. => 2008-8-4
		ServerMessageMap(GAMEMSG_REQUEST_POSTOFFICE_SENDITEM_GROUP,		DoMsg_GAMEMSG_REQUEST_POSTOFFICE_SENDITEM_GROUP);
		ServerMessageMap(GAMEMSG_REQUEST_POSTOFFICE_SENDMONEY_GROUP,	DoMsg_GAMEMSG_REQUEST_POSTOFFICE_SENDMONEY_GROUP);
		ServerMessageMap(GAMEMSG_REQUEST_POSTOFFICE_SENDMSG_GROUP,	 	DoMsg_GAMEMSG_REQUEST_POSTOFFICE_SENDMSG_GROUP);
		ServerMessageMap(GAMEMSG_REQUEST_POSTOFFICE_USER_LIST_GROUP,	DoMsg_GAMEMSG_REQUEST_POSTOFFICE_USER_LIST_GROUP);
		ServerMessageMap(GAMEMSG_REQUEST_CHAR_NAME_CHECK,				DoMsg_GAMEMSG_REQUEST_CHAR_NAME_CHECK);

		//-------------------------------------
		// 시전 연장 하지 못 한 유저의 아이템 찾기
		//-------------------------------------	
		ServerMessageMap(GAMEMSG_REQUEST_GET_SAVEUSERITEM, DoMsg_GAMEMSG_REQUEST_GET_SAVEUSERITEM);
		ServerMessageMap(GAMEMSG_REQUEST_GET_SAVEUSERITEMLIST, DoMsg_GAMEMSG_REQUEST_GET_SAVEUSERITEMLIST);
		//KHY - 1127 - 클라라 물품 보관 개선
		ServerMessageMap(GAMEMSG_REQUEST_GET_SAVEUSERHORSE, DoMsg_GAMEMSG_REQUEST_GET_SAVEUSERHORSE);
		ServerMessageMap(GAMEMSG_REQUEST_MARKETCONDITIONS, DoMsg_GAMEMSG_REQUEST_MARKETCONDITIONS);
		//---------------------------------
		// 사복시 
		//---------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_HORSEMARKET_OUTHORSE, DoMsg_GAMEMSG_REQUEST_HORSEMARKET_OUTHORSE);
		ServerMessageMap(GAMEMSG_REQUEST_HORSEMARKET_MYACCOUNT, DoMsg_GAMEMSG_REQUEST_HORSEMARKET_MYACCOUNT);
		ServerMessageMap(GAMEMSG_REQUEST_HORSEMARKET_ORDERLIST, DoMsg_GAMEMSG_REQUEST_HORSEMARKET_ORDERLIST);
		ServerMessageMap(GAMEMSG_REQUEST_HORSEMARKET_SELLHORSE, DoMsg_GAMEMSG_REQUEST_HORSEMARKET_SELLHORSE);
		ServerMessageMap(GAMEMSG_REQUEST_HORSEMARKET_BUYHORSE, DoMsg_GAMEMSG_REQUEST_HORSEMARKET_BUYHORSE);
		ServerMessageMap(GAMEMSG_REQUEST_HORSEMARKET_SETFEE, DoMsg_GAMEMSG_REQUEST_HORSEMARKET_SETFEE);

		//---------------------------------
		// 거간
		//---------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_REALESTATEMARKET_CANCELORDER, DoMsg_GAMEMSG_REQUEST_REALESTATEMARKET_CANCELORDER);
		ServerMessageMap(GAMEMSG_REQUEST_REALESTATEMARKET_MYORDER, DoMsg_GAMEMSG_REQUEST_REALESTATEMARKET_MYORDER);
		ServerMessageMap(GAMEMSG_REQUEST_REALESTATEMARKET_ORDERLIST, DoMsg_GAMEMSG_REQUEST_REALESTATEMARKET_ORDERLIST);
		ServerMessageMap(GAMEMSG_REQUEST_REALESTATEMARKET_SELL, DoMsg_GAMEMSG_REQUEST_REALESTATEMARKET_SELL);
		ServerMessageMap(GAMEMSG_REQUEST_REALESTATEMARKET_BUY, DoMsg_GAMEMSG_REQUEST_REALESTATEMARKET_BUY);
		ServerMessageMap(GAMEMSG_REQUEST_REALESTATEMARKET_SETFEE, DoMsg_GAMEMSG_REQUEST_REALESTATEMARKET_SETFEE);
		ServerMessageMap(GAMEMSG_REQUEST_REALESTATEMARKET_DETAILINFO, DoMsg_GAMEMSG_REQUEST_REALESTATEMARKET_DETAILINFO);

		//---------------------------------
		// 장예원
		//---------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONMARKET_CANCELORDER, DoMsg_GAMEMSG_REQUEST_SUMMONMARKET_CANCELORDER);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONMARKET_MYORDER, DoMsg_GAMEMSG_REQUEST_SUMMONMARKET_MYORDER);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONMARKET_ORDERLIST, DoMsg_GAMEMSG_REQUEST_SUMMONMARKET_ORDERLIST);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONMARKET_SELL, DoMsg_GAMEMSG_REQUEST_SUMMONMARKET_SELL);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONMARKET_BUY, DoMsg_GAMEMSG_REQUEST_SUMMONMARKET_BUY);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONMARKET_SETFEE, DoMsg_GAMEMSG_REQUEST_SUMMONMARKET_SETFEE);

		//---------------------------------
		// 비변사
		//---------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONHEROMARKET_CANCELORDER, DoMsg_GAMEMSG_REQUEST_SUMMONHEROMARKET_CANCELORDER);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONHEROMARKET_MYORDER, DoMsg_GAMEMSG_REQUEST_SUMMONHEROMARKET_MYORDER);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONHEROMARKET_ORDERLIST, DoMsg_GAMEMSG_REQUEST_SUMMONHEROMARKET_ORDERLIST);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONHEROMARKET_SELL, DoMsg_GAMEMSG_REQUEST_SUMMONHEROMARKET_SELL);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONHEROMARKET_BUY, DoMsg_GAMEMSG_REQUEST_SUMMONHEROMARKET_BUY);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONHEROMARKET_SETFEE, DoMsg_GAMEMSG_REQUEST_SUMMONHEROMARKET_SETFEE);

		//---------------------------------
		// 농장
		//---------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_LAND_CHANGECONTRACT, DoMsg_GAMEMSG_REQUEST_LAND_CHANGECONTRACT);
		ServerMessageMap(GAMEMSG_REQUEST_LAND_UNITLIST, DoMsg_GAMEMSG_REQUEST_LAND_UNITLIST);
		ServerMessageMap(GAMEMSG_REQUEST_LAND_UNITDETAIL, DoMsg_GAMEMSG_REQUEST_LAND_UNITDETAIL);
		ServerMessageMap(GAMEMSG_REQUEST_LAND_APPLYERLIST, DoMsg_GAMEMSG_REQUEST_LAND_APPLYERLIST);
		ServerMessageMap(GAMEMSG_REQUEST_LAND_RENTAPPLY, DoMsg_GAMEMSG_REQUEST_LAND_RENTAPPLY);
		ServerMessageMap(GAMEMSG_REQUEST_LAND_CANCELAPPLY, DoMsg_GAMEMSG_REQUEST_LAND_CANCELAPPLY);
		ServerMessageMap(GAMEMSG_REQUEST_LAND_RENT, DoMsg_GAMEMSG_REQUEST_LAND_RENT);
		ServerMessageMap(GAMEMSG_REQUEST_LAND_DELAPPLYER, DoMsg_GAMEMSG_REQUEST_LAND_DELAPPLYER);

		//---------------------------------
		// 광산
		//---------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_MINE_CHANGECONTRACT, DoMsg_GAMEMSG_REQUEST_MINE_CHANGECONTRACT);
		ServerMessageMap(GAMEMSG_REQUEST_MINE_UNITLIST, DoMsg_GAMEMSG_REQUEST_MINE_UNITLIST);
		ServerMessageMap(GAMEMSG_REQUEST_MINE_UNITDETAIL, DoMsg_GAMEMSG_REQUEST_MINE_UNITDETAIL);
		ServerMessageMap(GAMEMSG_REQUEST_MINE_APPLYERLIST, DoMsg_GAMEMSG_REQUEST_MINE_APPLYERLIST);
		ServerMessageMap(GAMEMSG_REQUEST_MINE_RENTAPPLY, DoMsg_GAMEMSG_REQUEST_MINE_RENTAPPLY);
		ServerMessageMap(GAMEMSG_REQUEST_MINE_CANCELAPPLY, DoMsg_GAMEMSG_REQUEST_MINE_CANCELAPPLY);
		ServerMessageMap(GAMEMSG_REQUEST_MINE_RENT, DoMsg_GAMEMSG_REQUEST_MINE_RENT);
		ServerMessageMap(GAMEMSG_REQUEST_MINE_DELAPPLYER, DoMsg_GAMEMSG_REQUEST_MINE_DELAPPLYER);


		//---------------------------------
		// 내자시 
		//---------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_FEAST_RESERVE, DoMsg_GAMEMSG_REQUEST_FEAST_RESERVE);
		ServerMessageMap(GAMEMSG_REQUEST_FEAST_ADDPRESENTLIST, DoMsg_GAMEMSG_REQUEST_FEAST_ADDPRESENTLIST);
		ServerMessageMap(GAMEMSG_REQUEST_FEAST_DELPRESENTLIST, DoMsg_GAMEMSG_REQUEST_FEAST_DELPRESENTLIST);
		ServerMessageMap(GAMEMSG_REQUEST_FEAST_SETCOST, DoMsg_GAMEMSG_REQUEST_FEAST_SETCOST);
		ServerMessageMap(GAMEMSG_REQUEST_FEAST_STGITEMIN, DoMsg_GAMEMSG_REQUEST_FEAST_STGITEMIN);
		ServerMessageMap(GAMEMSG_REQUEST_FEAST_STGITEMOUT, DoMsg_GAMEMSG_REQUEST_FEAST_STGITEMOUT);
		ServerMessageMap(GAMEMSG_REQUEST_FEAST_GIVEITEM, DoMsg_GAMEMSG_REQUEST_FEAST_GIVEITEM);
		ServerMessageMap(GAMEMSG_REQUEST_FEAST_SENDCHAT, DoMsg_GAMEMSG_REQUEST_FEAST_SENDCHAT);
		//#if defined(_LEON_FEAST_EFFECT)
		ServerMessageMap(GAMEMSG_REQUEST_FEAST_USEEFFECT, DoMsg_GAMEMSG_REQUEST_FEAST_USEEFFECT);
		//#endif
		
		//[진성] 파티홀. 
		ServerMessageMap(GAMEMSG_REQUEST_PARTYHALL_TOTAL_INFO,					DoMsg_GAMEMSG_REQUEST_PARTYHALL_TOTAL_INFO);						// 예약된 파티장에 선물 추가 .		=> 2008. 3. 12
		ServerMessageMap(GAMEMSG_REQUEST_PARTYHALL_ADD_PRESENT,					DoMsg_GAMEMSG_REQUEST_PARTYHALL_ADD_PRESENT);						// 예약된 파티장에 선물 추가 .		=> 2008. 3. 12
		ServerMessageMap(GAMEMSG_REQUEST_PARTYHALL_RESERVATION,					DoMsg_GAMEMSG_REQUEST_GAMEMSG_REQUEST_PARTYHALL_RESERVATION);		// 파티장 예약.						=> 2008. 3. 12
		ServerMessageMap(GAMEMSG_REQUEST_PARTYHALL_GET_COSTUME,					DoMsg_GAMEMSG_REQUEST_PARTYHALL_GET_COSTUME);						// 옷 얻기.							=> 2008. 3. 12
		ServerMessageMap(GAMEMSG_REQUEST_PARTYHALL_ENTRANCE_APPLICATION,		DoMsg_GAMEMSG_REQUEST_PARTYHALL_ENTRANCE_APPLICATION);				// 입장신청							=> 2008. 3. 14
		ServerMessageMap(GAMEMSG_REQUEST_PARTYHALL_ENTRANCE_APPLICATION_LIST,	DoMsg_GAMEMSG_REQUEST_PARTYHALL_ENTRANCE_APPLICATION_LIST);			// 입장신청 리스트. 				=> 2008. 3. 12
		ServerMessageMap(GAMEMSG_REQUEST_PARTYHALL_ADD_DECORATION,				DoMsg_GAMEMSG_REQUEST_PARTYHALL_ADD_DECORATION);					// 장식품 추가.						=> 2008. 3. 12
		ServerMessageMap(GAMEMSG_REQUEST_PARTYHALL_GIVEITEM,					DoMsg_GAMEMSG_REQUEST_PARTYHALL_GIVEITEM);							// 선물주기.						=> 2008. 3. 12
		ServerMessageMap(GAMEMSG_REQUEST_PARTYHALL_EXIT,						DoMsg_GAMEMSG_REQUEST_PARTYHALL_EXIT);								// 파티장 나가기.					=> 2008. 3. 12
		ServerMessageMap(GAMEMSG_REQUEST_PARTYHALL_INVITATION,					DoMsg_GAMEMSG_REQUEST_PARTYHALL_INVITATION);						// 파티장 초대.						=> 2008. 3. 23
		ServerMessageMap(GAMEMSG_REQUEST_PARTYHALL_USEEFFECT,					DoMsg_GAMEMSG_REQUEST_PARTYHALL_USEEFFECT);							// 파티장 폭죽.						=> 2008. 3. 23
		

		//---------------------------------
		// 부동산 관련 
		//---------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_EXTENDCONTRACT, DoMsg_GAMEMSG_REQUEST_EXTENDCONTRACT);

		//---------------------------------
		// 시스템 
		//---------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_NPCPOS, DoMsg_GAMEMSG_REQUEST_NPCPOS);
		ServerMessageMap(GAMEMSG_REQUEST_SECRETCHAT, DoMsg_GAMEMSG_REQUEST_SECRETCHAT);
		ServerMessageMap(GAMEMSG_REQUEST_MAKESECRETCHATCHANNEL, DoMsg_GAMEMSG_REQUEST_MAKESECRETCHATCHANNEL);
		ServerMessageMap(GAMEMSG_REQUEST_ACCEPTSECRETCHATCHANNEL, DoMsg_GAMEMSG_REQUEST_ACCEPTSECRETCHATCHANNEL);
		ServerMessageMap(GAMEMSG_REQUEST_SELLNPC, DoMsg_GAMEMSG_REQUEST_SELLNPC);
		ServerMessageMap(GAMEMSG_REQUEST_BUYNPC, DoMsg_GAMEMSG_REQUEST_BUYNPC);
		ServerMessageMap(GAMEMSG_REQUEST_NPCSELLITEMINFO, DoMsg_GAMEMSG_REQUEST_NPCSELLITEMINFO);
		ServerMessageMap(GAMEMSG_REQUEST_BUYRECOMMANDPRODUCT, DoMsg_GAMEMSG_REQUEST_BUYRECOMMANDPRODUCT);
		ServerMessageMap(GAMEMSG_REQUEST_RECOMMANDPOINTLIST, DoMsg_GAMEMSG_REQUEST_RECOMMANDPOINTLIST);
		ServerMessageMap(GAMEMSG_REQUEST_GETRECOMMANDPOINT, DoMsg_GAMEMSG_REQUEST_GETRECOMMANDPOINT);
		ServerMessageMap(GAMEMSG_REQUEST_MANUFACTURENPC, DoMsg_GAMEMSG_REQUEST_MANUFACTURENPC );
		ServerMessageMap(GAMEMSG_REQUEST_RECEIVEBEGINNERITEM, DoMsg_GAMEMSG_REQUEST_RECEIVEBEGINNERITEM);

		ServerMessageMap(GAMEMSG_REQUEST_INVESTMENTGETINFO, DoMsg_GAMEMSG_REQUEST_INVESTMENTGETINFO);
		ServerMessageMap(GAMEMSG_REQUEST_ASKLIST, DoMsg_GAMEMSG_REQUEST_ASKLIST);
		ServerMessageMap(GAMEMSG_REQUEST_DELASK, DoMsg_GAMEMSG_REQUEST_DELASK);
		ServerMessageMap(GAMEMSG_REQUEST_SKILLMASTERLIST, DoMsg_GAMEMSG_REQUEST_SKILLMASTERLIST);
		ServerMessageMap(GAMEMSG_REQUEST_REGISTMASTER, DoMsg_GAMEMSG_REQUEST_REGISTMASTER);
		ServerMessageMap(GAMEMSG_REQUEST_HOPETOQUIT, DoMsg_GAMEMSG_REQUEST_HOPETOQUIT);
		ServerMessageMap(GAMEMSG_REQUEST_HOPETOFRONT,DoMsg_GAMEMSG_REQUEST_HOPETOFRONT);
		ServerMessageMap(GAMEMSG_REQUEST_WARPVILLAGE, DoMsg_GAMEMSG_REQUEST_WARPVILLAGE);
		ServerMessageMap(GAMEMSG_REQUEST_RESIDENTWARPVILLAGE, DoMsg_GAMEMSG_REQUEST_RESIDENTWARPVILLAGE);

		ServerMessageMap(GAMEMSG_REQUEST_BLACKARMYAPPLY, DoMsg_GAMEMSG_REQUEST_BLACKARMYAPPLY);
		ServerMessageMap(GAMEMSG_REQUEST_BLACKARMY_RANKINFO, DoMsg_GAMEMSG_REQUEST_BLACKARMY_RANKINFO);
		ServerMessageMap(GAMEMSG_REQUEST_BLACKARMY_WARPTOGATE, DoMsg_GAMEMSG_REQUEST_BLACKARMY_WARPTOGATE);

		// 육조판서 
		ServerMessageMap(GAMEMSG_REQUEST_GETBYUNGZOINFO, DoMsg_GAMEMSG_REQUEST_GETBYUNGZOINFO);
		ServerMessageMap(GAMEMSG_REQUEST_GETGONGZOINFO, DoMsg_GAMEMSG_REQUEST_GETGONGZOINFO);
		ServerMessageMap(GAMEMSG_REQUEST_GETHYUNGZOINFO, DoMsg_GAMEMSG_REQUEST_GETHYUNGZOINFO);
		ServerMessageMap(GAMEMSG_REQUEST_GETHOZOINFO, DoMsg_GAMEMSG_REQUEST_GETHOZOINFO);
		ServerMessageMap(GAMEMSG_REQUEST_GETIZOINFO, DoMsg_GAMEMSG_REQUEST_GETIZOINFO);
		ServerMessageMap(GAMEMSG_REQUEST_GETYEZOINFO, DoMsg_GAMEMSG_REQUEST_GETYEZOINFO);
		ServerMessageMap(GAMEMSG_REQUEST_GETGOONZUINFO, DoMsg_GAMEMSG_REQUEST_GETGOONZUINFO);
		ServerMessageMap(GAMEMSG_REQUEST_SETBYUNGZOINFO, DoMsg_GAMEMSG_REQUEST_SETBYUNGZOINFO);
		ServerMessageMap(GAMEMSG_REQUEST_SETBYUNGZOINFO_VILLAGEWARINFO,DoMsg_GAMEMSG_REQUEST_SETBYUNGZOINFO_VILLAGEWARINFO);
		ServerMessageMap(GAMEMSG_REQUEST_SETGONGZOINFO, DoMsg_GAMEMSG_REQUEST_SETGONGZOINFO);
		ServerMessageMap(GAMEMSG_REQUEST_SETHYUNGZOINFO, DoMsg_GAMEMSG_REQUEST_SETHYUNGZOINFO);
		ServerMessageMap(GAMEMSG_REQUEST_SETHYUNGZOPRISON, DoMsg_GAMEMSG_REQUEST_SETHYUNGZOPRISON);
		ServerMessageMap(GAMEMSG_REQUEST_SETHOZOINFO, DoMsg_GAMEMSG_REQUEST_SETHOZOINFO);
		ServerMessageMap(GAMEMSG_REQUEST_SETIZOINFO, DoMsg_GAMEMSG_REQUEST_SETIZOINFO);
		ServerMessageMap(GAMEMSG_REQUEST_SETYEZOINFO, DoMsg_GAMEMSG_REQUEST_SETYEZOINFO);
		ServerMessageMap(GAMEMSG_REQUEST_SETGOONZUINFO, DoMsg_GAMEMSG_REQUEST_SETGOONZUINFO);
		ServerMessageMap(GAMEMSG_REQUEST_GETANGELAPPLYERLIST, DoMsg_GAMEMSG_REQUEST_GETANGELAPPLYERLIST);
		ServerMessageMap(GAMEMSG_REQUEST_GETANGELLIST, DoMsg_GAMEMSG_REQUEST_GETANGELLIST);
		ServerMessageMap(GAMEMSG_REQUEST_SETANGELAPPLYER, DoMsg_GAMEMSG_REQUEST_SETANGELAPPLYER);
		ServerMessageMap(GAMEMSG_REQUEST_SETANGEL, DoMsg_GAMEMSG_REQUEST_SETANGEL);
		ServerMessageMap(GAMEMSG_REQUEST_GETPOLICELIST, DoMsg_GAMEMSG_REQUEST_GETPOLICELIST);
		ServerMessageMap(GAMEMSG_REQUEST_SETPOLICE, DoMsg_GAMEMSG_REQUEST_SETPOLICE);
		ServerMessageMap(GAMEMSG_REQUEST_GETCRIMINALLIST, DoMsg_GAMEMSG_REQUEST_GETCRIMINALLIST);
		ServerMessageMap(GAMEMSG_REQUEST_SETCRIMINAL, DoMsg_GAMEMSG_REQUEST_SETCRIMINAL);
		ServerMessageMap(GAMEMSG_REQUEST_GETCHANGEDNAME, DoMsg_GAMEMSG_REQUEST_GETCHANGEDNAME);
		ServerMessageMap(GAMEMSG_REQUEST_AUTOHUNTING, DoMsg_GAMEMSG_REQUEST_AUTOHUNTING);
		ServerMessageMap(GAMEMSG_REQUEST_AUTOHUNTING_ASK, DoMsg_GAMEMSG_REQUEST_AUTOHUNTING_ASK);
		ServerMessageMap(GAMEMSG_REQUEST_WHISPERCHAT_REJECT, DoMsg_GAMEMSG_REQUEST_WHISPERCHAT_REJECT);
		ServerMessageMap(GAMEMSG_REQUEST_PRIVATETRADE_REJECT, DoMsg_GAMEMSG_REQUEST_PRIVATETRADE_REJECT);
		ServerMessageMap(GAMEMSG_REQUEST_PARTYINVITE_REJECT, DoMsg_GAMEMSG_REQUEST_PARTYINVITE_REJECT);
		ServerMessageMap(GAMEMSG_REQUEST_FRIENDADD_REJECT, DoMsg_GAMEMSG_REQUEST_FRIENDADD_REJECT);
		ServerMessageMap(GAMEMSG_REQUEST_GOONZU_SETMINISTER,DoMsg_GAMEMSG_REQUEST_GOONZU_SETMINISTER);
		ServerMessageMap(GAMEMSG_REQUEST_GOONZU_SETLIQUIDATION,DoMsg_GAMEMSG_REQUEST_GOONZU_SETLIQUIDATION);
		ServerMessageMap(GAMEMSG_REQUEST_GOONZU_GETBONUSTIME,DoMsg_GAMEMSG_REQUEST_GOONZU_GETBONUSTIME);
		ServerMessageMap(GAMEMSG_REQUEST_GOONZU_SETBONUSTIME,DoMsg_GAMEMSG_REQUEST_GOONZU_SETBONUSTIME);
		
		//-----------------------------------------------------------------------------------------------
		// 채팅 셋팅
		//------------------------------------------------------------------------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_CHAR_OPTION,DoMsg_GAMEMSG_REQUEST_CHAR_OPTION);

		//-----------------------------------------------------
		// 유저와 외국 상인( 청, 일본 ) NPC 와의 물품 판매 작업
		//-----------------------------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_SELLTOFOREIGNMERCHANT, DoMsg_GAMEMSG_REQUEST_SELLTOFOREIGNMERCHANT);
		ServerMessageMap(GAMEMSG_REQUEST_FOREIGNMERCHANTNPCBUYINFO, DoMsg_GAMEMSG_REQUEST_FOREIGNMERCHANTNPCBUYINFO);
		ServerMessageMap(GAMEMSG_REQUEST_FOREIGNMERCHANTBUYCASHITEMINFO, DoMsg_GAMEMSG_REQUEST_FOREIGNMERCHANTBUYCASHITEMINFO);
		ServerMessageMap(GAMEMSG_REQUEST_FOREIGNMERCHANTBUYCASHITEM, DoMsg_GAMEMSG_REQUEST_FOREIGNMERCHANTBUYCASHITEM);
		ServerMessageMap(GAMEMSG_REQUEST_TRADEMERCHANTBUYINFO, DoMsg_GAMEMSG_REQUEST_TRADEMERCHANTBUYINFO);
		ServerMessageMap(GAMEMSG_REQUEST_TRADEMERCHANTBUYITEMFROMPERSON, DoMsg_GAMEMSG_REQUEST_TRADEMERCHANTBUYITEMFROMPERSON);
		ServerMessageMap(GAMEMSG_REQUEST_TRADEMERCHANTHORSEBUYINFO, DoMsg_GAMEMSG_REQUEST_TRADEMERCHANTHORSEBUYINFO);
		ServerMessageMap(GAMEMSG_REQUEST_TRADEMERCHANTBUYHORSEFROMPERSON, DoMsg_GAMEMSG_REQUEST_TRADEMERCHANTBUYHORSEFROMPERSON);
		ServerMessageMap(GAMEMSG_REQUEST_TRADEMERCHANTBUYITEMINFO, DoMsg_GAMEMSG_REQUEST_TRADEMERCHANTBUYITEMINFO);
		ServerMessageMap(GAMEMSG_REQUEST_TRADEMERCHANTBUYITEM, DoMsg_GAMEMSG_REQUEST_TRADEMERCHANTBUYITEM);

		ServerMessageMap(GAMEMSG_REQUEST_PRESELLTOFOREIGNMERCHANT, DoMsg_GAMEMSG_REQUEST_PRESELLTOFOREIGNMERCHANT);
		//-----------------------------------------------------
		// 개인 거래
		//-----------------------------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_PRIVATETRADE_ACCEPT, DoMsg_GAMEMSG_REQUEST_PRIVATETRADE_ACCEPT);
		ServerMessageMap(GAMEMSG_REQUEST_PRIVATETRADE, DoMsg_GAMEMSG_REQUEST_PRIVATETRADE);
		ServerMessageMap(GAMEMSG_REQUEST_PRIVATETRADE_CANCEL, DoMsg_GAMEMSG_REQUEST_PRIVATETRADE_CANCEL);
		ServerMessageMap(GAMEMSG_REQUEST_PRIVATETRADE_ADDITEM, DoMsg_GAMEMSG_REQUEST_PRIVATETRADE_ADDITEM);	// 거래 목록에 아이템 추가 요청
		ServerMessageMap(GAMEMSG_REQUEST_PRIVATETRADE_DELLIST, DoMsg_GAMEMSG_REQUEST_PRIVATETRADE_DELLIST);
		ServerMessageMap(GAMEMSG_REQUEST_PRIVATETRADE_DELITEM, DoMsg_GAMEMSG_REQUEST_PRIVATETRADE_DELITEM);	// 거래 목록에서 아이템 삭제 요청
		ServerMessageMap(GAMEMSG_REQUEST_PRIVATETRADE_ADDPRICE, DoMsg_GAMEMSG_REQUEST_PRIVATETRADE_ADDPRICE);
		ServerMessageMap(GAMEMSG_REQUEST_PRIVATETRADE_ADDSTOCK, DoMsg_GAMEMSG_REQUEST_PRIVATETRADE_ADDSTOCK);
		ServerMessageMap(GAMEMSG_REQUEST_PRIVATETRADE_ADDHOUSEUNIT, DoMsg_GAMEMSG_REQUEST_PRIVATETRADE_ADDHOUSEUNIT);
		ServerMessageMap(GAMEMSG_REQUEST_PRIVATETRADE_ADDHORSE, DoMsg_GAMEMSG_REQUEST_PRIVATETRADE_ADDHORSE);
		ServerMessageMap(GAMEMSG_REQUEST_PRIVATETRADE_MYACCEPT, DoMsg_GAMEMSG_REQUEST_PRIVATETRADE_MYACCEPT);	// 개인 거래에서 내 목록을 수락 
		ServerMessageMap(GAMEMSG_REQUEST_PRIVATETRADE_MYCANCEL, DoMsg_GAMEMSG_REQUEST_PRIVATETRADE_MYCANCEL);	// 개인 거래에서 내 목록을 취소

		//-----------------------------------------------------
		// 파티
		//-----------------------------------------------------
		//ServerMessageMap(GAMEMSG_REQUEST_PARTY_CREATE, DoMsg_GAMEMSG_REQUEST_PARTY_CREATE);
		ServerMessageMap(GAMEMSG_REQUEST_PARTY_CREATEINVITE, DoMsg_GAMEMSG_REQUEST_PARTY_CREATEINVITE);
		ServerMessageMap(GAMEMSG_REQUEST_PARTY_CREATEJOIN, DoMsg_GAMEMSG_REQUEST_PARTY_CREATEJOIN);
		ServerMessageMap(GAMEMSG_REQUEST_PARTY_INVITE, DoMsg_GAMEMSG_REQUEST_PARTY_INVITE);
		ServerMessageMap(GAMEMSG_REQUEST_PARTY_INVITEREJECT, DoMsg_GAMEMSG_REQUEST_PARTY_INVITEREJECT);
		ServerMessageMap(GAMEMSG_REQUEST_PARTY_JOIN, DoMsg_GAMEMSG_REQUEST_PARTY_JOIN);
		ServerMessageMap(GAMEMSG_REQUEST_PARTY_LEAVE, DoMsg_GAMEMSG_REQUEST_PARTY_LEAVE);
		ServerMessageMap(GAMEMSG_REQUEST_PARTY_FORCELEAVE, DoMsg_GAMEMSG_REQUEST_PARTY_FORCELEAVE);
		ServerMessageMap(GAMEMSG_REQUEST_PARTY_ALLUSERLIST, DoMsg_GAMEMSG_REQUEST_PARTY_ALLUSERLIST);
		ServerMessageMap(GAMEMSG_REQUEST_PARTY_CHANGEITEMGETPATTERN, DoMsg_GAMEMSG_REQUEST_PARTY_CHANGEITEMGETPATTERN);

		ServerMessageMap(GAMEMSG_REQUEST_PARTY_WANTJOIN, DoMsg_GAMEMSG_REQUEST_PARTY_WANTJOIN);
		ServerMessageMap(GAMEMSG_REQUEST_PARTY_WANTJOINRESULT, DoMsg_GAMEMSG_REQUEST_PARTY_WANTJOINRESULT);
		//-----------------------------------------------------
		// 친구
		//-----------------------------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_FRIENDADD, DoMsg_GAMEMSG_REQUEST_FRIENDADD);
		ServerMessageMap(GAMEMSG_REQUEST_FRIENDDEL, DoMsg_GAMEMSG_REQUEST_FRIENDDEL);
		ServerMessageMap(GAMEMSG_REQUEST_FRIENDADDACCEPT, DoMsg_GAMEMSG_REQUEST_FRIENDADDACCEPT);
		ServerMessageMap(GAMEMSG_REQUEST_REJECTFRIENDADD, DoMsg_GAMEMSG_REQUEST_REJECTFRIENDADD);
		ServerMessageMap(GAMEMSG_REQUEST_FRIENDLIST, DoMsg_GAMEMSG_REQUEST_FRIENDLIST);
		ServerMessageMap(GAMEMSG_REQUEST_FRIENDMEMO, DoMsg_GAMEMSG_REQUEST_FRIENDMEMO);
		ServerMessageMap(GAMEMSG_REQUEST_FRIENDMEMOSET, DoMsg_GAMEMSG_REQUEST_FRIENDMEMOSET);
		ServerMessageMap(GAMEMSG_REQUEST_FRIENDCHANGEGROUP, DoMsg_GAMEMSG_REQUEST_FRIENDCHANGEGROUP);
		ServerMessageMap(GAMEMSG_REQUEST_FRIENDCHANGEGROUPNAME, DoMsg_GAMEMSG_REQUEST_FRIENDCHANGEGROUPNAME);

		//-----------------------------------------------------
		// 투표
		//-----------------------------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_VOTEKINGSELECTION,				DoMsg_GAMEMSG_REQUEST_VOTEKINGSELECTION);
		ServerMessageMap(GAMEMSG_REQUEST_STARTELECTIONSTUMP,			DoMsg_GAMEMSG_REQUEST_STARTELECTIONSTUMP);
		ServerMessageMap(GAMEMSG_REQUEST_ENDELECTIONSTUMP,				DoMsg_GAMEMSG_REQUEST_ENDELECTIONSTUMP);
		ServerMessageMap(GAMEMSG_REQUEST_ELECTIONSTUMP,					DoMsg_GAMEMSG_REQUEST_ELECTIONSTUMP);
		ServerMessageMap(GAMEMSG_REQUEST_WARPTOPOLLMAP,					DoMsg_GAMEMSG_REQUEST_WARPTOPOLLMAP);
		ServerMessageMap(GAMEMSG_REQUEST_VOTEKINGAVAILABLE,				DoMsg_GAMEMSG_REQUEST_VOTEKINGAVAILABLE);
		ServerMessageMap(GAMEMSG_REQUEST_STARTVOTESTATUS,				DoMsg_GAMEMSG_REQUEST_STARTVOTESTATUS);

		//-------------------------
		// Daily 퀘스트
		//-------------------------
		ServerMessageMap(GAMEMSG_REQUEST_DAILYQUESTLIST, DoMsg_GAMEMSG_REQUEST_DAILYQUESTLIST);
		ServerMessageMap(GAMEMSG_REQUEST_DAILYQUESTSELECT, DoMsg_GAMEMSG_REQUEST_DailyQuestSelect);
		ServerMessageMap(GAMEMSG_REQUEST_DAILYQUESTSITUATION, DoMsg_GAMEMSG_REQUEST_DailyQuestSituation);
		ServerMessageMap(GAMEMSG_REQUEST_DAILYQUESTEND, DoMsg_GAMEMSG_REQUEST_DailyQuestEnd);

		//-------------------------
		// Daily 퀘스트2
		//-------------------------
		ServerMessageMap(GAMEMSG_REQUEST_DAILYQUEST2LIST, DoMsg_GAMEMSG_REQUEST_DAILYQUEST2LIST);
		ServerMessageMap(GAMEMSG_REQUEST_DAILYQUEST2SELECT, DoMsg_GAMEMSG_REQUEST_DailyQuest2Select);
		ServerMessageMap(GAMEMSG_REQUEST_DAILYQUEST2SITUATION, DoMsg_GAMEMSG_REQUEST_DailyQuest2Situation);
		ServerMessageMap(GAMEMSG_REQUEST_DAILYQUEST2END, DoMsg_GAMEMSG_REQUEST_DailyQuest2End);
		//-------------------------
		// Daily 퀘스트3
		//-------------------------
		ServerMessageMap(GAMEMSG_REQUEST_DAILYQUEST3LIST, DoMsg_GAMEMSG_REQUEST_DAILYQUEST3LIST);
		ServerMessageMap(GAMEMSG_REQUEST_DAILYQUEST3SELECT, DoMsg_GAMEMSG_REQUEST_DailyQuest3Select);
		ServerMessageMap(GAMEMSG_REQUEST_DAILYQUEST3SITUATION, DoMsg_GAMEMSG_REQUEST_DailyQuest3Situation);
		ServerMessageMap(GAMEMSG_REQUEST_DAILYQUEST3END, DoMsg_GAMEMSG_REQUEST_DailyQuest3End);

		//---------------------------------------
		// ItemMall
		//---------------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_ITEMMALLEXISTENCE, DoMsg_GAMEMSG_REQUEST_ITEMMALLEXISTENCE);
		ServerMessageMap(GAMEMSG_REQUEST_ITEMMALLITEMLIST, DoMsg_GAMEMSG_REQUEST_ITEMMALLITEMLIST);
		ServerMessageMap(GAMEMSG_REQUEST_ITEMMALLGETITEM, DoMsg_GAMEMSG_REQUEST_ITEMMALLGETITEM);
		
		ServerMessageMap(GAMEMSG_REQUEST_GET_SEL_PGLIST,DoMsg_GAMEMSG_REQUEST_GET_SEL_PGLIST);
		ServerMessageMap(GAMEMSG_REQUEST_GET_ITEMMALL_ITEMINFO,DoMsg_GAMEMSG_REQUEST_GET_ITEMMALL_ITEMINFO);
		ServerMessageMap(GAMEMSG_REQUEST_GET_MYCASH_INFO,DoMsg_GAMEMSG_REQUEST_GET_MYCASH_INFO);
		ServerMessageMap(GAMEMSG_REQUEST_ITEMMALL_BUYITEM,DoMsg_GAMEMSG_REQUEST_ITEMMALL_BUYITEM);
		ServerMessageMap(GAMEMSG_REQUEST_ITEMMALL_GIFTITEM,DoMsg_GAMEMSG_REQUEST_ITEMMALL_GIFTITEM);
		ServerMessageMap(GAMEMSG_REQUEST_CHECK_ACCOUNTID,DoMsg_GAMEMSG_REQUEST_CHECK_ACCOUNTID);
		ServerMessageMap(GAMEMSG_REQUEST_BILLPAGE_URL,DoMsg_GAMEMSG_REQUEST_BILLPAGE_URL);
		ServerMessageMap(GAMEMSG_REQUEST_LOGINPAGE_URL,DoMsg_GAMEMSG_REQUEST_LOGINPAGE_URL);
		ServerMessageMap(GAMEMSG_REQUEST_GACHAPAGE_URL,DoMsg_GAMEMSG_REQUEST_GACHAPAGE_URL);
		ServerMessageMap(GAMEMSG_REQUEST_CHANGE_HERO,DoMsg_GAMEMSG_REQUEST_CHANGE_HERO);
		ServerMessageMap(GAMEMSG_REQUEST_PRESENT_ANSWER,DoMsg_GAMEMSG_REQUEST_PRESENT_ANSWER);

		//-----------------------------------------------------
		// 개인상거래 
		//-----------------------------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_PERSONALSHOPBANNER, DoMsg_GAMEMSG_REQUEST_PERSONALSHOPBANNER);
		ServerMessageMap(GAMEMSG_REQUEST_PERSONALSHOPDATA, DoMsg_GAMEMSG_REQUEST_PERSONALSHOPDATA);
		ServerMessageMap(GAMEMSG_REQUEST_STARTPERSONALSHOP, DoMsg_GAMEMSG_REQUEST_STARTPERSONALSHOP);
		ServerMessageMap(GAMEMSG_REQUEST_STOPPERSONALSHOP, DoMsg_GAMEMSG_REQUEST_STOPPERSONALSHOP);
		ServerMessageMap(GAMEMSG_REQUEST_BUYPERSONALSHOP, DoMsg_GAMEMSG_REQUEST_BUYPERSONALSHOP);
		ServerMessageMap(GAMEMSG_REQUEST_SELLPERSONALSHOP, DoMsg_GAMEMSG_REQUEST_SELLPERSONALSHOP);
		ServerMessageMap(GAMEMSG_REQUEST_SEARCHPERSONALSHOPITEM, DoMsg_GAMEMSG_REQUEST_SEARCHPERSONALSHOPITEM);
		ServerMessageMap(GAMEMSG_REQUEST_MAKEPERSONALSHOP, DoMsg_GAMEMSG_REQUEST_MAKEPERSONALSHOP);
		ServerMessageMap(GAMEMSG_REQUEST_MAKEPERSONALSHOP_MANUFACTURE, DoMsg_GAMEMSG_REQUEST_MAKEPERSONALSHOP_MANUFACTUER);	// 제조의뢰 인터페이스 개선 

		//-----------------------------------------------------
		// 소환수 
		//-----------------------------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONFREE,					DoMsg_GAMEMSG_REQUEST_SUMMONFREE);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONNAMECHANGE,				DoMsg_GAMEMSG_REQUEST_SUMMONNAMECHANGE);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONREVIVE,					DoMsg_GAMEMSG_REQUEST_SUMMONREVIVE);
		ServerMessageMap(GAMEMSG_REQUEST_USESUMMONBONUS,				DoMsg_GAMEMSG_REQUEST_USESUMMONBONUS);
		ServerMessageMap(GAMEMSG_REQUEST_TAKEINOUT,						DoMsg_GAMEMSG_REQUEST_TAKEINOUT);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONATTACKCHANGE,			DoMsg_GAMEMSG_REQUEST_SUMMONATTACKCHANGE);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONEVOLVE,					DoMsg_GAMEMSG_REQUEST_SUMMONEVOLVE);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONSCROLL,					DoMsg_GAMEMSG_REQUEST_SUMMONSCROLL);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMON_STATUSINIT,				DoMsg_GAMEMSG_REQUEST_SUMMON_STATUSINIT);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMON_SETAUTOHEAL,			DoMsg_GAMEMSG_REQUEST_SUMMON_SETAUTOHEAL);
		ServerMessageMap(GAMEMSG_REQUEST_TRADEMERCHANTBUYSUMMONINFO,	DoMsg_GAMEMSG_REQUEST_TRADEMERCHANTBUYSUMMONINFO);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONTRADE,					DoMsg_GAMEMSG_REQUEST_SUMMONTRADE);
		ServerMessageMap(GAMEMSG_REQUEST_SELECT_SUMMONCHAR,				DoMsg_GAMEMSG_REQUEST_SELECT_SUMMONCHAR);
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONUSTON,					DoMsg_GAMEMSG_REQUEST_SUMMONUSETON);//소환수 장비 장착석을 사용한다.
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONSLOTIN,					DoMsg_GAMEMSG_REQUEST_SUMMONSLOTIN);//Base의 소환수 Slot에 넣는다.
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONSLOTOUT, 				DoMsg_GAMEMSG_REQUEST_SUMMONSLOTOUT);//소환수를 Slot에서 빼낸다.
		ServerMessageMap(GAMEMSG_REQUEST_SUMMON_TRANSFORM,				DoMsg_GAMEMSG_REQUEST_SUMMON_TRANSFORM);//소환수를 변신 시킨다.
		

		//-----------------------------------------------------
		// 마을상세정보 
		//-----------------------------------------------------
		ServerMessageMap(GAMEMSG_REQUEST_VILLAGEDETAILINFO, DoMsg_GAMEMSG_REQUEST_VILLAGEDETAILINFO);
		ServerMessageMap(GAMEMSG_REQUEST_GETVILLAGEINFO, DoMsg_GAMEMSG_REQUEST_GETVILLAGEINFO);
		ServerMessageMap(GAMEMSG_REQUEST_RESIDENTSLIST, DoMsg_GAMEMSG_REQUEST_RESIDENTSLIST);
		ServerMessageMap(GAMEMSG_REQUEST_DECLAREWAR, DoMsg_GAMEMSG_REQUEST_DECLAREWAR);
		ServerMessageMap(GAMEMSG_REQUEST_CANCELDECLAREWAR, DoMsg_GAMEMSG_REQUEST_CANCELDECLAREWAR);
		ServerMessageMap(GAMEMSG_REQUEST_SETSYMBOLSTATUS, DoMsg_GAMEMSG_REQUEST_SETSYMBOLSTATUS);
		ServerMessageMap(GAMEMSG_REQUEST_SETCASTLESTATUS, DoMsg_GAMEMSG_REQUEST_SETCASTLESTATUS);
		ServerMessageMap(GAMEMSG_REQUEST_SETVILLAGEMARK, DoMsg_GAMEMSG_REQUEST_SETVILLAGEMARK);
		ServerMessageMap(GAMEMSG_REQUEST_SETVILLAGEMAP, DoMsg_GAMEMSG_REQUEST_SETVILLAGEMAP);

		//----------------------------------------------
		// 주주총회
		//----------------------------------------------	
		ServerMessageMap(GAMEMSG_REQUEST_GENERALMEETING_INFO, DoMsg_GAMEMSG_REQUEST_GENERALMEETING_INFO);
		ServerMessageMap(GAMEMSG_REQUEST_GENERALMEETING_SUGGEST, DoMsg_GAMEMSG_REQUEST_GENERALMEETING_SUGGEST);
		ServerMessageMap(GAMEMSG_REQUEST_GENERALMEETING_VOTE, DoMsg_GAMEMSG_REQUEST_GENERALMEETING_VOTE);
		ServerMessageMap(GAMEMSG_REQUEST_GENERALMEETING_VOTE_REFRESH, DoMsg_GAMEMSG_REQUEST_GENERALMEETING_VOTE_REFRESH);
		ServerMessageMap(GAMEMSG_REQUEST_GENERALMEETING_ACCEPTCANDIDATE, DoMsg_GAMEMSG_REQUEST_GENERALMEETING_ACCEPTCANDIDATE);

		ServerMessageMap(GAMEMSG_REQUEST_GENERALMEETING_PARTICIPATE, DoMsg_GAMEMSG_REQUEST_GENERALMEETING_PARTICIPATE);

		ServerMessageMap(GAMEMSG_REQUEST_GENERALMEETING_CHAT, DoMsg_GAMEMSG_REQUEST_GENERALMEETING_CHAT);
		ServerMessageMap(GAMEMSG_REQUEST_GENERALMEETING_CHATJOIN, DoMsg_GAMEMSG_REQUEST_GENERALMEETING_CHATJOIN);
		ServerMessageMap(GAMEMSG_REQUEST_GENERALMEETING_CHATOUT, DoMsg_GAMEMSG_REQUEST_GENERALMEETING_CHATOUT);

		//----------------------------------------------
		// Item
		//----------------------------------------------	
		ServerMessageMap(GAMEMSG_REQUEST_INVREPAIR, DoMsg_GAMEMSG_REQUEST_INVREPAIR);
		ServerMessageMap(GAMEMSG_REQUEST_INVDROP, DoMsg_GAMEMSG_REQUEST_INVDROP);
		ServerMessageMap(GAMEMSG_REQUEST_MAKEITEMSWITCH, DoMsg_GAMEMSG_REQUEST_MAKEITEMSWITCH);
		ServerMessageMap(GAMEMSG_REQUEST_INVPICKUP, DoMsg_GAMEMSG_REQUEST_INVPICKUP);
		ServerMessageMap(GAMEMSG_REQUEST_ENCHANT, DoMsg_GAMEMSG_REQUEST_ENCHANT);
		ServerMessageMap(GAMEMSG_REQUEST_NPCREPAIRPRICE, DoMsg_GAMEMSG_REQUEST_NPCREPAIRPRICE);
		ServerMessageMap(GAMEMSG_REQUSET_NPCREPAIR, DoMsg_GAMEMSG_REQUEST_NPCREPAIR);
		ServerMessageMap(GAMEMSG_REQUEST_EXCHANGEWEAPON, DoMsg_GAMEMSG_REQUEST_EXCHANGEWEAPON);		
		ServerMessageMap(GAMEMSG_REQUEST_EXCHANGECLOTHES, DoMsg_GAMEMSG_REQUEST_EXCHANGECLOTHES);
		ServerMessageMap(GAMEMSG_REQUEST_READY, DoMsg_GAMEMSG_REQUEST_READY);
		ServerMessageMap(GAMEMSG_REQUEST_RIDEHORSE, DoMsg_GAMEMSG_REQUEST_RIDEHORSE);
		ServerMessageMap(GAMEMSG_REQUEST_UNRIDEHORSE, DoMsg_GAMEMSG_REQUEST_UNRIDEHORSE);
		ServerMessageMap(GAMEMSG_REQUEST_HORSENAMECHANGE, DoMsg_GAMEMSG_REQUEST_HORSENAMECHANGE);
		
		// 밀봉해제 요청
		ServerMessageMap(GAMEMSG_REQUEST_INV_CANCELLATIONSEALINGUP,DoMsg_GAMEMSG_REQUEST_INV_CANCELLATIONSEALINGUP);	
		ServerMessageMap(GAMEMSG_REQUEST_BELONGITEM_DESTROY, DoMsg_GAMEMSG_REQUEST_BELONGITEM_DESTROY);
		ServerMessageMap(GAMEMSG_REQUEST_DISASSEMBLEITEM, DoMsg_GAMEMSG_REQUEST_DISASSEMBLEITEM);
		ServerMessageMap(GAMEMSG_REQUEST_DISASSEMBLEITEM_LIST, DoMsg_GAMEMSG_REQUEST_DISASSEMBLEITEM_LIST);
		ServerMessageMap(GAMEMSG_REQUEST_DISASSEMBLEITEM_RECIEVE, DoMsg_GAMEMSG_REQUEST_DISASSEMBLEITEM_RECIEVE);

		ServerMessageMap(GAMEMSG_REQUEST_MAKEITEMINVINDEX,DoMsg_GAMEMSG_REQUEST_MAKEITEMINVINDEX);
		ServerMessageMap(GAMEMSG_REQUEST_ENCHANTITEMINVINDEX,DoMsg_GAMEMSG_REQUEST_ENCHANTITEMINVINDEX);	
		ServerMessageMap(GAMEMSG_REQUEST_ENCHANTITEMSTARTOREND,DoMsg_GAMEMSG_REQUEST_ENCHANTITEMSTARTOREND);	

		ServerMessageMap(GAMEMSG_REQUEST_ENCHANTOTHERPRICE,DoMsg_GAMEMSG_REQUEST_ENCHANTOTHERPRICE);
		ServerMessageMap(GAMEMSG_REQUEST_ENCHANTITEMSWITCH,DoMsg_GAMEMSG_REQUEST_ENCHANTITEMSWITCH);

		ServerMessageMap(GAMEMSG_REQUEST_ENCHANTOTHERSHOW,DoMsg_GAMEMSG_REQUEST_ENCHANTOTHERSHOW);		
		ServerMessageMap(GAMEMSG_REQUEST_ENCHANTITEMINV,DoMsg_GAMEMSG_REQUEST_ENCHANTITEMINV);		
		ServerMessageMap(GAMEMSG_REQUEST_ENCHANT_USEDAYPLUS, DoMsg_GAMEMSG_REQUEST_ENCHANT_USEDAYPLUS); 
		// 연금술사로부터 아이템 변경을 요청
		ServerMessageMap(GAMEMSG_REQUEST_INV_CHANGITEMFORMNPC,DoMsg_GAMEMSG_REQUEST_INV_ChangItemFromNPC);	// 연금술사로부터 아이템변경을 요청한다.

		// [영훈] 아이템 인첸트 속성 변경 요청 - 2008.02.20
		ServerMessageMap(GAMEMSG_REQUEST_CHANGEENCHANT, DoMsg_GAMEMSG_REQUEST_CHANGEENCHANT);

		// [영훈] 소환수 장비착용 : 사람에서 소환수로 아이템 이동
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONPUSHITEM, DoMsg_GAMEMSG_REQUEST_SUMMONPUSHITEM);
		// [영훈] 소환수 장비착용 : 소환수에서 사람으로 아이템 이동
		ServerMessageMap(GAMEMSG_REQUEST_SUMMONPOPITEM, DoMsg_GAMEMSG_REQUEST_SUMMONPOPITEM);
			

		// 상태초기화이용권을 이용하여 상태 초기화 요청
		ServerMessageMap(GAMEMSG_REQUEST_INITSTATUS, DoMsg_GAMEMSG_REQUEST_INITSTATUS);
		ServerMessageMap(GAMEMSG_REQUEST_HUNTMAPWARP, DoMsg_GAMEMSG_REQUEST_HUNTMAPWARP);
		ServerMessageMap(GAMEMSG_REQUEST_PVPMAPWARP, DoMsg_GAMEMSG_REQUEST_PVPMAPWARP);

		
		ServerMessageMap(GAMEMSG_REQUEST_PERSONALSHOPWARP, DoMsg_GAMEMSG_REQUEST_PERSONALSHOPWARP);
		ServerMessageMap(GAMEMSG_REQUEST_FRIENDWARP, DoMsg_GAMEMSG_REQUEST_FRIENDWARP);
		ServerMessageMap(GAMEMSG_REQUEST_PARTYWARP, DoMsg_GAMEMSG_REQUEST_PARTYWARP);
		// 30이하 유저들을 짐꾼왜구 마을로 보낸다
		ServerMessageMap(GAMEMSG_REQUEST_WARJOIN, DoMsg_GAMEMSG_REQUEST_WARJOIN);
		// 운영자가 사용자의 로그를 요청한다.
		ServerMessageMap(GAMEMSG_REQUEST_PERSONAL_LOG, DoMsg_GAMEMSG_REQUEST_PERSONAL_LOG);
		ServerMessageMap(GAMEMSG_REQUEST_HORSEINIT, DoMsg_GAMEMSG_REQUEST_HORSEINIT);
		ServerMessageMap(GAMEMSG_REQUEST_USEHORSE_BONUS, DoMsg_GAMEMSG_REQUEST_USEHORSE_BONUS);
		ServerMessageMap(GAMEMSG_REQUEST_CHANGE_HORSETYPE, DoMsg_GAMEMSG_REQUEST_CHANGE_HORSETYPE);
		ServerMessageMap(GAMEMSG_REQUEST_CHANGE_CHARNAME, DoMsg_GAMEMSG_REQUEST_CHANGENAME);
		ServerMessageMap(GAMEMSG_REQUEST_CHANGE_CHARKIND, DoMsg_GAMEMSG_REQUEST_CHANGE_CHARKIND);
		ServerMessageMap(GAMEMSG_REQUEST_HORSE_ADDSTATUS, DoMsg_GAMEMSG_REQUEST_HORSE_ADDSTATUS);
		ServerMessageMap(GAMEMSG_REQUEST_NOLIMITTICKET_WARP, DoMsg_GAMEMSG_REQUEST_NOLIMITTICKET_WARP);
		
		// 목표 지역으로 날라간다 
		ServerMessageMap(GAMEMSG_REQUEST_WARP_TARGETWORLD, DoMsg_GAMEMSG_REQUEST_WARP_TARGETWORLD);

		//이벤트 결과를 요청한다.
		ServerMessageMap(GAMEMSG_REQUEST_PRIZE_GAMEEVENT,DoMsg_GAMEMSG_REQUEST_PRIZE_GAMEEVENT);
		// 학교 이벤트
		ServerMessageMap(GAMEMSG_REQUEST_SETSCHOOLEVENT,DoMsg_GAMEMSG_REQUEST_SETSCHOOLEVENT);
		// 조선의 반격 이벤트
		//ServerMessageMap(GAMEMSG_REQUEST_COUNTATTACK_INFO,DoMsg_GAMEMSG_REQUEST_COUNTATTACK_INFO);
		// 천군 이벤트		
		ServerMessageMap(GAMEMSG_REQUEST_EVENTNPC,DoMsg_GAMEMSG_REQUEST_EVENTNPC);

		ServerMessageMap(GAMEMSG_REQUEST_SETGREETING,DoMsg_GAMEMSG_REQUEST_SETGREETING);
		ServerMessageMap(GAMEMSG_REQUEST_GETGREETING,DoMsg_GAMEMSG_REQUEST_GETGREETING);

		ServerMessageMap(GAMEMSG_REQUEST_SITDOWN,DoMsg_GAMEMSG_REQUEST_SITDOWN);

		ServerMessageMap(GAMEMSG_REQUEST_REVIVE ,DoMsg_GAMEMSG_REQUEST_REVIVE);		// 부활을 요청
		ServerMessageMap(GAMEMSG_REQUEST_RESURRECTION , DoMsg_GAMEMSG_REQUEST_RESURRECTION )	;	// 즉시 부활을 요청

		ServerMessageMap(GAMEMSG_REQUEST_GET_WEAPONSKILLCOST,DoMsg_GAMEMSG_REQUEST_GET_WEAPONSKILLCOST);
		ServerMessageMap(GAMEMSG_REQUEST_SET_WEAPONSKILL, DoMsg_GAMEMSG_REQUEST_SET_WEAPONSKILL);
		ServerMessageMap(GAMEMSG_REQUEST_RIGHTMOUSE_USERLIST_NAME, DoMsg_GAMEMSG_REQUEST_RIGHTMOUSE_USERLIST_NAME);

		ServerMessageMap(GAMEMSG_REQUEST_DISTRIBUTION_WORLDMONEY,DoMsg_GAMEMSG_REQUEST_DISTRIBUTION_WORLDMONEY);
		ServerMessageMap(GAMEMSG_REQUEST_WORLDMONEY_TRADELIST,DoMsg_GAMEMSG_REQUEST_WORLDMONEY_TRADELIST);
		ServerMessageMap(GAMEMSG_REQUEST_WORLDMONEY_SELLORDER,DoMsg_GAMEMSG_REQUEST_WORLDMONEY_SELLORDER);
		ServerMessageMap(GAMEMSG_REQUEST_WORLDMONEY_BUYORDER,DoMsg_GAMEMSG_REQUEST_WORLDMONEY_BUYORDER);
		ServerMessageMap(GAMEMSG_REQUEST_WORLDMONEY_CANCELORDER,DoMsg_GAMEMSG_REQUEST_WORLDMONEY_CANCELORDER);
	
		ServerMessageMap(GAMEMSG_REQUEST_MYPUCHIKOMIURL ,DoMsg_GAMEMSG_REQUEST_MYPUCHIKOMIURL);
		ServerMessageMap(GAMEMSG_REQUEST_USERPUCHIKOMIURL, DoMsg_GAMEMSG_REQUEST_USERPUCHIKOMIURL);

		// TradeServer
		ServerMessageMap(GAMEMSG_REQUEST_TRADESERVER_SET_SELLORDER,DoMsg_GAMEMSG_REQUEST_TRADESERVER_SET_SELLORDER);
		ServerMessageMap(GAMEMSG_REQUEST_TRADESERVER_CANCEL_SELLORDER,DoMsg_GAMEMSG_REQUEST_TRADESERVER_CANCEL_SELLORDER);
		ServerMessageMap(GAMEMSG_REQUEST_TRADESERVER_SET_BUYORDER,DoMsg_GAMEMSG_REQUEST_TRADESERVER_SET_BUYORDER);
		ServerMessageMap(GAMEMSG_REQUEST_TRADESERVER_GET_LISTINFO,DoMsg_GAMEMSG_REQUEST_TRADESERVER_GET_LISTINFO);
		ServerMessageMap(GAMEMSG_REQUEST_TRADESERVER_GET_MYINFO,DoMsg_GAMEMSG_REQUEST_TRADESERVER_GET_MYINFO);

		ServerMessageMap(GAMEMSG_REQUEST_TRADESERVER_GET_SAVEDACU_LIST,DoMsg_GAMEMSG_REQUEST_TRADESERVER_GET_SAVEDACU_LIST);
		ServerMessageMap(GAMEMSG_REQUEST_TRADESERVER_GET_WITHDRAW_ACU,DoMsg_GAMEMSG_REQUEST_TRADESERVER_GET_WITHDRAW_ACU);

		// WorldPassport
		ServerMessageMap(GAMEMSG_REQUEST_WORLDPASSPORT_SET,DoMsg_GAMEMSG_REQUEST_WORLDPASSPORT_SET);
		ServerMessageMap(GAMEMSG_REQUEST_WORLDPASSPORT_EXTEND,DoMsg_GAMEMSG_REQUEST_WORLDPASSPORT_EXTEND);

		ServerMessageMap(GAMEMSG_REQUEST_SETCOUNTRYINFO, DoMsg_GAMEMSG_REQUEST_SETCOUNTRYINFO );
		ServerMessageMap(GAMEMSG_REQUEST_SETSHOWCOUNTRY, DoMsg_GAMEMSG_REQUEST_SETSHOWCOUNTRY );
		ServerMessageMap(GAMEMSG_REQUEST_SETSHOWPUCHIKOMI, DoMsg_GAMEMSG_REQUEST_SETSHOWPUCHIKOMI );
		ServerMessageMap(GAMEMSG_REQUEST_USERLISTBYCOUNTRY, DoMsg_GAMEMSG_REQUEST_USERLISTBYCOUNTRY);
		ServerMessageMap(GAMEMSG_REQUEST_ADDCHINESEUSER, DoMsg_GAMEMSG_REQUEST_ADDCHINESEUSER );

		// 20미만 레벨 유저 요청
		ServerMessageMap(GAMEMSG_REQUEST_LOWLEVELLIST, DoMsg_GAMEMSG_REQUEST_LOWLEVELLIST);
		ServerMessageMap(GAMEMSG_REQUEST_SETEMOTICON, DoMsg_GAMEMSG_REQUEST_SETEMOTICON);

		ServerMessageMap(GAMEMSG_REQUEST_ADDCHINESEUSER, DoMsg_GAMEMSG_REQUEST_ADDCHINESEUSER );
		ServerMessageMap(GAMEMSG_REQUEST_GAME_GUARD_AUTH,DoMsg_GAMEMSG_REQUEST_GAME_GUARD_AUTH);

		// Guild
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_CREATEGUILD,DoMsg_GAMEMSG_REQUEST_GUILD_CREATEGUILD);
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_DESTROYGUILD,DoMsg_GAMEMSG_REQUEST_GUILD_DESTROYGUILD);
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_JOINGUILD,DoMsg_GAMEMSG_REQUEST_GUILD_JOINGUILD);
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_CONFIRMJOINGUILD,DoMsg_GAMEMSG_REQUEST_GUILD_CONFIRMJOINGUILD);
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_LEAVEGUILD,DoMsg_GAMEMSG_REQUEST_GUILD_LEAVEGUILD);
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_CHANGEVILLAGE,DoMsg_GAMEMSG_REQUEST_GUILD_CHANGEVILLAGE);
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_GETGUILDLIST,DoMsg_GAMEMSG_REQUEST_GUILD_GETGUILDLIST);
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_GETGUILDINFO,DoMsg_GAMEMSG_REQUEST_GUILD_GETGUILDINFO);
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_CONFIRMCREATEGUILD,DoMsg_GAMEMSG_REQUEST_GUILD_CONFIRMCREATEGUILD);
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_SETSECONDMASTER,DoMsg_GAMEMSG_REQUEST_GUILD_SETSECONDMASTER);
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_GIVEGUILDMONEY,DoMsg_GAMEMSG_REQUEST_GUILD_GIVEGUILDMONEY);
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_SETSTRFEERATE,DoMsg_GAMEMSG_REQUEST_GUILD_SETSTRFEERATE);
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_CHANGESTATUS,DoMsg_GAMEMSG_REQUEST_GUILD_CHANGESTATUS);
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_SETMARK,DoMsg_GAMEMSG_REQUEST_GUILD_SETMARK);
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_CHANGENAME,DoMsg_GAMEMSG_REQUEST_GUILD_CHANGENAME);
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_CHANGEMASTER,DoMsg_GAMEMSG_REQUEST_GUILD_CHANGEMASTER);
		ServerMessageMap(GAMEMSG_REQUEST_GUILDWAR_RESERVELIST, DoMsg_GAMEMSG_REQUEST_GUILDWAR_RESERVELIST);
		ServerMessageMap(GAMEMSG_REQUEST_GUILDWAR_APPLYRESERVE, DoMsg_GAMEMSG_REQUEST_GUILDWAR_APPLYRESERVE);
		ServerMessageMap(GAMEMSG_REQUEST_GUILDWAR_APPLYTOENEMY, DoMsg_GAMEMSG_REQUEST_GUILDWAR_APPLYTOENEMY);
		ServerMessageMap(GAMEMSG_REQUEST_GUILDWAR_CONFIRMAPPLY, DoMsg_GAMEMSG_REQUEST_GUILDWAR_CONFIRMAPPLY);
		ServerMessageMap(GAMEMSG_REQUEST_GUILDDUNGEON_APPLYLIST, DoMsg_GAMEMSG_REQUEST_GUILDDUNGEON_APPLYLIST);
		ServerMessageMap(GAMEMSG_REQUEST_GUILDDUNGEON_APPLY, DoMsg_GAMEMSG_REQUEST_GUILDDUNGEON_APPLY);
		ServerMessageMap(GAMEMSG_REQUEST_GUILDDUNGEON_STATUS, DoMsg_GAMEMSG_REQUEST_GUILDDUNGEON_STATUS);
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_MEMBERLIST, DoMsg_GAMEMSG_REQUEST_GUILD_MEMBERLIST);
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_GETVILLAGELIST, DoMsg_GAMEMSG_REQUEST_GUILD_GETVILLAGELIST);
		ServerMessageMap(GAMEMSG_REQUEST_HIT, DoMsg_GAMEMSG_REQUEST_HIT);
		ServerMessageMap(GAMEMSG_REQUEST_SETBULLET, DoMsg_GAMEMSG_REQUEST_SETBULLET);
		ServerMessageMap(GAMEMSG_REQUEST_GUILDWAR_RECOMMANDLIST, DoMsg_GAMEMSG_REQUEST_GUILDWAR_RECOMMANDLIST);
		ServerMessageMap(GAMEMSG_REQUEST_GUILD_NOTCONNECT_CHANGEMASTER,DoMsg_GAMEMSG_REQUEST_GUILD_NOTCONNECTMASTER_CHANGEMASTER);

		ServerMessageMap(GAMEMSG_REQUEST_GUILDHUNTMAPWAR_MAPREGISTER, DoMsg_GAMEMSG_REQUEST_GUILDHUNTMAPWAR_MAPREGISTER);// 길드 사냥터 도전 맵등록
		ServerMessageMap(GAMEMSG_REQUEST_GUILDHUNTMAPWAR_WARREGISTER, DoMsg_GAMEMSG_REQUEST_GUILDHUNTMAPWAR_WARREGISTER);// 길드 사냥터 길드전 신청
		ServerMessageMap(GAMEMSG_REQUEST_GUILDHUNTMAPWAR_REQUEST_WARP, DoMsg_GAMEMSG_REQUEST_GUILDHUNTMAPWAR_REQUEST);// 길드 사냥터 REQUSET
		ServerMessageMap(GAMEMSG_REQUEST_GUILDHUNTMAPWAR_GETTOP10, DoMsg_GAMEMSG_REQUEST_GUILDHUNTMAPWAR_TOP10);// 길드 사냥터 REQUSET
				
		ServerMessageMap(GAMEMSG_REQUEST_GUILDHUNTMAPWAR_SERVERTIME, DoMsg_GAMEMSG_REQUEST_GUILDHUNTMAPWAR_SERVERTIME);// 길드 사냥터 도전 정확한 서버시간을 받아 온다.
		ServerMessageMap(GAMEMSG_REQUEST_GUILDHUNTMAPWAR_HAVEMAP, DoMsg_GAMEMSG_REQUEST_GUILDHUNTMAPWAR_HAVEMAP);// 길드 사냥터 신청했는가.

		////////////////
		// 가차시스템
		////////////////
		ServerMessageMap(GAMEMSG_REQUEST_GACHAPRODUCT_LIST,		DoMsg_GAMEMSG_REQUEST_GACHAPRODUCT_LIST );
		ServerMessageMap(GAMEMSG_REQUEST_GACHABUY,				DoMsg_GAMEMSG_REQUEST_GACHABUY );				 

		ServerMessageMap(GAMEMSG_REQUEST_GACHA2PRODUCT_LIST,	DoMsg_GAMEMSG_REQUEST_GACHA2PRODUCT_LIST );
		ServerMessageMap(GAMEMSG_REQUEST_GACHA2BUY,				DoMsg_GAMEMSG_REQUEST_GACHA2BUY );
		ServerMessageMap(GAMEMSG_REQUEST_CARRYOVER_GACHABUY,	DoMsg_GAMEMSG_REQUEST_CARRYOVER_GACHABUY );

		// [영훈] 이월 가챠
		ServerMessageMap(GAMEMSG_REQUEST_CARRYOVER_GACHA_LIST,			DoMsg_GAMEMSG_REQUEST_CARRYOVER_GACHA_LIST );
		ServerMessageMap(GAMEMSG_REQUEST_CARRYOVER_SELECTPRODUCT_LIST,	DoMsg_GAMEMSG_REQUEST_CARRYOVER_SELECTPRODUCT_LIST );

		ServerMessageMap(GAMEMSG_REQUEST_MOFUMOFUEVENT_RESERVE,		DoMsg_GAMEMSG_REQUEST_MOFUMOFUEVENT_RESERVE );
		ServerMessageMap(GAMEMSG_REQUEST_MOFUMOFUEVENT_RESERVELIST, DoMsg_GAMEMSG_REQUEST_MOFUMOFUEVENT_RESERVELIST );
		ServerMessageMap(GAMEMSG_REQUEST_MOFUMOFUEVENT_ENTERFIELD,	DoMsg_GAMEMSG_REQUEST_MOFUMOFUEVENT_ENTERFIELD );
		ServerMessageMap(GAMEMSG_REQUEST_MOFUMOFUEVENT_WARP,		DoMsg_GAMEMSG_REQUEST_MOFUMOFUEVENT_WARP );

		ServerMessageMap(GAMEMSG_REQUEST_NAMINGQUEST_START, DoMsg_GAMEMSG_REQUEST_NAMINGQUEST_START );
		ServerMessageMap(GAMEMSG_REQUEST_SETPERSONCURRENTNAMING, DoMsg_GAMEMSG_REQUEST_SETPERSONCURRENTNAMING);

		//KHY - 0822 - 해피빈 퀘스트 추가.
		ServerMessageMap(GAMEMSG_REQUEST_HAPPYBEANQUEST_START, DoMsg_GAMEMSG_REQUEST_HAPPYBEANQUEST_START );
		//		ServerMessageMap(GAMEMSG_REQUEST_SETPERSONCURRENTNAMING, DoMsg_GAMEMSG_REQUEST_SETPERSONCURRENTNAMING);

		ServerMessageMap(GAMEMSG_REQUEST_SYSTEMREWARDLIST, DoMsg_GAMEMSG_REQUEST_SYSTEMREWARDLIST );
		ServerMessageMap(GAMEMSG_REQUEST_RECIEVESYSTEMREWARD, DoMsg_GAMEMSG_REQUEST_RECIEVESYSTEMREWARD);
		ServerMessageMap(GAMEMSG_REQUEST_ATTEND, DoMsg_GAMEMSG_REQUEST_ATTEND);
		ServerMessageMap(GAMEMSG_REQUEST_ATTENDREWARDITEM, DoMsg_GAMEMSG_REQUEST_ATTENDREWARDITEM);

		ServerMessageMap(GAMEMSG_REQUEST_CREATEEMPIRE, DoMsg_GAMEMSG_REQUEST_CREATEEMPIRE);
		ServerMessageMap(GAMEMSG_REQUEST_DESTROYEMPIRE, DoMsg_GAMEMSG_REQUEST_DESTROYEMPIRE);
		ServerMessageMap(GAMEMSG_REQUEST_INVITEEMPIRE, DoMsg_GAMEMSG_REQUEST_INVITEEMPIRE);
		ServerMessageMap(GAMEMSG_REQUEST_SECEDEEMPIRE, DoMsg_GAMEMSG_REQUEST_SECEDEEMPIRE);
		ServerMessageMap(GAMEMSG_REQUEST_EMPIREINFO, DoMsg_GAMEMSG_REQUEST_EMPIREINFO);
		ServerMessageMap(GAMEMSG_REQUEST_JOINEMPIRE, DoMsg_GAMEMSG_REQUEST_JOINEMPIRE);
		ServerMessageMap(GAMEMSG_REQUEST_SETEMPIREMONEY, DoMsg_GAMEMSG_REQUEST_SECEDEEMPIRE);
		
		ServerMessageMap(GAMEMSG_REQUEST_AUTOMACRO_ON, DoMsg_GAMEMSG_REQUEST_AUTOMACRO_ON);	//[추가 : 황진성 2007. 12. 5 오토프로그램 사용중인 유저에게 메시지를 받음. C -> S]
		
		ServerMessageMap(GAMEMSG_REQUEST_NEWYEAR_CLICK, DoMsg_GAMEMSG_REQUEST_NEWYEAR_CLICK);	//[추가 : 황진성 2007. 12. 11 => 신년 이벤튼 버튼를 클라이언트에서 선택 했음. C->S]

		ServerMessageMap(GAMEMSG_REQUEST_MISSIONQUEST_START,  DoMsg_GAMEMSG_REQUEST_MISSIONQUEST_START );
		ServerMessageMap(GAMEMSG_REQUEST_MISSIONQUEST_ACCEPT, DoMsg_GAMEMSG_REQUEST_MISSIONQUEST_ACCEPT );
		ServerMessageMap(GAMEMSG_REQUEST_MISSIONQUEST_CANCEL, DoMsg_GAMEMSG_REQUEST_MISSIONQUEST_CANCEL );
		
		// [성웅] 보물찾기 이벤트
		ServerMessageMap(GAMEMSG_REQUEST_TREASUREEVENT_KILLNPC,  DoMsg_GAMEMSG_REQUEST_TREASUREEVENT_KILLNPC );
		//KHY - 1220 - 변신시스템.
		ServerMessageMap(GAMEMSG_REQUEST_TRANSFORM, DoMsg_GAMEMSG_REQUEST_TRANSFORM);
		ServerMessageMap(GAMEMSG_REQUEST_TRANSFORM_END, DoMsg_GAMEMSG_REQUEST_TRANSFORM_END);
		ServerMessageMap(GAMEMSG_REQUEST_TRANSFORM_USEITEM, DoMsg_GAMEMSG_REQUEST_TRANSFORM_USEITEM);
		//인스턴스 던전 명예의 전당 리스트
		ServerMessageMap(GAMEMSG_REQUEST_HOFLIST, DoMsg_GAMEMSG_REQUEST_HOFLIST);
		ServerMessageMap(GAMEMSG_REQUEST_RAKINGLIST, DoMsg_GAMEMSG_REQUEST_RAKINGLIST);

		//KHY - 1111 - 오토바이 추가.
		ServerMessageMap(GAMEMSG_REQUEST_OILLING_USEITEM, DoMsg_GAMEMSG_REQUEST_OILLING_USEITEM);
		

		//[추가 : 황진성 2008. 1. 9 => 인스턴트던젼.]
		ServerMessageMap(GAMEMSG_REQUEST_INSTANTSDUNGEON_STATUS, DoMsg_GAMEMSG_REQUEST_INSTANTSDUNGEON_STATUS);
		
		//******************************************************************************************
		//[추가 : 황진성 2008. 1. 29 =>  공간 상자 메시지 처리. C->S]
		
		ServerMessageMap(GAMEMSG_REQUEST_SPACE_BOX_LIST, DoMsg_GAMEMSG_REQUEST_SPACE_BOX_LIST);
		ServerMessageMap(GAMEMSG_REQUEST_TRESURE_BOX_LIST, DoMsg_GAMEMSG_REQUEST_TRESURE_BOX_LIST);
		
		ServerMessageMap(GAMEMSG_REQUEST_KEEP_SPACE_BOX_MOVE_ITEM,	 DoMsg_GAMEMSG_REQUEST_KEEP_SPACE_BOX_MOVE_ITEM);
		ServerMessageMap(GAMEMSG_REQUEST_RECOVERY_SPACE_BOX_MOVE_ITEM,	 DoMsg_GAMEMSG_REQUEST_RECOVERY_SPACE_BOX_MOVE_ITEM);

		//******************************************************************************************
		
		// [추가 : 황진성 2008. 2. 28 => 아티펙트 메시지. C->S ]
		ServerMessageMap(GAMEMSG_REQUEST_ARTIFACT_MIXTURE,	   DoMsg_GAMEMSG_REQUEST_ARTIFACT_MIXTURE );
		ServerMessageMap(GAMEMSG_REQUEST_ARTIFACT_REMOVE,	   DoMsg_GAMEMSG_REQUEST_ARTIFACT_REMOVE );
		ServerMessageMap(GAMEMSG_REQUEST_ARTIFACT_SLOT_CREATE, DoMsg_GAMEMSG_REQUEST_ARTIFACT_SLOT_CREATE );
		ServerMessageMap(GAMEMSG_REQUEST_OPENBIGITEMBOX,		DoMsg_GAMEMSG_REQUEST_OPENBIGITEMBOX);
		
		//******************************************************************************************

		// [영훈] CRC 코드를 체크하라는 요청에 답을 보냄
		ServerMessageMap( GAMEMSG_REQUEST_FILECRCCHECK, DoMsg_GAMEMSG_REQUEST_FILECRCCHECK );

		// [영훈] 해적선 : 인던으로 입장 가능한지 물어봄
		ServerMessageMap( GAMEMSG_REQUEST_PIRATESHIP_ENTERFIELD, DoMsg_GAMEMSG_REQUEST_PIRATESHIP_ENTERFIELD );

		//KHY - 1113 - 크리스마스 이벤트 -
		ServerMessageMap( GAMEMSG_REQUEST_CHRISTMASEVET_ENTERFIELD, DoMsg_GAMEMSG_REQUEST_CHRISTMASEVET_ENTERFIELD );
		
		// [진성] 영웅의 동상 이벤트 버프룰렛 돌릴때 사용하는 패킷. => 2008-6-10
		ServerMessageMap( GAMEMSG_REQUEST_BUFF_ROULETTE, DoMsg_GAMEMSG_REQUEST_BUFF_ROULETTE );

		// [종호] 통화량 조절
		ServerMessageMap(GAMEMSG_REQUEST_BALANCECURRENCY_BUFF, DoMsg_GAMEMSG_REQUEST_BALANCECURRENCY_BUFF);

		// [진성] 서버 이벤트 랭킹 정보 요청. => 2008-6-20
		ServerMessageMap( GAMEMSG_REQUEST_SERVER_EVENT_RANK_INFO, DoMsg_GAMEMSG_REQUEST_SERVER_EVENT_RANK_INFO );

		// [영훈] 서버 이벤트 퀘스트 시작 정보 요청
		ServerMessageMap( GAMEMSG_REQUEST_SERVER_EVENT_QUEST_START, DoMsg_GAMEMSG_REQUEST_SERVER_EVENT_QUEST_START );

		// [영훈] 서버 이벤트 인던 로비 입장 요청
		ServerMessageMap( GAMEMSG_REQUEST_SERVER_EVENT_LOBBY_ENTERFIELD, DoMsg_GAMEMSG_REQUEST_SERVER_EVENT_LOBBY_ENTERFIELD );

		// [진성] 서버 이벤트에서 1등한 서버에게 주는 보너스 게이트. => 2008-6-20
		ServerMessageMap( GAMEMSG_REQUEST_SERVER_EVENT_BONUS_STAGE, DoMsg_GAMEMSG_REQUEST_SERVER_EVENT_BONUS_STAGE );

		// [춘기] 소환수 스태미너 충전
		ServerMessageMap( GAMEMSG_REQUEST_SUMMON_SPTCHARGE, DoMsg_GAMEMSG_REQUEST_SUMMON_SPTCHARGE );

		// [영훈] 멀티 클라이언트의 갯수를 받음
		ServerMessageMap( GAMEMSG_REQUEST_CHECKPROCESS, DoMsg_GAMEMSG_REQUEST_CHECKPROCESS );

		//---------------------------------
		//[진성] 호박상자. => 2008-9-16
		//---------------------------------
		ServerMessageMap( GAMEMSG_REQUEST_AMBER_BOX_SELECT_ITEM_ADD, DoMsg_GAMEMSG_REQUEST_AMBER_BOX_SELECT_ITEM_ADD );
		ServerMessageMap( GAMEMSG_REQUEST_AMBER_BOX_SELECT_ITEM_GET, DoMsg_GAMEMSG_REQUEST_AMBER_BOX_SELECT_ITEM_GET );
		//---------------------------------

		ServerMessageMap( GAMEMSG_REQUEST_CHAR_ROULETTE, DoMsg_GAMEMSG_REQUEST_CHAR_ROULETTE );
		// NEW PVP - 손성웅 2008.10.08
		ServerMessageMap(GAMEMSG_REQUEST_PVP_FILED,				DoMsg_GAMEMSG_REQUEST_PVP_FILED);
		// [영훈] PVP 무한대전 관련
		ServerMessageMap(GAMEMSG_REQUEST_PVP_LEAGUE_UI_INFOGET,		DoMsg_GAMEMSG_REQUEST_PVP_LEAGUE_UI_INFOGET);
		ServerMessageMap(GAMEMSG_REQUEST_PVP_LEAGUE_APPLY,			DoMsg_GAMEMSG_REQUEST_PVP_LEAGUE_APPLY);
		ServerMessageMap(GAMEMSG_REQUEST_PVP_LEAGUE_CANCEL,			DoMsg_GAMEMSG_REQUEST_PVP_LEAGUE_CANCEL);
		ServerMessageMap(GAMEMSG_REQUEST_PVP_LEAGUE_AGAIN_RESERVE,	DoMsg_GAMEMSG_REQUEST_PVP_LEAGUE_AGAIN_RESERVE);

		ServerMessageMap( GAMEMSG_REQUEST_VILLAGE_RESIDENT_INVITE,	DoMsg_GAMEMSG_REQUEST_VILLAGE_RESIDENT_INVITE);

		
		//[진성] 도우미 2008-11-05
		ServerMessageMap( GAMEMSG_REQUEST_QUESTION_LIST_GET,			DoMsg_GAMEMSG_REQUEST_QUESTION_LIST_GET			);
		ServerMessageMap( GAMEMSG_REQUEST_QUESTION_CONTENTS_GET,		DoMsg_GAMEMSG_REQUEST_QUESTION_CONTENTS_GET		);
		ServerMessageMap( GAMEMSG_REQUEST_CHECK_QUESTION,				DoMsg_GAMEMSG_REQUEST_CHECK_QUESTION			);
		ServerMessageMap( GAMEMSG_REQUEST_ADD_QUESTION,					DoMsg_GAMEMSG_REQUEST_ADD_QUESTION				);
		ServerMessageMap( GAMEMSG_REQUEST_ADD_ANSWER,					DoMsg_GAMEMSG_REQUEST_ADD_ANSWER				);
		ServerMessageMap( GAMEMSG_REQUEST_ADD_ANSWER_COMPLETE,			DoMsg_GAMEMSG_REQUEST_ADD_ANSWER_COMPLETE		);
		ServerMessageMap( GAMEMSG_REQUEST_ADD_ANSWER_COMPLETE_RESULT,	DoMsg_GAMEMSG_REQUEST_ADD_ANSWER_COMPLETE_RESULT);
		ServerMessageMap( GAMEMSG_REQUEST_DEL_QUESTION, 				DoMsg_GAMEMSG_REQUEST_DEL_QUESTION				);
		ServerMessageMap( GAMEMSG_REQUEST_DEL_ANSWER,					DoMsg_GAMEMSG_REQUEST_DEL_ANSWER				);
			
				
		// PVP_League
		//ServerMessageMap(GAMEMSG_REQUEST_PVP_LEAGUE_APPLY, DoMsg_GAMEMSG_REQUEST_PVP_LEAGUE);
		
		// 신년운세 룰렛
		ServerMessageMap( GAMEMSG_REQUEST_DIVINATION_ROULETTE, DoMsg_GAMEMSG_REQUEST_DIVINATION_ROULETTE );

		//[진성] 엘릭서.
		ServerMessageMap( GAMEMSG_REQUEST_ELIXIR_NPC_ITEM_TYPE_LIST_GET,	DoMsg_GAMEMSG_REQUEST_ELIXIR_NPC_ITEM_TYPE_LIST_GET );
		ServerMessageMap( GAMEMSG_REQUEST_ELIXIR_NPC_CHANGE_ITEM,			DoMsg_GAMEMSG_REQUEST_ELIXIR_NPC_CHANGE_ITEM		);
		ServerMessageMap( GAMEMSG_REQUEST_ELIXIR_SET,						DoMsg_GAMEMSG_REQUEST_ELIXIR_SET					);
		// [성웅] 발렌타인데이 전쟁 질문 답변
		ServerMessageMap( GAMEMSG_REQUEST_VALENTINE_REQUEST,	DoMsg_GAMEMSG_REQUEST_VALENTINEWAR_REQUEST );
		ServerMessageMap( GAMEMSG_REQUEST_VALENTINE_INFO_GET,	DoMsg_GAMEMSG_REQUEST_VALENTINEWAR_INFOGET );

		// [영훈] 새로운 선택 상자
		ServerMessageMap( GAMEMSG_REQUEST_NEWSELECTBOX_SELECT,	DoMsg_GAMEMSG_REQUEST_NEWSELECTBOX_SELECT );
		ServerMessageMap( GAMEMSG_REQUEST_NEWSELECTBOX_GETITEM,	DoMsg_GAMEMSG_REQUEST_NEWSELECTBOX_GETITEM );

		//=============================================================================================
		// [진성] 통합마켓.
		//---------------------------------------------------------------------------------------------
		ServerMessageMap( GAMEMSG_REQUEST_NEWMARKETACCOUNT,		DoMsg_GAMEMSG_REQUEST_NEWMARKETACCOUNT);
		ServerMessageMap( GAMEMSG_REQUEST_NEWMARKETITEMLIST,	DoMsg_GAMEMSG_REQUEST_NEWMARKETITEMLIST);
		ServerMessageMap( GAMEMSG_REQUEST_NEWSELLITEM,			DoMsg_GAMEMSG_REQUEST_NEWSELLITEM);
		ServerMessageMap( GAMEMSG_REQUEST_GETFROMNEWMARKET,		DoMsg_GAMEMSG_REQUEST_GETFROMNEWMARKET);
		ServerMessageMap( GAMEMSG_REQUEST_NEWBUYITEM,			DoMsg_GAMEMSG_REQUEST_NEWBUYITEM);
		ServerMessageMap( GAMEMSG_REQUEST_SETNEWMARKETFEE,		DoMsg_GAMEMSG_REQUEST_SETNEWMARKETFEE);
		ServerMessageMap( GAMEMSG_REQUEST_PERSONNAME_SERIALID,	DoMsg_GAMEMSG_REQUEST_PERSONNAME_SERIALID );
		
		//=============================================================================================
		// [진성] 프로모터.
		//---------------------------------------------------------------------------------------------
		ServerMessageMap( GAMEMSG_REQUEST_PROMOTER_INFO_TOTAL_GET,		DoMsg_GAMEMSG_REQUEST_PROMOTER_INFO_TOTAL_GET);
		ServerMessageMap( GAMEMSG_REQUEST_PROMOTER_INFO_GET,			DoMsg_GAMEMSG_REQUEST_PROMOTER_INFO_GET );
		ServerMessageMap( GAMEMSG_REQUEST_PROMOTER_URL_GET,				DoMsg_GAMEMSG_REQUEST_PROMOTER_URL_GET );
		ServerMessageMap( GAMEMSG_REQUEST_PROMOTERNPC_GIVE_ITEM_GET,	DoMsg_GAMEMSG_REQUEST_PROMOTERNPC_GIVE_ITEM_GET);

		//=============================================================================================
		// [영훈] 결혼 시스템
		//---------------------------------------------------------------------------------------------
		ServerMessageMap( GAMEMSG_REQUEST_PROPOSE_QUESTION,				DoMsg_GAMEMSG_REQUEST_PROPOSE_QUESTION );
		ServerMessageMap( GAMEMSG_REQUEST_PROPOSE_ANSWER,				DoMsg_GAMEMSG_REQUEST_PROPOSE_ANSWER );
		ServerMessageMap( GAMEMSG_REQUEST_WEDDINGANNIVERSARY_ITEMGET,	DoMsg_GAMEMSG_REQUEST_WEDDINGANNIVERSARY_ITEMGET );

		ServerMessageMap( GAMEMSG_REQUEST_WEDDING_RESERVE,				DoMsg_GAMEMSG_REQUEST_WEDDING_RESERVE );
		ServerMessageMap( GAMEMSG_REQUEST_WEDDING_SIMPLELIST_GET,		DoMsg_GAMEMSG_REQUEST_WEDDING_SIMPLELIST_GET );
		ServerMessageMap( GAMEMSG_REQUEST_WEDDING_QUESTION_ANSWER,		DoMsg_GAMEMSG_REQUEST_WEDDING_QUESTION_ANSWER );
		ServerMessageMap( GAMEMSG_REQUEST_WEDDING_LIST_GET,				DoMsg_GAMEMSG_REQUEST_WEDDING_LIST_GET );

		ServerMessageMap( GAMEMSG_REQUEST_WEDDING_HALL_ENTER,			DoMsg_GAMEMSG_REQUEST_WEDDING_HALL_ENTER );
		ServerMessageMap( GAMEMSG_REQUEST_WEDDING_RESERVE_CANCEL,		DoMsg_GAMEMSG_REQUEST_WEDDING_RESERVE_CANCEL );
		ServerMessageMap( GAMEMSG_REQUEST_MARRIAGEMATE_WARP,			DoMsg_GAMEMSG_REQUEST_MARRIAGEMATE_WARP );


		

		// 보물찾기 이벤트 - 오카라 10개를 쓰고 아무짝에 쓸모없는 버프받을래?
		ServerMessageMap( GAMEMSG_REQUEST_TREASUREEVENT_USEOKARA,		DoMsg_GAMEMSG_REQUEST_TREASUREEVENT_USEOKARA);
		// 가족 시스템 
		ServerMessageMap( GAMEMSG_REQUEST_FAMILY_REQUEST_ADD_CHILDREN,	DoMsg_GAMEMSG_REQUEST_FAMILY_REQUEST_ADD_FAMILY );	// 자녀 추가 요청
		ServerMessageMap( GAMEMSG_REQUEST_FAMILY_ADD_FAMILY,			DoMsg_GAMEMSG_REQUEST_FAMILY_ADD_FAMILY );	// 자녀 추가 요청
		ServerMessageMap( GAMEMSG_REQUEST_FAMILY_DEL_CHILDREN,			DoMsg_GAMEMSG_REQUEST_FAMILY_DEL_CHILDREN );	// 자녀 추가 
		ServerMessageMap( GAMEMSG_REQUEST_FAMILY_WARP,					DoMsg_GAMEMSG_REQUEST_FAMILY_WARP );	// 자녀 추가 
		ServerMessageMap( GAMEMSG_REQUEST_FAMILY_PLUS_FAMILYEFFECT,		DoMsg_GAMEMSG_REQUEST_FAMILY_PLUS_FAMILYEFFECT );	// 가족효과 연장
		ServerMessageMap( GAMEMSG_REQUEST_FAMILY_CHAT,					DoMsg_GAMEMSG_REQUEST_FAMILY_CHAT );	// 자녀 추가 
		
		//	[종호] 통화량 조절 - 사용 가능 통화량 요청
		ServerMessageMap( GAMEMSG_REQUEST_BALANCECANUSECURRENCY,		DoMsg_GAMEMSG_REQUEST_BALANCECANUSECURRENCY);

		// [영훈] 수호정령
		ServerMessageMap( GAMEMSG_REQUEST_SOULGUARD_STATUSINOUT,		DoMsg_GAMEMSG_REQUEST_SOULGUARD_STATUSINOUT);
		ServerMessageMap( GAMEMSG_REQUEST_SOULGUARD_CHANGENAME,			DoMsg_GAMEMSG_REQUEST_SOULGUARD_CHANGENAME);
		ServerMessageMap( GAMEMSG_REQUEST_SOULGUARD_DEAD,				DoMsg_GAMEMSG_REQUEST_SOULGUARD_DEAD);

		ServerMessageMap( GAMEMSG_REQUEST_SOULGUARD_HOUSE_CHANGE,		DoMsg_GAMEMSG_REQUEST_SOULGUARD_HOUSE_CHANGE);
		ServerMessageMap( GAMEMSG_REQUEST_SOULGUARD_HOUSE_CREATE,		DoMsg_GAMEMSG_REQUEST_SOULGUARD_HOUSE_CREATE);

		// 라쿤 피하기 이벤트
		//Switch_10MonthEvent_RacoonDodge
		ServerMessageMap( GAMEMSG_REQUEST_RACOONDODGE_EVENT_RESERVATION,			DoMsg_GAMEMSG_REQUEST_RACOONDODGEEVENTRESERVATION);
		ServerMessageMap( GAMEMSG_REQUEST_RACOONDODGE_EVENT_REQUEST_PLAYEVENT,		DoMsg_GAMEMSG_REQUEST_RACOONDODGE_EVENT_REQUEST_PLAYEVENT);	// 게임을 하겠다 수락 
		ServerMessageMap( GAMEMSG_REQUEST_RACOONDODGE_EVENT_OVER5SECOND_START,		DoMsg_GAMEMSG_REQUEST_RACOONDODGE_EVENT_OVER5SECOND_START);
		ServerMessageMap( GAMEMSG_REQUEST_RACOONDODGE_EVENT_GET_RESERVE_LIST,		DoMsg_GAMEMSG_REQUEST_RACOONDODGE_EVENT_GET_RESERVE_LIST);
		
		ServerMessageMap( GAMEMSG_REQUEST_PROMOTER_WARP,							DoMsg_GAMEMSG_REQUEST_PROMOTER_WARP );
		// [기형] 휴면 계정 시스템
		ServerMessageMap( GAMEMSG_REQUEST_DORMANCY_TAKEOUTEQUIPITEMINBOX,		DoMsg_GAMEMSG_REQUEST_DORMANCY_TAKEOUTEQUIPITEMINBOX);
		ServerMessageMap( GAMEMSG_REQUEST_DORMANCY_BUYPOINTITEM,		DoMsg_GAMEMSG_REQUEST_DORMANCY_BUYPOINTITEM);

		//  [8/12/2009 종호_GAWIBAWIBO] 
		ServerMessageMap(GAMEMSG_REQUEST_GAWIBAWIBO_CHARGED_MONEY,		DoMsg_GAMEMSG_REQUEST_GAWIBAWIBO_CHARGED_MONEY);
		ServerMessageMap(GAMEMSG_REQUEST_GAWIBAWIBO_CALCULATE_RESULT,	DoMsg_GAMEMSG_REQUEST_GAWIBAWIBO_CALCULATE_RESULT);
		//ServerMessageMap(GAMEMSG_REQUEST_GAWIBAWIBO_COUNT,				DoMsg_GAMEMSG_REQUEST_GAWIBAWIBO_COUNT);
		ServerMessageMap(GAMEMSG_REQUEST_GAWIBAWIBO_REWARD,				DoMsg_GAMEMSG_REQUEST_GAWIBAWIBO_REWARD);
		


		// 복불복 이벤트
		ServerMessageMap( GAMEMSG_REQUEST_BBB_CHECK_PlAY_CONDITION,	DoMsg_GAMEMSG_REQUEST_BBB_CHECK_PlAY_CONDITION );		// 복불복 참여가능 상황 체크
		ServerMessageMap( GAMEMSG_REQUEST_BBB_WAITLIST_ANSWER,		DoMsg_GAMEMSG_REQUEST_BBB_WAITLIST_ANSWER );			// 대기자리스트 등록 수락 시
		ServerMessageMap( GAMEMSG_REQUEST_BBB_WAITLIST_CANCEL,		DoMsg_GAMEMSG_REQUEST_BBB_WAITLIST_CANCEL );			// 대기 취소
		ServerMessageMap( GAMEMSG_REQUEST_BBB_WARPMAPANSWER,		DoMsg_GAMEMSG_REQUEST_BBB_WARPMAPANSWER );				// 1순위 대기자의 응답
		ServerMessageMap( GAMEMSG_REQUEST_BBB_ALREADYRESERVED,		DoMsg_GAMEMSG_REQUEST_BBB_ALREADYRESERVED );			// 이미예약 질문

		// [지연] 2010신년이벤트
		ServerMessageMap( GAMEMSG_REQUEST_2010NEWYEAREVENT_QUESTCANCEL, DoMsg_GAMEMSG_REQUEST_2010NEWYEAREVENT_QUESTCANCEL );	// 퀘스트 거절 메세지

		// 
		ServerMessageMap( GAMEMSG_REQUEST_NEWNPCREPAIR,					DoMsg_GAMEMSG_REQUEST_NEWNPCREPAIR );
		ServerMessageMap( GAMEMSG_REQUEST_NEWITEMREPAIR,				DoMsg_GAMEMSG_REQUEST_NEWITEMREPAIR );
		ServerMessageMap( GAMEMSG_REQUEST_NEWITEMREPAIRREQUESTINFO,		DoMsg_GAMEMSG_REQUEST_NEWITEMREPAIRREQUESTINFO );

		// [기형] 축제 이벤트 지역으로 이동하기
		ServerMessageMap( GAMEMSG_REQUEST_FESTIVAL_EVENT_ENTERFIELD_EVENTAREA, DoMsg_GAMEMSG_REQUEST_FESTIVAL_EVENT_ENTERFIELD_EVENTAREA );

		// [종호] 할로윈 스피릿 박스
		ServerMessageMap(GAMEMSG_REQUEST_HALLOWEENSPIRITBOX_OK, DoMsg_GAMEMSG_REQUEST_HALLOWEENSPIRITBOX_OK);

		// [춘기] 몬스터 생성 요청
		ServerMessageMap(GAMEMSG_REQUEST_MONSTERCREATE, DoMsg_GAMEMSG_REQUEST_MONSTERCREATE);

		// [영훈] 캐릭터 보관소 
		ServerMessageMap(GAMEMSG_REQUEST_PERSONSLOTNUMCHANGE, DoMsg_GAMEMSG_REQUEST_PERSONSLOTNUMCHANGE);

		// [춘기] 장비 생성 요청
		ServerMessageMap( GAMEMSG_REQUEST_EQUIPMENTCREATE, DoMsg_GAMEMSG_REQUEST_EQUIPMENTCREATE);

		//-------------------------------------------------------------------------------------------------------------------
		//[성웅] 라쿤이벤트 군주 이벤트로 변경
		//-------------------------------------------------------------------------------------------------------------------
		ServerMessageMap( GAMEMSG_REQUEST_RACCOONEVENT_TOGOONZU, DoMsg_GAMEMSG_REQUEST_RACCOONEVENT_TOGOONZU);
		ServerMessageMap( GAMEMSG_REQUEST_GOONZURACCOONEVENT_SETINFO, DoMsg_GAMEMSG_REQUEST_GOONZURACCOONEVENT_SETINFO);

		// [기형] 배틀로얄
		ServerMessageMap(GAMEMSG_REQUEST_BATTLEROYAL_REMAINEDTIME,	DoMsg_GAMEMSG_REQUEST_BATTLEROYAL_REMAINEDTIME);
		ServerMessageMap(GAMEMSG_REQUEST_BATTLEROYAL_MOVETOSTADIUM,	DoMsg_GAMEMSG_REQUEST_BATTLEROYAL_MOVETOSTADIUM);

		// [기형] 발렌타인데이 이벤트
		ServerMessageMap(GAMEMSG_REQUEST_VALENTINEEVENT_GIVE_PRESENT_TONPC,	DoMsg_GAMEMSG_REQUEST_VALENTINEEVENT_GIVE_PRESENT_TONPC);
		ServerMessageMap(GAMEMSG_REQUEST_VALENTINEEVENT_ISHOLDING,			DoMsg_GAMEMSG_REQUEST_VALENTINEEVENT_ISHOLDING);
		
		//-------------------------------------------------------------------------------------------------------------------
		//[] 
		//-------------------------------------------------------------------------------------------------------------------
		ServerMessageMap( GAMEMSG_REQUEST_SKILLBOOK_BUYITEM,		DoMsg_GAMEMSG_REQUEST_SKILLBOOK_BUYITEM);
		ServerMessageMap( GAMEMSG_REQUEST_SKILLBOOK_SUBMAGIC_DEL,	DoMsg_GAMEMSG_REQUEST_SKILLBOOK_SUBMAGIC_DEL);

		//---------------------------------------------------------------------------------------------------------------------
		// 메크로
		//---------------------------------------------------------------------------------------------------------------------

		ServerMessageMap( GAMEMSG_RESPONSE_RECORD_ACTION, DoMsg_GAMEMSG_RESPONSE_RECORD_ACTION );					// [2009.06.30 양정모] 클라이언트의 행동을 기록(응답)
		ServerMessageMap( GAMEMSG_REQUEST_RECORD_ACTION_FINISHED, DoMsg_GAMEMSG_REQUEST_RECORD_ACTION_FINISHED );	// [2009.06.30 양정모] 클라이언트의 행동을 기록(응답)

		ServerMessageMap( GAMEMSG_GZFTP_PROTOCOL, DoMsg_GAMEMSG_GZFTP_PROTOCOL );									// [2009.06.30 양정모] 클라이언트의 행동을 기록(응답)

		//---------------------------------------------------------------------------------------------------------------------
		// [지연] 초보자 파티 퀘스트 시스템 (파티매칭)
		//---------------------------------------------------------------------------------------------------------------------
		ServerMessageMap( GAMEMSG_REQUEST_PARTYMATCHING_LEVEL,		DoMsg_GAMEMSG_REQUEST_PARTYMATCHING_LEVEL );	// 파티퀘스트 수행가능레벨 체크.
		ServerMessageMap( GAMEMSG_REQUEST_APPYLYTOPARTYJOIN,		DoMsg_GAMEMSG_REQUEST_APPYLYTOPARTYJOIN );		// 파티 가입 신청 버튼 클릭 시.
		ServerMessageMap( GAMEMSG_REQUEST_CREATECOMPLETEPARTY,		DoMsg_GAMEMSG_REQUEST_CREATECOMPLETEPARTY );	// 필요한 조건 입력 후 파티 생성 하려고 파티만들기 버튼 클릭 시. 
		ServerMessageMap( GAMEMSG_REQUEST_REMOVEPARTYMATCHING,		DoMsg_GAMEMSG_REQUEST_REMOVEPARTYMATCHING );
		ServerMessageMap( GAMEMSG_REQUEST_GETPARTYMEMBERNAMELIST,	DoMsg_GAMEMSG_REQUEST_GETPARTYMEMBERNAMELIST );		


		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//	[종호] 파티퀘스트 
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		ServerMessageMap( GAMEMSG_REQUEST_PARTY_QUEST_CHECKSTART,	DoMsg_GAMEMSG_REQUEST_PARTY_QUEST_CHECKSTART	);	// 파티퀘스트 시작시 조건 체크	
		ServerMessageMap( GAMEMSG_REQUEST_PARTY_QUEST_START,		DoMsg_GAMEMSG_REQUEST_PARTY_QUEST_START			);	// 파티퀘스트 시작


		//---------------------------------------------------------------------------------------------------------------------
		// [진성] 기부 시스템.
		//---------------------------------------------------------------------------------------------------------------------
		ServerMessageMap( GAMEMSG_REQUEST_CONTRIBUTION_ITEM_LIST,	DoMsg_GAMEMSG_REQUEST_CONTRIBUTION_ITEM_LIST	);	// 
		ServerMessageMap( GAMEMSG_REQUEST_CONTRIBUTION_ITEM_INPUT,	DoMsg_GAMEMSG_REQUEST_CONTRIBUTION_ITEM_INPUT	);	// 
		ServerMessageMap( GAMEMSG_REQUEST_CONTRIBUTION_MAKE_NPC,	DoMsg_GAMEMSG_REQUEST_CONTRIBUTION_MAKE_NPC		);	// 

		//---------------------------------------------------------------------------------------------------------------------
		// [진성] 자이언트 라쿤 부활 이벤트.
		//---------------------------------------------------------------------------------------------------------------------
		ServerMessageMap( GAMEMSG_REQUEST_GIANTRACCOON_RESURRECT_EVENT_ITEM_GET,	DoMsg_GAMEMSG_REQUEST_GIANTRACCOON_RESURRECT_EVENT_ITEM_GET );	// 아이템 받기.
		ServerMessageMap( GAMEMSG_REQUEST_NPOTRACCOON_ITEM_GET,						DoMsg_GAMEMSG_REQUEST_NPOTRACCOON_ITEM_GET );					// 아이템 받기.
	

		ServerMessageMap(GAMEMSG_REQUEST_SEARCHMANUFACTURE,							DoMsg_GAMEMSG_REQUEST_SEARCHMANUFACTURE);

		ServerMessageMap(GAMEMSG_REQUEST_GO_RACCOONWORLD,							DoMsg_GAMEMSG_REQUEST_GORACCOONWORLD);
		// [성웅] 레벨 보상 상자에서 아이템을 준다 
		ServerMessageMap(GAMEMSG_REQUEST_OPEN_LEVEL_LIMIT_BOX,						DoMsg_GAMEMSG_REQUEST_OPEN_LEVEL_LIMIT_BOX);
		//[성웅] // 죽었던 말던 어떤상황이던 아이템을 줄인다
		ServerMessageMap(GAMEMSG_REQUEST_JUSTITEMUSE, DoMsg_GAMEMSG_REQUEST_JustItemUse);


		//[진성] 발렌타인 데이 과금 아이템.
		ServerMessageMap( GAMEMSG_REQUEST_VALENTINEDAY_ITEM_PACKING,				DoMsg_GAMEMSG_REQUEST_VALENTINEDAY_ITEM_PACKING );
		ServerMessageMap( GAMEMSG_REQUEST_VALENTINEDAY_BUY_ITEM,					DoMsg_GAMEMSG_REQUEST_VALENTINEDAY_BUY_ITEM);
		ServerMessageMap( GAMEMSG_REQUEST_VALENTINEDAY_CONFESSION_QUESTION,			DoMsg_GAMEMSG_REQUEST_VALENTINEDAY_CONFESSION_QUESTION);
		ServerMessageMap( GAMEMSG_REQUEST_VALENTINEDAY_CONFESSION_ANSWER,			DoMsg_GAMEMSG_REQUEST_VALENTINEDAY_CONFESSION_ANSWER);
		
		
	
	}
}

BOOL cltServer::InBufferMessageOperation(cltMsg* pclMsg, SI32 id)
{
	//------------------------------------------------
	// 유효한 아이디어야 한다. 
	//------------------------------------------------
	if(pclCM->IsValidID(id) == FALSE
		|| pclCM->CR[id]->IsValidConnection() == FALSE)return FALSE;

	//-----------------------------------------------
	// 조작되지 않은 메시지임을 확인한다. 
	//-----------------------------------------------
	if(pclMsg->clHead.usCmd >= GAMEMSG_END)
	{
		pclLog->FilePrint( TEXT("Config\\ErrorLog.log"), TEXT("NotProperMsgFromClient1 Cmd:%d PersonID:%d"), pclMsg->clHead.usCmd , pclCM->CR[id]->pclCI->GetPersonID());
		return FALSE;
	}
	if(pclMsg->clHead.usSize > sizeof(cltMsg))
	{
		pclLog->FilePrint( TEXT("Config\\ErrorLog.log"), TEXT("NotProperMsgFromClient2 Cmd:%d Size:%d PersonID:%d"), pclMsg->clHead.usCmd , pclMsg->clHead.usSize , pclCM->CR[id]->pclCI->GetPersonID());
		return FALSE;
	}

	// 클라이언트로부터 받은 메시지의 양을 합계한다. 
	pclStatisticsManager->clDailyStatistics.siReceiveFromClientMsgNumber++;


	// 클라이언트로부터 메시지를 받은 시간을 업데이트 한다. 

	pclCM->CR[id]->SetLastReceveFromClientClock(CurrentClock);

	WRITE_MEMLOG( WRITELOG_GAMEMSG, pclMsg->clHead.usCmd, 0, 0 );

	if(pclMsg->clHead.usCmd >= 0 && pclMsg->clHead.usCmd < GAMEMSG_END)
	{
		// 메시지 사용제한이 걸려있는지 체크한다.
		if( m_pbUseMsg[pclMsg->clHead.usCmd] == false )
		{
			if( pclCM->IsValidID(id) )
			{
				SendServerResponseMsg( 0, SRVAL_GAMEMASTER_BLOCK_PACKET, 0, 0, pclCM->GetCharServer(id)->GetCharUnique() );
			}
		}
		else
		{
			(this->*(this->m_pServerMsgPtr[pclMsg->clHead.usCmd].ServerMsgFunc))(pclMsg, id);
		}
	}
	else
	{
		ServerMsgNullFunc(pclMsg, id);
	}

	return TRUE;

}


void cltServer::ServerMsgNullFunc(cltMsg* pclMsg, SI32 id)
{
	TCHAR buffer[256];
	SI32 personid = 0;
	if(pclCM->CR[id])
	{
		personid = pclCM->CR[id]->pclCI->GetPersonID();
	}

	StringCchPrintf(buffer, 256, TEXT("NotDefinedMsg:%d, size:%d user:%d"), pclMsg->clHead.usCmd, pclMsg->clHead.usSize, personid);

	pclLog->FilePrint( TEXT("Config\\ErrorLog.log"), buffer);
}
