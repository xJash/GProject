//---------------------------------
// 2003/7/31 김태곤
//---------------------------------

#include "../Common/CommonHeader.h"
#include <CommonLogic.h>
#include "DevTool/DevServerInfo/DevServerInfo.h"

#include "../Server/Server.h"

#include "../Common/Map/Map.h"

//-----------------------------------------
// Server
//-----------------------------------------
#include "../../Server/AuthServer/AuthMsg.h"
#include "../Server/Statistics/Statistics.h"

#include "../../DBManager/GameDBManager_World/DBMsg-Structure.h"
#include "../../DBManager/GameDBManager_World/DBMsg-System.h"
#include "../../DBManager/GameDBManager_World/DBMsg-Market.h"
#include "../../DBManager/GameDBManager_World/DBMsg-House.h"
#include "../../DBManager/GameDBManager_World/DBMsg-Stock.h"
#include "../../DBManager/GameDBManager_World/DBMsg-Cityhall.h"
#include "../../DBManager/GameDBManager_World/DBMsg-HorseMarket.h"
#include "../../DBManager/GameDBManager_World/DBMsg-RealEstateMarket.h"
#include "../../DBManager/GameDBManager_World/DBMsg-SummonMarket.h"
#include "../../DBManager/GameDBManager_World/DBMsg-ForeignMerchantNPC.h"
#include "../../DBManager/GameDBManager_World/DBMsg-Land.h"
#include "../../DBManager/GameDBManager_World/DBMsg-SummonHeroMarket.h"
#include "../../DBManager/GameDBManager_World/DBMsg-Mine.h"
#include "../../DBManager/GameDBManager_World/DBGameLogMsg.h"
#include "../../DBManager/GameDBManager_World/DBMsg-WorldMoney.h"
#include "../../DBManager/GameDBManager_World/DBMsg-Guild.h"
#include "../../DBManager/GameDBManager_World/DBMsg-MofuMofuEvent.h"
#include "../../DBManager/GameDBManager_World/DBMsg-Empire.h"
#include "../../DBManager/GameDBManager_World/DBMsg-Hunt.h"
#include "../../DBManager/GameDBManager_World/DBMsg-feast.h"

#include "../../DBManager/GameDBManager_World/DBMsg-Person.h"



#include "Minister/MinisterMgr.h"

#define DBMessageMap(AAA,BBB) m_pDBMsgPtr[AAA].DBMsgFunc = &cltServer::BBB

void cltServer::RegisterDBMsgMap()
{
	m_pDBMsgPtr = new stDBMsgPtr[DBMSG_END];
	if(m_pDBMsgPtr == NULL)
	{
		if (pclClient->GameMode != GAMEMODE_SERVER)
			MessageBox(NULL, TEXT("DB함수포인터 할당 실패"), NULL, MB_OK);
	}
	else
	{
		// 알 수 없는 메시지가 왔을때 처리할 함수를 할당한다.
		for(int i = 0; i < DBMSG_END; i++)
			DBMessageMap(i, DBMsgNullFunc);
		//----------------------------------
		// Person
		//----------------------------------
		DBMessageMap(DBMSG_RESPONSE_SETHORSE, DoMsg_DBMSG_RESPONSE_SETHORSE);
		DBMessageMap(DBMSG_RESPONSE_SETRIDEHORSE, DoMsg_DBMSG_RESPONSE_SETRIDEHORSE);
		DBMessageMap(DBMSG_RESPONSE_SETAUTOFOOD, DoMsg_DBMSG_RESPONSE_SETAUTOFOOD);
		DBMessageMap(DBMSG_RESPONSE_SETCURRENTHORSEPRICE, DoMsg_DBMSG_RESPONSE_SETCURRENTHORSEPRICE);
		DBMessageMap(DBMSG_RESPONSE_GETCURRENTHORSEPRICE, DoMsg_DBMSG_RESPONSE_GETCURRENTHORSEPRICE);
		//DBMessageMap(DBMSG_RESPONSE_SETSCHOOL, 
		DBMessageMap(DBMSG_RESPONSE_GETCHILDLIST, DoMsg_DBMSG_RESPONSE_GETCHILDLIST);
		DBMessageMap(DBMSG_RESPONSE_INITSTATUS, DoMsg_DBMSG_RESPONSE_INITSTATUS);
		DBMessageMap(DBMSG_RESPONSE_CHANGEEXP, DoMsg_DBMSG_RESPONSE_CHANGEEXP);
		DBMessageMap(DBMSG_RESPONSE_CHANGEFAMEEXP, DoMsg_DBMSG_RESPONSE_CHANGEFAMEEXP);
		DBMessageMap(DBMSG_RESPONSE_SETFATHER, DoMsg_DBMSG_RESPONSE_SETFATHER);
		DBMessageMap(DBMSG_RESPONSE_PERSONSIMPLEINFO, DoMsg_DBMSG_RESPONSE_PERSONSIMPLEINFO);
		DBMessageMap(DBMSG_RESPONSE_INCREASECHILDNUMBER, DoMsg_DBMSG_RESPONSE_INCREASECHILDNUMBER);
		DBMessageMap(DBMSG_RESPONSE_CHANGEMONEY, DoMsg_DBMSG_RESPONSE_CHANGEMONEY);
		DBMessageMap(DBMSG_RESPONSE_MOVEMONEY, DoMsg_DBMSG_RESPONSE_MOVEMONEY);
		DBMessageMap(DBMSG_RESPONSE_CHANGENAME, DoMsg_DBMSG_RESPONSE_CHANGENAME);
		DBMessageMap(DBMSG_RESPONSE_CHANGE_CHARKIND, DoMsg_DBMSG_RESPONSE_CHANGE_CHARKIND);
		DBMessageMap(DBMSG_RESPONSE_SETQUESTINFO, DoMsg_DBMSG_RESPONSE_SETQUESTINFO);
		DBMessageMap(DBMSG_RESPONSE_SETSPECIALQUESTINFO, DoMsg_DBMSG_RESPONSE_SETSPECIALQUESTINFO);
		DBMessageMap(DBMSG_RESPONSE_SETPERSONNAMINGINFO, DoMsg_DBMSG_RESPONSE_SETPERSONNAMINGINFO);
		DBMessageMap(DBMSG_RESPONSE_SETPERSONCURRENTNAMING, DoMsg_DBMSG_RESPONSE_SETPERSONCURRENTNAMING);

		DBMessageMap(DBMSG_RESPONSE_SETPOSLIFEMANA, DoMsg_DBMSG_RESPONSE_SETPOSLIFEMANA);
		DBMessageMap(DBMSG_RESPONSE_SETHEALTH, DoMsg_DBMSG_RESPONSE_SETHEALTH);
		DBMessageMap(DBMSG_RESPONSE_USERID, DoMsg_DBMSG_RESPONSE_USERID);
		DBMessageMap(DBMSG_RESPONSE_RECOMMENDPERSON, DoMsg_DBMSG_RESPONSE_RECOMMENDPERSON);
		DBMessageMap(DBMSG_RESPONSE_HORSENAMECHANGE, DoMsg_DBMSG_RESPONSE_HORSENAMECHANGE);
		DBMessageMap(DBMSG_RESPONSE_PERSONTOTALINFOSET, DoMsg_DBMSG_RESPONSE_PERSONTOTALINFOSET);
		DBMessageMap(DBMSG_RESPONSE_PERSONLISTINFOGET, DoMsg_DBMSG_RESPONSE_PERSONLISTINFOGET);
		DBMessageMap(DBMSG_RESPONSE_PERSONTOTALINFOCREATE, DoMsg_DBMSG_RESPONSE_PERSONTOTALINFOCREATE);
		DBMessageMap(DBMSG_RESPONSE_PERSONTOTALINFOGETBYIDNUM, DoMsg_DBMSG_RESPONSE_PERSONTOTALINFOGETBYIDNUM);
		DBMessageMap(DBMSG_RESPONSE_PERSONTOTALINFODELETE, DoMsg_DBMSG_RESPONSE_PERSONTOTALINFODELETE);
		DBMessageMap(DBMSG_RESPONSE_PERSONTOTALINFOPREDELETE, DoMsg_DBMSG_RESPONSE_PERSONTOTALINFOPREDELETE);//케릭터 삭제 대기 요청
		DBMessageMap(DBMSG_RESPONSE_SETLEVELINFO, DoMsg_DBMSG_RESPONSE_SETLEVELINFO);
		//DBMessageMap(DBMSG_RESPONSE_SETBONUSINFO, 	
		DBMessageMap(DBMSG_RESPONSE_INPUTMONEYTOBANK, DoMsg_DBMSG_RESPONSE_INPUTMONEYTOBANK);
		DBMessageMap(DBMSG_RESPONSE_OUTPUTMONEYFROMBANK, DoMsg_DBMSG_RESPONSE_OUTPUTMONEYFROMBANK);
		DBMessageMap(DBMSG_RESPONSE_SETBANKFEE, DoMsg_DBMSG_RESPONSE_SETBANKFEE);

		//cyj 사용자의 아이템 정보 받아오는 함수
		DBMessageMap(DBMSG_RESPONSE_PERSONITEMINFOGET, DoMsg_DBMSG_RESPONSE_PERSONITEMINFOGET);
		DBMessageMap(DBMSG_RESPONSE_ITEMMAKERNAME, DoMsg_DBMSG_RESPONSE_ITEMMAKERNAME);

		DBMessageMap(DBMSG_RESPONSE_GETRECOMMENDPOINT, DoMsg_DBMSG_RESPONSE_GETRECOMMANDPOINT);
		DBMessageMap(DBMSG_RESPONSE_CHANGERECOMMENDPOINT, DOMSG_DBMSG_RESPONSE_CHANGERECOMMENDPOINT);
		DBMessageMap(DBMSG_RESPONSE_BUYRECOMMENDPRODUCT, DoMsg_DBMSG_RESPONSE_BUYRECOMMANDPRODUCT);
		DBMessageMap(DBMSG_RESPONSE_RECOMMENDPOINT_LIST, DoMsg_DBMSG_RESPONSE_RECOMMANDPOINTLIST);

		DBMessageMap(DBMSG_RESPONSE_VILLAGEBANKRUPTCY, DoMsg_DBMSG_RESPONSE_VILLAGEBANKRUPTCY);

		DBMessageMap(DBMSG_RESPONSE_SETMARKETFEE, DoMsg_DBMSG_RESPONSE_SETMARKETFEE);
		DBMessageMap(DBMSG_RESPONSE_SETSTOCKFEE, DoMsg_DBMSG_RESPONSE_SETSTOCKFEE);

		DBMessageMap(DBMSG_RESPONSE_REPAIRSTRUCTURE, DoMsg_DBMSG_RESPONSE_REPAIRSTRUCTURE);
		DBMessageMap(DBMSG_RESPONSE_SETSTRREPAIRITEM, DoMsg_DBMSG_RESPONSE_SETSTRREPAIRITEM);
		DBMessageMap(DBMSG_RESPONSE_SETSTRDURA, DoMsg_DBMSG_RESPONSE_SETSTRDURA);
		DBMessageMap(DBMSG_RESPONSE_CHANGESTRDURA, DoMsg_DBMSG_RESPONSE_CHANGESTRDURA);
		DBMessageMap(DBMSG_RESPONSE_CHANGESTRMONEY, DoMsg_DBMSG_RESPONSE_CHANGESTRMONEY);
		DBMessageMap(DBMSG_RESPONSE_SETVILLAGEMARK, DoMsg_DBMSG_RESPONSE_SETVILLAGEMARK);
		DBMessageMap(DBMSG_RESPONSE_SETVILLAGEMAP, DoMsg_DBMSG_RESPONSE_SETVILLAGEMAP);
		DBMessageMap(DBMSG_RESPONSE_SETINSTANCEPROFIT_VILLAGE,DoMsg_DBMSG_RESPONSE_SETINSTANCEPROFIT_VILLAGE);
		DBMessageMap(DBMSG_RESPONSE_CHANGE_INSTANCEPROFIT,DoMsg_DBMSG_RESPONSE_CHANGE_INSTANCEPROFIT);
		DBMessageMap(DBMSG_RESPONSE_CHANGESTRBASEMONEY, DoMsg_DBMSG_RESPONSE_CHANGESTRBASEMONEY);
		DBMessageMap(DBMSG_RESPONSE_SETSTRREPAIRAMOUNT, DoMsg_DBMSG_RESPONSE_SETSTRREPAIRAMOUNT);

		DBMessageMap(DBMSG_RESPONSE_SETSTRINFO, DoMsg_DBMSG_RESPONSE_SETSTRINFO);
		DBMessageMap(DBMSG_RESPONSE_GETSTRINFO, DoMsg_DBMSG_RESPONSE_GETSTRINFO);
		DBMessageMap(DBMSG_RESPONSE_GETMANYSTOCKORDER, DoMsg_DBMSG_RESPONSE_GETMANYSTOCKORDER);
		DBMessageMap(DBMSG_RESPONSE_TRADESTOCK, DoMsg_DBMSG_RESPONSE_TRADESTOCK);
		DBMessageMap(DBMSG_RESPONSE_ORDERSTOCK, DoMsg_DBMSG_RESPONSE_ORDERSTOCK);
		DBMessageMap(DBMSG_RESPONSE_PERSONSTOCKACCOUNTGET, DoMsg_DBMSG_RESPONSE_PERSONSTOCKACCOUNTGET);
		DBMessageMap(DBMSG_RESPONSE_CANCELSTOCKORDER, DoMsg_DBMSG_RESPONSE_CANCELSTOCKORDER);
		DBMessageMap(DBMSG_RESPONSE_CHIEFINFO, DoMsg_DBMSG_RESPONSE_CHIEFINFO);
		DBMessageMap(DBMSG_RESPONSE_SETSUMMON, DoMsg_DBMSG_RESPONSE_SETSUMMON);
		DBMessageMap(DBMSG_RESPONSE_SUMMONREVIVE, DoMsg_DBMSG_RESPONSE_SUMMONREVIVE);
		DBMessageMap(DBMSG_RESPONSE_SUMMONEVOLVE, DoMsg_DBMSG_RESPONSE_SUMMONEVOLVE);
		DBMessageMap(DBMSG_RESPONSE_SUMMONSCROLL, DoMsg_DBMSG_RESPONSE_SUMMONSCROLL);
		DBMessageMap(DBMSG_RESPONSE_SUMMON_STATUSINIT, DoMsg_DBMSG_RESPONSE_SUMMON_STATUSINIT);
		DBMessageMap(DBMSG_RESPONSE_SUMMON_SETAUTOHEAL,DoMsg_DBMSG_RESPONSE_SUMMON_SETAUTOHEAL);
		DBMessageMap(DBMSG_RESPONSE_PRIZE_GAMEEVENT,DoMsg_DBMSG_RESPONSE_PRIZE_GAMEEVENT);
		//		DBMessageMap(DBMSG_RESPONSE_GETLIMITUSEITEM,DoMsg_DBMSG_RESPONSE_GETLIMITUSEITEM);
		DBMessageMap(DBMSG_RESPONSE_SUMMONTRADE,DoMsg_DBMSG_RESPONSE_SUMMONTRADE);
		DBMessageMap(DBMSG_RESPONSE_SETPREMIUM,DoMsg_DBMSG_RESPONSE_SETPREMIUM);
		DBMessageMap(DBMSG_RESPONSE_COUNTATTACK_INFO,DoMsg_DBMSG_RESPONSE_COUNTATTACK_INFO);
		DBMessageMap(DBMSG_RESPONSE_SETGREETING,DoMsg_DBMSG_RESPONSE_SETGREETING);
		DBMessageMap(DBMSG_RESPONSE_EXCHANGEITEM, DoMsg_DBMSG_RESPONSE_EXCHANGEITEM);
		DBMessageMap(DBMSG_RESPONSE_OPENTREASUREBOX, DoMsg_DBMSG_RESPONSE_OPENTREASUREBOX);

		//---------------------------------------
		// 증자 관련 
		//---------------------------------------
		DBMessageMap(DBMSG_RESPONSE_GETSTOCKBIDVILLAGELIST, DoMsg_DBMSG_RESPONSE_GETSTOCKBIDVILLAGELIST);
		DBMessageMap(DBMSG_RESPONSE_SETSTOCKBIDVILLAGE, DoMsg_DBMSG_RESPONSE_SETSTOCKBIDVILLAGE);
		DBMessageMap(DBMSG_RESPONSE_BIDSTOCK, DoMsg_DBMSG_RESPONSE_BIDSTOCK);
		DBMessageMap(DBMSG_RESPONSE_GETSTOCKBIDDERLIST, DoMsg_DBMSG_RESPONSE_GETSTOCKBIDDERLIST);

		DBMessageMap(DBMSG_RESPONSE_COMPLETESTOCKBIDVILLAGE, DoMsg_DBMSG_RESPONSE_COMPLETESTOCKBIDVILLAGE);
		DBMessageMap(DBMSG_RESPONSE_STOCKDISTRIBUTIONORDER, DoMsg_DBMSG_RESPONSE_STOCKDISTRIBUTIONORDER);
		DBMessageMap(DBMSG_RESPONSE_MAXSTOCKDISTRIBUTIONNUM, DoMsg_DBMSG_RESPONSE_MAXSTOCKDISTRIBUTIONNUM);

		DBMessageMap(DBMSG_RESPONSE_BUYBIDSTOCK, DoMsg_DBMSG_RESPONSE_BUYBIDSTOCK);
		DBMessageMap(DBMSG_RESPONSE_MYSTOCKINFO, DoMsg_DBMSG_RESPONSE_MYSTOCKINFO);

		//---------------------------------
		// 객주 관련 
		//----------------------------------
		DBMessageMap(DBMSG_RESPONSE_ORDERMARKET, DoMsg_DBMSG_RESPONSE_ORDERMARKET);
		DBMessageMap(DBMSG_RESPONSE_REDUCEORDERPRICE, DoMsg_DBMSG_RESPONSE_REDUCEORDERPRICE);
		//---------------------------------
		// 역참 관련 
		//----------------------------------

		DBMessageMap(DBMSG_RESPONSE_POSTOFFICE_MASTERSENDITEM, 	DoMsg_DBMSG_RESPONSE_POSTOFFICE_MASTERSENDITEM);
		DBMessageMap(DBMSG_RESPONSE_POSTOFFICE_SENDITEM, DoMsg_DBMSG_RESPONSE_POSTOFFICE_SENDITEM);
		DBMessageMap(DBMSG_RESPONSE_POSTOFFICE_SENDMONEY, DoMsg_DBMSG_RESPONSE_POSTOFFICE_SENDMONEY);
		DBMessageMap(DBMSG_RESPONSE_POSTOFFICE_SENDMSG, DoMsg_DBMSG_RESPONSE_POSTOFFICE_SENDMSG);
		DBMessageMap(DBMSG_RESPONSE_POSTOFFICE_RECVITEMLIST, DoMsg_DBMSG_RESPONSE_POSTOFFICE_RECVITEMLIST);
		DBMessageMap(DBMSG_RESPONSE_POSTOFFICE_RECVMONEYLIST, DoMsg_DBMSG_RESPONSE_POSTOFFICE_RECVMONEYLIST);
		DBMessageMap(DBMSG_RESPONSE_POSTOFFICE_RECVMSGLIST, DoMsg_DBMSG_RESPONSE_POSTOFFICE_RECVMSGLIST);
		DBMessageMap(DBMSG_RESPONSE_POSTOFFICE_GETITEM, DoMsg_DBMSG_RESPONSE_POSTOFFICE_GETITEM);
		DBMessageMap(DBMSG_RESPONSE_POSTOFFICE_GETMONEY, DoMsg_DBMSG_RESPONSE_POSTOFFICE_GETMONEY);
		DBMessageMap(DBMSG_RESPONSE_POSTOFFICE_DELMSG, DoMsg_DBMSG_RESPONSE_POSTOFFICE_DELMSG);
		DBMessageMap(DBMSG_RESPONSE_POSTOFFICE_SETFEE, DoMsg_DBMSG_RESPONSE_POSTOFFICE_SETFEE);
		DBMessageMap(DBMSG_RESPONSE_POSTOFFICE_GETRECORD, DoMsg_DBMSG_RESPONSE_POSTOFFICE_GETRECORD);

		//[진성] 유저이름으로 DB에서 존재여부와 personID 얻기 => 2008-8-4
		DBMessageMap(DBMSG_RESPONSE_CHAR_NAME_CHECK,		DoMsg_DBMSG_RESPONSE_CHAR_NAME_CHECK);
		
		DBMessageMap(DBMSG_RESPONSE_FRIEND_INFO,			DoMsg_DBMSG_RESPONSE_FRIEND_INFO);
		DBMessageMap(DBMSG_RESPONSE_GUILD_INFO,				DoMsg_DBMSG_RESPONSE_GUILD_INFO);
		DBMessageMap(DBMSG_RESPONSE_VILLAGE_RESIDENT_INFO,	DoMsg_DBMSG_RESPONSE_VILLAGE_RESIDENT_INFO);
				
		//---------------------------------
		// 서버에 저장된 아이템 
		//----------------------------------
		DBMessageMap(DBMSG_RESPONSE_GET_SAVEUSERITEM,	  DoMsg_DBMSG_RESPONSE_GET_SAVEUSERITEM);
		DBMessageMap(DBMSG_RESPONSE_GET_SAVEUSERITEMLIST, DoMsg_DBMSG_RESPONSE_GET_SAVEUSERITEMLIST);
		//KHY - 1127 - 클라라 물품 보관 개선 
		DBMessageMap(DBMSG_RESPONSE_GET_SAVEUSERHORSE,	  DoMsg_DBMSG_RESPONSE_GET_SAVEUSERHORSE);
		//---------------------------------
		// 사복시 관련 
		//----------------------------------

		DBMessageMap(DBMSG_RESPONSE_HORSEMARKET_GETMANYORDER, DoMsg_DBMSG_RESPONSE_HORSEMARKET_GETMANYORDER);
		DBMessageMap(DBMSG_RESPONSE_HORSEMARKET_ORDERSELL, DoMsg_DBMSG_RESPONSE_HORSEMARKET_ORDERSELL);
		DBMessageMap(DBMSG_RESPONSE_HORSEMARKET_BUYHORSE, DoMsg_DBMSG_RESPONSE_HORSEMARKET_BUYHORSE);
		DBMessageMap(DBMSG_RESPONSE_HORSEMARKET_MYACCOUNT, DoMsg_DBMSG_RESPONSE_HORSEMARKET_MYACCOUNT);
		DBMessageMap(DBMSG_RESPONSE_HORSEMARKET_OUTHORSE, DoMsg_DBMSG_RESPONSE_HORSEMARKET_OUTHORSE);
		DBMessageMap(DBMSG_RESPONSE_HORSEMARKET_SETFEE, DoMsg_DBMSG_RESPONSE_HORSEMARKET_SETFEE);
		DBMessageMap(DBMSG_RESPONSE_REDUCEHORSEORDERPRICE, DoMsg_DBMSG_RESPONSE_REDUCEHORSEORDERPRICE);
		//---------------------------------
		// 거간 관련 
		//----------------------------------

		DBMessageMap(DBMSG_RESPONSE_REALESTATEMARKET_GETMANYORDER, DoMsg_DBMSG_RESPONSE_REALESTATEMARKET_GETMANYORDER);
		DBMessageMap(DBMSG_RESPONSE_REALESTATEMARKET_ORDERSELL, DoMsg_DBMSG_RESPONSE_REALESTATEMARKET_ORDERSELL);
		DBMessageMap(DBMSG_RESPONSE_REALESTATEMARKET_BUY, DoMsg_DBMSG_RESPONSE_REALESTATEMARKET_BUY);
		DBMessageMap(DBMSG_RESPONSE_REALESTATEMARKET_MYORDER, DoMsg_DBMSG_RESPONSE_REALESTATEMARKET_MYORDER);
		DBMessageMap(DBMSG_RESPONSE_REALESTATEMARKET_CANCELORDER, DoMsg_DBMSG_RESPONSE_REALESTATEMARKET_CANCELORDER);
		DBMessageMap(DBMSG_RESPONSE_REALESTATEMARKET_DELORDER, DoMsg_DBMSG_RESPONSE_REALESTATEMARKET_DELORDER);
		DBMessageMap(DBMSG_RESPONSE_REALESTATEMARKET_SETFEE, DoMsg_DBMSG_RESPONSE_REALESTATEMARKET_SETFEE);
		DBMessageMap(DBMSG_RESPONSE_REDUCEREALESTATEORDERPRICE, DoMsg_DBMSG_RESPONSE_REDUCEREALESTATEORDERPRICE);

		//---------------------------------
		// 소환수거래소 관련 
		//----------------------------------

		DBMessageMap(DBMSG_RESPONSE_SUMMONMARKET_GETMANYORDER, DoMsg_DBMSG_RESPONSE_SUMMONMARKET_GETMANYORDER);
		DBMessageMap(DBMSG_RESPONSE_SUMMONMARKET_ORDERSELL, DoMsg_DBMSG_RESPONSE_SUMMONMARKET_ORDERSELL);
		DBMessageMap(DBMSG_RESPONSE_SUMMONMARKET_BUY, DoMsg_DBMSG_RESPONSE_SUMMONMARKET_BUY);
		DBMessageMap(DBMSG_RESPONSE_SUMMONMARKET_MYORDER, DoMsg_DBMSG_RESPONSE_SUMMONMARKET_MYORDER);
		DBMessageMap(DBMSG_RESPONSE_SUMMONMARKET_CANCELORDER, DoMsg_DBMSG_RESPONSE_SUMMONMARKET_CANCELORDER);
		DBMessageMap(DBMSG_RESPONSE_SUMMONMARKET_SETFEE, DoMsg_DBMSG_RESPONSE_SUMMONMARKET_SETFEE);
		DBMessageMap(DBMSG_RESPONSE_REDUCESUMMONORDERPRICE, DoMsg_DBMSG_RESPONSE_REDUCESUMMONORDERPRICE);

		//---------------------------------
		// 비변사 관련 
		//----------------------------------

		DBMessageMap(DBMSG_RESPONSE_SUMMONHEROMARKET_GETMANYORDER, DoMsg_DBMSG_RESPONSE_SUMMONHEROMARKET_GETMANYORDER);
		DBMessageMap(DBMSG_RESPONSE_SUMMONHEROMARKET_ORDERSELL, DoMsg_DBMSG_RESPONSE_SUMMONHEROMARKET_ORDERSELL);
		DBMessageMap(DBMSG_RESPONSE_SUMMONHEROMARKET_BUY, DoMsg_DBMSG_RESPONSE_SUMMONHEROMARKET_BUY);
		DBMessageMap(DBMSG_RESPONSE_SUMMONHEROMARKET_MYORDER, DoMsg_DBMSG_RESPONSE_SUMMONHEROMARKET_MYORDER);
		DBMessageMap(DBMSG_RESPONSE_SUMMONHEROMARKET_CANCELORDER, DoMsg_DBMSG_RESPONSE_SUMMONHEROMARKET_CANCELORDER);
		DBMessageMap(DBMSG_RESPONSE_SUMMONHEROMARKET_SETFEE, DoMsg_DBMSG_RESPONSE_SUMMONHEROMARKET_SETFEE);
		DBMessageMap(DBMSG_RESPONSE_REDUCESUMMONHEROORDERPRICE, DoMsg_DBMSG_RESPONSE_REDUCESUMMONHEROORDERPRICE);

		//----------------------------------
		// 농장 관련
		//----------------------------------
		DBMessageMap(DBMSG_RESPONSE_MANYLANDUNIT, DoMsg_DBMSG_RESPONSE_MANYLANDUNIT);
		DBMessageMap(DBMSG_RESPONSE_LAND_CHANGECONTRACT, DoMsg_DBMSG_RESPONSE_LAND_CHANGECONTRACT);
		DBMessageMap(DBMSG_RESPONSE_LAND_RENTAPPLY, DoMsg_DBMSG_RESPONSE_LAND_RENTAPPLY);
		DBMessageMap(DBMSG_RESPONSE_LAND_CANCELRENTAPPLY, DoMsg_DBMSG_RESPONSE_LAND_CANCELRENTAPPLY);
		DBMessageMap(DBMSG_RESPONSE_LAND_APPLYERLIST, DoMsg_DBMSG_RESPONSE_LAND_APPLYERLIST);
		DBMessageMap(DBMSG_RESPONSE_LAND_DELAPPLYER, DoMsg_DBMSG_RESPONSE_LAND_DELAPPLYER);
		DBMessageMap(DBMSG_RESPONSE_LAND_RENT, DoMsg_DBMSG_RESPONSE_LAND_RENT);
		DBMessageMap(DBMSG_RESPONSE_LAND_PAYRENTFEE, DoMsg_DBMSG_RESPONSE_LAND_PAYRENTFEE);
		DBMessageMap(DBMSG_RESPONSE_LAND_RECALL, DoMsg_DBMSG_RESPONSE_LAND_RECALL);


		//----------------------------------
		// 광산 관련
		//----------------------------------
		DBMessageMap(DBMSG_RESPONSE_MANYMINEUNIT, DoMsg_DBMSG_RESPONSE_MANYMINEUNIT);
		DBMessageMap(DBMSG_RESPONSE_MINE_CHANGECONTRACT, DoMsg_DBMSG_RESPONSE_MINE_CHANGECONTRACT);
		DBMessageMap(DBMSG_RESPONSE_MINE_RENTAPPLY, DoMsg_DBMSG_RESPONSE_MINE_RENTAPPLY);
		DBMessageMap(DBMSG_RESPONSE_MINE_CANCELRENTAPPLY, DoMsg_DBMSG_RESPONSE_MINE_CANCELRENTAPPLY);
		DBMessageMap(DBMSG_RESPONSE_MINE_APPLYERLIST, DoMsg_DBMSG_RESPONSE_MINE_APPLYERLIST);
		DBMessageMap(DBMSG_RESPONSE_MINE_DELAPPLYER, DoMsg_DBMSG_RESPONSE_MINE_DELAPPLYER);
		DBMessageMap(DBMSG_RESPONSE_MINE_RENT, DoMsg_DBMSG_RESPONSE_MINE_RENT);
		DBMessageMap(DBMSG_RESPONSE_MINE_PAYRENTFEE, DoMsg_DBMSG_RESPONSE_MINE_PAYRENTFEE);
		DBMessageMap(DBMSG_RESPONSE_MINE_RECALL, DoMsg_DBMSG_RESPONSE_MINE_RECALL);


		//----------------------------------
		// 내자시 관련
		//----------------------------------
		DBMessageMap(DBMSG_RESPONSE_FEAST_RESERVE, DoMsg_DBMSG_RESPONSE_FEAST_RESERVE);
		DBMessageMap(DBMSG_RESPONSE_FEAST_OPEN, DoMsg_DBMSG_RESPONSE_FEAST_OPEN);
		DBMessageMap(DBMSG_RESPONSE_FEAST_CLOSE, DoMsg_DBMSG_RESPONSE_FEAST_CLOSE);
		DBMessageMap(DBMSG_RESPONSE_FEAST_SETCOST, DoMsg_DBMSG_RESPONSE_FEAST_SETCOST);
		DBMessageMap(DBMSG_RESPONSE_FEAST_ADDPRESENTLIST, DoMsg_DBMSG_RESPONSE_FEAST_ADDPRESENTLIST);
		DBMessageMap(DBMSG_RESPONSE_FEAST_DELPRESENTLIST, DoMsg_DBMSG_RESPONSE_FEAST_DELPRESENTLIST);
		DBMessageMap(DBMSG_RESPONSE_FEAST_STGITEMIN, DoMsg_DBMSG_RESPONSE_FEAST_STGITEMIN);
		DBMessageMap(DBMSG_RESPONSE_FEAST_STGITEMOUT, DoMsg_DBMSG_RESPONSE_FEAST_STGITEMOUT);
		DBMessageMap(DBMSG_RESPONSE_FEAST_GIVEITEM, DoMsg_DBMSG_RESPONSE_FEAST_GIVEITEM);
		//#if defined(_LEON_FEAST_EFFECT)
		DBMessageMap(DBMSG_RESPONSE_FEAST_USEEFFECT, DoMsg_DBMSG_RESPONSE_FEAST_USEEFFECT);
		//#endif
		
		//[진성] 파티홀. 
		DBMessageMap(DBMSG_RESPONSE_PARTYHALL_CLOSE,						DoMsg_DBMSG_RESPONSE_PARTYHALL_CLOSE );			// 파티 종료.
		DBMessageMap(DBMSG_RESPONSE_PARTYHALL_ADD_PRESENT,					DoMsg_DBMSG_RESPONSE_PARTYHALL_ADD_PRESENT );	// 파티 선물 등록.
		DBMessageMap(DBMSG_RESPONSE_PARTYHALL_RESERVATION,					DoMsg_DBMSG_RESPONSE_PARTYHALL_RESERVATION );	// 파티장 예약.
		DBMessageMap(DBMSG_RESPONSE_PARTYHALL_ADD_DECORATION,				DoMsg_DBMSG_RESPONSE_PARTYHALL_ADD_DECORATION);	// 장식물 추가.
		DBMessageMap(DBMSG_RESPONSE_PARTYHALL_RESERVELIST,					DoMsg_DBMSG_RESPONSE_PARTYHALL_RESERVELIST);	// 파티홀 예약 정보 리스트.
		DBMessageMap(DBMSG_RESPONSE_PARTYHALL_DECORATION_LIST,				DoMsg_DBMSG_RESPONSE_PARTYHALL_DECORATION_LIST);// 파티홀 장식물 리스트.
		DBMessageMap(DBMSG_RESPONSE_PARTYHALL_GIVEITEM,						DoMsg_DBMSG_RESPONSE_PARTYHALL_GIVEITEM);	
		
		
	

		//----------------------------------
		// 상단 주민 등록 관련
		//----------------------------------
		DBMessageMap(DBMSG_RESPONSE_APPLYRESIDENT,							DoMsg_DBMSG_RESPONSE_APPLYRESIDENT);			// 주민등록 신청 응답
		DBMessageMap(DBMSG_RESPONSE_GETRESIDENTAPPLYERLIST,					DoMsg_DBMSG_RESPONSE_GETRESIDENTAPPLYERLIST);	// 주민등록 신청자 리스트 응답
		DBMessageMap(DBMSG_RESPONSE_GETRESIDENTLIST,						DoMsg_DBMSG_RESPONSE_GETRESIDENTLIST);			// 주민 리스트 응답
		DBMessageMap(DBMSG_RESPONSE_BERESIDENT,								DoMsg_DBMSG_RESPONSE_BERESIDENT);				// 주민등록 허가 
		DBMessageMap(DBMSG_RESPONSE_CANCELRESIDENT,							DoMsg_DBMSG_RESPONSE_CANCELRESIDENT);			// 주민신청 취소 및 주민등록 해지 
		DBMessageMap(DBMSG_RESPONSE_GETRESIDENTINFO,						DoMsg_DBMSG_RESPONSE_GETRESIDENTINFO);
		DBMessageMap(DBMSG_RESPONSE_RESIDENTSHARE,							DoMsg_DBMSG_RESPONSE_RESIDENTSHARE);
		//DBMessageMap(DBMSG_RESPONSE_SETRESIDENTSCORE, 	
		DBMessageMap(DBMSG_RESPONSE_MANYRESIDENTOUT,						DoMsg_DBMSG_RESPONSE_MANYRESIDENTOUT);
		DBMessageMap(DBMSG_RESPONSE_BUILDSTRUCTURE,							DoMsg_DBMSG_RESPONSE_BUILDSTRUCTURE);
		DBMessageMap(DBMSG_RESPONSE_DESTROYSTRUCTURE,						DoMsg_DBMSG_RESPONSE_DESTROYSTRUCTURE);

		//----------------------------------
		// 주주총회 관련
		//----------------------------------
		DBMessageMap(DBMSG_RESPONSE_GENERALMEETING_INFO,					DoMsg_DBMSG_RESPONSE_GENERALMEETING_INFO);
		DBMessageMap(DBMSG_RESPONSE_GENERALMEETING_SUGGEST_CHIEF,			DoMsg_DBMSG_RESPONSE_GENERALMEETING_SUGGEST_CHIEF);
		DBMessageMap(DBMSG_RESPONSE_GENERALMEETING_VOTE,					DoMsg_DBMSG_RESPONSE_GENERALMEETING_VOTE);
		DBMessageMap(DBMSG_RESPONSE_GENERALMEETING_ACCEPTCANDIDATE,			DoMsg_DBMSG_RESPONSE_GENERALMEETING_ACCEPTCANDIDATE);
		DBMessageMap(DBMSG_RESPONSE_GENERALMEETING_CLOSE_CHIEF,				DoMsg_DBMSG_RESPONSE_GENERALMEETING_CLOSE_CHIEF);

		DBMessageMap(DBMSG_RESPONSE_GENERALMEETING_SETVOTERSTATE,			DoMsg_DBMSG_RESPONSE_GENERALMEETING_SETVOTERSTATE);

		DBMessageMap(DBMSG_RESPONSE_GETWARRANKINFO,							DoMsg_DBMSG_RESPONSE_GETWARRANKINFO);
		DBMessageMap(DBMSG_RESPONSE_SETWARRANKINFO,							DoMsg_DBMSG_RESPONSE_SETWARRANKINFO);

		DBMessageMap(DBMSG_RESPONSE_GETSTOCKOFFERINGINFO,					DoMsg_DBMSG_RESPONSE_GETSTOCKOFFERINGINFO);
		DBMessageMap(DBMSG_RESPONSE_SETSTOCKOFFERING,						DoMsg_DBMSG_RESPONSE_SETSTOCKOFFERING);
		DBMessageMap(DBMSG_RESPONSE_ENDSTOCKOFFERING,						DoMsg_DBMSG_RESPONSE_ENDSTOCKOFFERING);
		DBMessageMap(DBMSG_RESPONSE_STOCKOFFERINGORDER,						DoMsg_DBMSG_RESPONSE_STOCKOFFERINGORDER);
		DBMessageMap(DBMSG_RESPONSE_GETSTOCKOFFERINGORDERLIST,				DoMsg_DBMSG_RESPONSE_GETSTOCKOFFERINGORDERLIST);
		DBMessageMap(DBMSG_RESPONSE_EXECUTESTOCKOFFERINGORDER,				DoMsg_DBMSG_RESPONSE_EXECUTESTOCKOFFERINGORDER);
		DBMessageMap(DBMSG_RESPONSE_RESETSTOCKOFFERINGORDERLIST,			DoMsg_DBMSG_RESPONSE_RESETSTOCKOFFERINGORDERLIST);

		DBMessageMap(DBMSG_RESPONSE_EXCHANGEFROMSTOCK,						DoMsg_DBMSG_RESPONSE_EXCHANGESTOCK);

		DBMessageMap(DBMSG_RESPONSE_GENERALMEETING_SUGGEST_ON_OFF,			DoMsg_DBMSG_RESPONSE_GENERALMEETING_SUGGEST_ON_OFF); //[추가 : 황진성 2008. 2. 21 => 주주총회 발동 설정 마을 관련 처리함수 DB->S ]
		// [영훈] 주식을 주라는 요청에 대한 응답
		DBMessageMap(DBMSG_RESPONSE_GIVESTOCK,								DoMsg_DBMSG_RESPONSE_GIVESTOCK);
		
		DBMessageMap(DBMSG_RESPONSE_GENERALMEETING_SUGGEST_ON_OFF_LIST,		DoMsg_DBMSG_RESPONSE_GENERALMEETING_SUGGEST_ON_OFF_LIST); //[추가 : 황진성 2008. 4. 11 => 주주총회 발동 설정   DB->S ]
		

		//----------------------------------
		// 상단 파산 관련
		//----------------------------------
		//#if defined(_CITYHALL_BANKRUPTCY)
		DBMessageMap(DBMSG_RESPONSE_CITYHALL_STATE_CHANGED,					DoMsg_DBMSG_RESPONSE_CITYHALL_STATE_CHANGED);	//상단 상태(파산기, 초기화기, 안정기, 정상기)가 변경되었다.

		DBMessageMap(DBMSG_RESPONSE_NOTIFY_CITYHALL_BANKRUPTCY,				DoMsg_DBMSG_RESPONSE_NOTIFY_CITYHALL_BANKRUPTCY);	// 마을 파산시 특정 주주에게 letter로 알림 처리

		DBMessageMap(DBMSG_RESPONSE_RETURNSTOCKBIDVILLAGE,					DoMsg_DBMSG_RESPONSE_RETURNSTOCKBIDVILLAGE);	// 주식 입찰 돌려줌
		// 파산 후 마을 여러 정보 초기화는 서버 점검시 수작업으로 한다.
		//DBMessageMap(DBMSG_RESPONSE_VILLAGE_INITIALIZATION, DoMsg_DBMSG_RESPONSE_VILLAGE_INITIALIZATION);	//마을이 파산하여 초기화 한다.
		//#endif

		//----------------------------------
		// Item 관련 
		//----------------------------------
		// 인벤에서 아이템을 생산하라는 요청에 응답. 
		DBMessageMap(DBMSG_RESPONSE_MAKEITEMINV,							DoMsg_DBMSG_RESPONSE_MAKEITEMINV);
		DBMessageMap(DBMSG_RESPONSE_ENCHANTITEMINV,							DoMsg_DBMSG_RESPONSE_ENCHANTITEMINV);
		DBMessageMap(DBMSG_RESPONSE_INPUTITEMTOPERSON,						DoMsg_DBMSG_RESPONSE_INPUTITEMTOPERSON);
		DBMessageMap(DBMSG_RESPONSE_OUTPUTITEMFROMPERSON,					DoMsg_DBMSG_RESPONSE_OUTPUTITEMFROMPERSON);
		DBMessageMap(DBMSG_RESPONSE_MOVEITEM,								DoMsg_DBMSG_RESPONSE_MOVEITEM);
		DBMessageMap(DBMSG_RESPONSE_MOVEITEMPERSON,							DoMsg_DBMSG_RESPONSE_MOVEITEMPERSON);
		DBMessageMap(DBMSG_RESPONSE_USEITEM,								DoMsg_DBMSG_RESPONSE_USEITEM);
		DBMessageMap(DBMSG_RESPONSE_USE_SPACEBOX_ITEM,						DoMsg_DBMSG_RESPONSE_USE_SPACEBOX_ITEM);
		DBMessageMap(DBMSG_RESPONSE_USE_TREASURE_ITEM,						DoMsg_DBMSG_RESPONSE_USE_TREASURE_ITEM);
		DBMessageMap(DBMSG_RESPONSE_SUMMONPUSHITEM,							DoMsg_DBMSG_RESPONSE_SUMMONPUSHITEM);
		DBMessageMap(DBMSG_RESPONSE_SUMMONPOPITEM,							DoMsg_DBMSG_RESPONSE_SUMMONPOPITEM);
		DBMessageMap(DBMSG_RESPONSE_SUMMONITEM_STATUSCHANGE,				DoMsg_DBMSG_RESPONSE_SUMMONITEM_STATUSCHANGE);
		DBMessageMap(DBMSG_RESPONSE_REPAIRITEM,								DoMsg_DBMSG_RESPONSE_REPAIRITEM);

		DBMessageMap(DBMSG_RESPONSE_GETMANYMARKETORDER, DoMsg_DBMSG_RESPONSE_GETMANYMARKETORDER);
		DBMessageMap(DBMSG_RESPONSE_TRADEMARKET, DoMsg_DBMSG_RESPONSE_TRADEMARKET);
		DBMessageMap(DBMSG_RESPONSE_MARKETACCOUNT, DoMsg_DBMSG_RESPONSE_MARKETACCOUNT);
		DBMessageMap(DBMSG_RESPONSE_GETITEMFROMMARKET, DoMsg_DBMSG_RESPONSE_GETITEMFROMMARKET);
		DBMessageMap(DBMSG_RESPONSE_MANYSTOCKPRICE, DoMsg_DBMSG_RESPONSE_MANYSTOCKPRICE);
		DBMessageMap(DBMSG_RESPONSE_MANYITEMPRICE, DoMsg_DBMSG_RESPONSE_MANYITEMPRICE);
		DBMessageMap(DBMSG_RESPONSE_SETITEMPRICE, DoMsg_DBMSG_RESPONSE_SETITEMPRICE);
		DBMessageMap(DBMSG_RESPONSE_INVESTLIST, DoMsg_DBMSG_RESPONSE_INVESTLIST);
		DBMessageMap(DBMSG_RESPONSE_CANDIDATE, DoMsg_DBMSG_RESPONSE_CANDIDATE);
		DBMessageMap(DBMSG_RESPONSE_CANCELCANDIDATE, DoMsg_DBMSG_RESPONSE_CANCELCANDIDATE);
		DBMessageMap(DBMSG_RESPONSE_BERANK, DoMsg_DBMSG_RESPONSE_BERANK);
		DBMessageMap(DBMSG_RESPONSE_RANKINFO, DoMsg_DBMSG_RESPONSE_RANKINFO);
		DBMessageMap(DBMSG_RESPONSE_MANYCANDIDATEINFO, DoMsg_DBMSG_RESPONSE_MANYCANDIDATEINFO);
		DBMessageMap(DBMSG_RESPONSE_DELCANDIDATE, DoMsg_DBMSG_RESPONSE_DELCANDIDATE);
		DBMessageMap(DBMSG_RESPONSE_RESIGN, DoMsg_DBMSG_RESPONSE_RESIGN);
		DBMessageMap(DBMSG_RESPONSE_MANYRANK, DoMsg_DBMSG_RESPONSE_MANYRANK);
		DBMessageMap(DBMSG_RESPONSE_GETTIME, DoMsg_DBMSG_RESPONSE_GETTIME);
		DBMessageMap(DBMSG_RESPONSE_CHANGEHOUSECONTRACT, DoMsg_DBMSG_RESPONSE_CHANGEHOUSECONTRACT);
		DBMessageMap(DBMSG_RESPONSE_DELHOUSEAPPLYER, DoMsg_DBMSG_RESPONSE_DELHOUSEAPPLYER);
		DBMessageMap(DBMSG_RESPONSE_MANYHOUSEUNIT, DoMsg_DBMSG_RESPONSE_MANYHOUSEUNIT);
		DBMessageMap(DBMSG_RESPONSE_GETHOUSEAPPLYERLIST, DoMsg_DBMSG_RESPONSE_GETHOUSEAPPLYERLIST);
		DBMessageMap(DBMSG_RESPONSE_HOUSERENTAPPLY, DoMsg_DBMSG_RESPONSE_HOUSERENTAPPLY);
		DBMessageMap(DBMSG_RESPONSE_HOUSERENTAPPLYCANCEL, DoMsg_DBMSG_RESPONSE_HOUSERENTAPPLYCANCEL);
		DBMessageMap(DBMSG_RESPONSE_HOUSEUNITNAMECHANGE, DoMsg_DBMSG_RESPONSE_CHANGEHOUSEUNITNAME);
	
		DBMessageMap(DBMSG_RESPONSE_HOUSERENT, DoMsg_DBMSG_RESPONSE_HOUSERENT);
		DBMessageMap(DBMSG_RESPONSE_SELLNPC, DoMsg_DBMSG_RESPONSE_SELLNPC);
		DBMessageMap(DBMSG_RESPONSE_BUYNPC, DoMsg_DBMSG_RESPONSE_BUYNPC);
		DBMessageMap(DBMSG_RESPONSE_MOVEITEMINVTOSTG, DoMsg_DBMSG_RESPONSE_MOVEITEMINVTOSTG);
		DBMessageMap(DBMSG_RESPONSE_MOVEITEMSTGTOINV, DoMsg_DBMSG_RESPONSE_MOVEITEMSTGTOINV);
		DBMessageMap(DBMSG_RESPONSE_GETHOUSESTGPOS, DoMsg_DBMSG_RESPONSE_GETHOUSESTGPOS);
		DBMessageMap(DBMSG_RESPONSE_WASTEDURABILITY, DoMsg_DBMSG_RESPONSE_WASTEDURABILITY);
		DBMessageMap(DBMSG_RESPONSE_UPGRADEITEM, DoMsg_DBMSG_RESPONSE_UPGRADEITEM);
		DBMessageMap(DBMSG_RESPONSE_PERFORMANCEUPGRADEITEM, DoMsg_DBMSG_RESPONSE_PERFORMANCEUPGRADEITEM);
		DBMessageMap(DBMSG_RESPONSE_INVREPAIR, DoMsg_DBMSG_RESPONSE_INVREPAIR);
		DBMessageMap(DBMSG_RESPONSE_DROPITEM, DoMsg_DBMSG_RESPONSE_DROPITEM);
		DBMessageMap(DBMSG_RESPONSE_ENCHANT, DoMsg_DBMSG_RESPONSE_ENCHANT);
		DBMessageMap(DBMSG_RESPONSE_SETITEM, DoMsg_DBMSG_RESPONSE_SETITEM);

		// 개인상점 
		DBMessageMap(DBMSG_RESPONSE_STARTPERSONALSHOP, DOMSG_DBMSG_RESPONSE_STARTPERSONALSHOP);
		DBMessageMap(DBMSG_RESPONSE_PERSONALSHOPBUYITEM, DOMSG_DBMSG_RESPONSE_PERSONALSHOPBUYITEM);
		DBMessageMap(DBMSG_RESPONSE_PERSONALSHOPSELLITEM, DOMSG_DBMSG_RESPONSE_PERSONALSHOPSELLITEM);

		// 기간제 아이템 삭제
		//		DBMessageMap(DBMSG_RESPONSE_DELETE_LIMITDATEITEM,DoMsg_DBMSG_RESPONSE_DELETE_LIMITDATEITEM);

		// 기간제 아이템 연장
		DBMessageMap(DBMSG_RESPONSE_ENCHANT_USEDAYPLUS , DoMsg_DBMSG_RESPONSE_ENCHANT_USEDAYPLUS);
		
		// 아이템 인첸트 속성 변경
		DBMessageMap(DBMSG_RESPONSE_CHANGEENCHANT, DoMsg_DBMSG_RESPONSE_CHANGEENCHANT);

		DBMessageMap(DBMSG_RESPONSE_SET_WEAPONSKILL,DoMsg_DBMSG_RESPONSE_SET_WEAPONSKILL);
		DBMessageMap(DBMSG_RESPONSE_INCREASESKILL, DoMsg_DBMSG_RESPONSE_INCREASESKILL);
		DBMessageMap(DBMSG_RESPONSE_DECREASESKILL, DoMsg_DBMSG_RESPONSE_DECREASESKILL);
		DBMessageMap(DBMSG_RESPONSE_SETSKILLEXP, DoMsg_DBMSG_RESPONSE_SETSKILLEXP);
		DBMessageMap(DBMSG_RESPONSE_INCREASEMASTERSKILL, DoMsg_DBMSG_RESPONSE_INCREASEMASTERSKILL);
		DBMessageMap(DBMSG_RESPONSE_GETSTRUCTUREINFO, DoMsg_DBMSG_RESPONSE_GETSTRUCTUREINFO);
		DBMessageMap(DBMSG_RESPONSE_PAYRENTFEE, DoMsg_DBMSG_RESPONSE_PAYRENTFEE);
		DBMessageMap(DBMSG_RESPONSE_RECALLHOUSE, DoMsg_DBMSG_RESPONSE_RECALLHOUSE);
		DBMessageMap(DBMSG_RESPONSE_HOUSEUNITSTABLECREATE, DoMsg_DBMSG_RESPONSE_HOUSEUNITSTABLECREATE);
		DBMessageMap(DBMSG_RESPONSE_HOUSEUNITHORSEIN, DoMsg_DBMSG_RESPONSE_HOUSEUNITHORSEIN);
		DBMessageMap(DBMSG_RESPONSE_HOUSEUNITHORSEOUT, DoMsg_DBMSG_RESPONSE_HOUSEUNITHORSEOUT);
		DBMessageMap(DBMSG_RESPONSE_HOUSEUNITHORSEINFOSET, DoMsg_DBMSG_RESPONSE_HOUSEUNITHORSEINFOSET);
		DBMessageMap(DBMSG_RESPONSE_HOUSEUNITHORSEEATFOOD, DoMsg_DBMSG_RESPONSE_HOUSEUNITHORSEEATFOOD);
		DBMessageMap(DBMSG_RESPONSE_HOUSEUNITUSEDGOODSBUILDINGCREATE, DoMsg_DBMSG_RESPONSE_HOUSEUNITUSEDGOODSBUILDINGCREATE);
		DBMessageMap(DBMSG_RESPONSE_HOUSEUNITMAKEITEMFROMUSEDGOODS, DoMsg_DBMSG_RESPONSE_HOUSEUNITMAKEITEMFROMUSEDGOODS);


		DBMessageMap(DBMSG_RESPONSE_AGRICULTUREGETPRODUCTS, DoMsg_DBMSG_RESPONSE_AGRICULTUREGETPRODUCTS);
		DBMessageMap(DBMSG_RESPONSE_AGRICULTUREPAYMONEYFORRENTLAND, DoMsg_DBMSG_RESPONSE_AGRICULTUREPAYMONEYFORRENTLAND);
		DBMessageMap(DBMSG_RESPONSE_GETAGRICULTURELEASEINFO, DoMsg_DBMSG_RESPONSE_GETAGRICULTURELEASEINFO);
		DBMessageMap(DBMSG_RESPONSE_EXPIREDAGRICULTERLEASE, DoMsg_DBMSG_RESPONSE_EXPIREDAGRICULTERLEASE);

		DBMessageMap(DBMSG_RESPONSE_FISHINGDECREASETOOLDURABILITY, DoMsg_DBMSG_RESPONSE_FISHINGDECREASETOOLDURABILITY);
		DBMessageMap(DBMSG_RESPONSE_FISHINGGETMARINEPRODUCTS, DoMsg_DBMSG_RESPONSE_FISHINGGETMARINEPRODUCTS);


		DBMessageMap(DBMSG_RESPONSE_PUSHLETTER, DoMsg_DBMSG_RESPONSE_PUSHLETTER);
		DBMessageMap(DBMSG_RESPONSE_POPLETTER, DoMsg_DBMSG_RESPONSE_POPLETTER);
		DBMessageMap(DBMSG_RESPONSE_PUSHACCOUNTLETTER, DoMsg_DBMSG_RESPONSE_PUSHACCOUNTLETTER);
		DBMessageMap(DBMSG_RESPONSE_POPACCOUNTLETTER, DoMsg_DBMSG_RESPONSE_POPACCOUNTLETTER);
		DBMessageMap(DBMSG_RESPONSE_EXTENDCONTRACT, DoMsg_DBMSG_RESPONSE_EXTENDCONTRACT);
		DBMessageMap(DBMSG_RESPONSE_CREATEBANKACCOUNT, DoMsg_DBMSG_RESPONSE_CREATEBANKACCOUNT);
		DBMessageMap(DBMSG_RESPONSE_CLOSEBANKACCOUNT, DoMsg_DBMSG_RESPONSE_CLOSEBANKACCOUNT);
		DBMessageMap(DBMSG_RESPONSE_SETTAX, DoMsg_DBMSG_RESPONSE_SETTAX);
		DBMessageMap(DBMSG_RESPONSE_PAYTAX, DoMsg_DBMSG_RESPONSE_PAYTAX);
		DBMessageMap(DBMSG_RESPONSE_PAYDIVIDEND, DoMsg_DBMSG_RESPONSE_PAYDIVIDEND);
		DBMessageMap(DBMSG_RESPONSE_AUTOPAYDIVIDEND, DoMsg_DBMSG_RESPONSE_AUTOPAYDIVIDEND);
		DBMessageMap(DBMSG_RESPONSE_PAYFEE, DoMsg_DBMSG_RESPONSE_PAYFEE);

		DBMessageMap(DBMSG_RESPONSE_HIRENPC, DoMsg_DBMSG_RESPONSE_HIRENPC);
		DBMessageMap(DBMSG_RESPONSE_PROFITTOCAPITALFUND, DoMsg_DBMSG_RESPONSE_PROFITTOCAPITALFUND);
		DBMessageMap(DBMSG_RESPONSE_CHANGECITYHALLPROFITMONEY, DoMsg_DBMSG_RESPONSE_CHANGECITYHALLPROFITMONEY);
		DBMessageMap(DBMSG_RESPONSE_DONATEVILLAGEMONEY, DoMsg_DBMSG_RESPONSE_DONATEVILLAGEMONEY);
		DBMessageMap(DBMSG_RESPONSE_DONATEMEMBERLIST, DoMsg_DBMSG_RESPONSE_DONATEMEMBERLIST);
		DBMessageMap(DBMSG_RESPONSE_EVENT_INSERTMATERIAL, DoMsg_DBMSG_RESPONSE_EVENT_INSERTMATERIAL);
		DBMessageMap(DBMSG_RESPONSE_EVENT_MATERIALLIST, DoMsg_DBMSG_RESPONSE_EVENT_MATERIALLIST);
		DBMessageMap(DBMSG_RESPONSE_EVENT_MATERIALCOMPLETE, DoMsg_DBMSG_RESPONSE_EVENT_MATERIALCOMPLETE);		

		//----------------------------------
		// 시스템 
		//----------------------------------
		DBMessageMap(DBMSG_RESPONSE_STARTGAME, DoMsg_DBMSG_RESPONSE_STARTGAME);

		// 맵 타입 통보. 
		DBMessageMap(DBMSG_RESPONSE_MAPTYPEINFO, DoMsg_DBMSG_RESPONSE_MAPTYPEINFO);
		DBMessageMap(DBMSG_RESPONSE_WARPVILLAGE, DoMsg_DBMSG_RESPONSE_WARPVILLAGE);

		// 개인 거래
		DBMessageMap(DBMSG_RESPONSE_PRIVATETRADE, DoMsg_DBMSG_RESPONSE_PRIVATETRADE);
		DBMessageMap(DBMSG_RESPONSE_BLOCK, DoMsg_DBMSG_RESPONSE_BLOCK);
		DBMessageMap(DBMSG_RESPONSE_BLOCKUSER, DoMsg_DBMSG_RESPONSE_BLOCKUSER);

		DBMessageMap(DBMSG_RESPONSE_SETTIME, DoMsg_DBMSG_RESPONSE_SETTIME);
		DBMessageMap(DBMSG_RESPONSE_USERCHARINFO, DoMsg_DBMSG_RESPONSE_USERCHARINFO);
		DBMessageMap(DBMSG_RESPONSE_USERCHARITEMINFO, DoMsg_DBMSG_RESPONSE_USERCHARITEMINFO );
		DBMessageMap(DBMSG_RESPONSE_USERCHARITEMINFO2, DoMsg_DBMSG_RESPONSE_USERCHARITEMINFO2 );
		DBMessageMap(DBMSG_RESPONSE_ACCOUNTINFO, DoMsg_DBMSG_RESPONSE_ACCOUNTINFO);
		DBMessageMap(DBMSG_RESPONSE_ACCOUNTINFOFORHANXNOTI, DoMsg_DBMSG_RESPONSE_ACCOUNTINFOFORHANXNOTI);
		DBMessageMap(DBMSG_RESPONSE_CHARINFOFORHANXNOTI,	DoMsg_DBMSG_RESPONSE_CHARINFOFORHANXNOTI);

		// ItemMall
		DBMessageMap(DBMSG_RESPONSE_ITEMMALLEXISTENCE, DoMsg_DBMSG_RESPONSE_ITEMMALLEXISTENCE);
		DBMessageMap(DBMSG_RESPONSE_ITEMMALLITEMLIST, DoMsg_DBMSG_RESPONSE_ITEMMALLITEMLIST);
		DBMessageMap(DBMSG_RESPONSE_ITEMMALLGETITEM, DoMsg_DBMSG_RESPONSE_ITEMMALLGETITEM);
		DBMessageMap(DBMSG_RESPONSE_NEWSCHATADDMISSION, DoMsg_DBMSG_RESPONSE_NEWSCHATADDMISSION);
		//DBMessageMap(DBMSG_RESPONSE_NEWS, DoMsg_DBMSG_RESPONSE_NEWS);
		DBMessageMap(DBMSG_RESPONSE_NOLIMITTICKET_WARP,DoMsg_DBMSG_RESPONSE_NOLIMITTICKET_WARP);
		// 목표 지역으로 바로 이동 한다 . 
		DBMessageMap(DBMSG_RESPONSE_WARP_TARGETWORLD,DoMsg_DBMSG_RESPONSE_WARP_TARGETWORLD);

		DBMessageMap(DBMSG_RESPONSE_GET_SEL_PGLIST,DoMsg_DBMSG_RESPONSE_GET_SEL_PGLIST);
		DBMessageMap(DBMSG_RESPONSE_GET_ITEMMALL_ITEMINFO,DoMsg_DBMSG_RESPONSE_GET_ITEMMALL_ITEMINFO);
		DBMessageMap(DBMSG_RESPONSE_GET_MYCASH_INFO,DoMsg_DBMSG_RESPONSE_GET_MYCASH_INFO);
		DBMessageMap(DBMSG_RESPONSE_ITEMMALL_BUYITEM,DoMsg_DBMSG_RESPONSE_ITEMMALL_BUYITEM);
		DBMessageMap(DBMSG_RESPONSE_ITEMMALL_GIFTITEM,DoMsg_DBMSG_RESPONSE_ITEMMALL_GIFTITEM);
		DBMessageMap(DBMSG_RESPONSE_CHECK_ACCOUNTID,DoMsg_DBMSG_RESPONSE_CHECK_ACCOUNTID);
		DBMessageMap(DBMSG_RESPONSE_SET_BAGITEM,DoMsg_DBMSG_RESPONSE_SET_BAGITEM);
		DBMessageMap(DBMSG_RESPONSE_SET_CHANGEHERO,DoMsg_DBMSG_RESPONSE_SET_CHANGEHERO);
		DBMessageMap(DBMSG_RESPONSE_ITEMMALL_BUYITEM_FORXNOTI,DoMsg_DBMSG_RESPONSE_ITEMMALL_BUYITEM_FORXNOTI);
		DBMessageMap(DBMSG_RESPONSE_ITEMMALL_GIFTITEM_FORXNOTI,DoMsg_DBMSG_RESPONSE_ITEMMALL_GIFTITEM_FORXNOTI);

		// 육조 
		DBMessageMap(DBMSG_RESPONSE_GETBYUNGZOINFO, DoMsg_DBMSG_RESPONSE_GETBYUNGZOINFO);
		DBMessageMap(DBMSG_RESPONSE_GETGONGZOINFO, DoMsg_DBMSG_RESPONSE_GETGONGZOINFO);
		DBMessageMap(DBMSG_RESPONSE_GETHYUNGZOINFO, DoMsg_DBMSG_RESPONSE_GETHYUNGZOINFO);
		DBMessageMap(DBMSG_RESPONSE_GETHOZOINFO, DoMsg_DBMSG_RESPONSE_GETHOZOINFO);
		DBMessageMap(DBMSG_RESPONSE_GETIZOINFO, DoMsg_DBMSG_RESPONSE_GETIZOINFO);
		DBMessageMap(DBMSG_RESPONSE_GETYEZOINFO, DoMsg_DBMSG_RESPONSE_GETYEZOINFO);
		DBMessageMap(DBMSG_RESPONSE_GETGOONZUINFO, DoMsg_DBMSG_RESPONSE_GETGOONZUINFO);

		// 육조 
		DBMessageMap(DBMSG_RESPONSE_SETBYUNGZOINFO, DoMsg_DBMSG_RESPONSE_SETBYUNGZOINFO);
		DBMessageMap(DBMSG_RESPONSE_SETBYUNGZOINFO_VILLAGEWARTIME,DoMsg_DBMSG_RESPONSE_SETBYUNGZOINFO_VILLAGEWARTIME);
		DBMessageMap(DBMSG_RESPONSE_SETGONGZOINFO, DoMsg_DBMSG_RESPONSE_SETGONGZOINFO);
		DBMessageMap(DBMSG_RESPONSE_SETHYUNGZOINFO, DoMsg_DBMSG_RESPONSE_SETHYUNGZOINFO);
		DBMessageMap(DBMSG_RESPONSE_SETHOZOINFO, DoMsg_DBMSG_RESPONSE_SETHOZOINFO);
		DBMessageMap(DBMSG_RESPONSE_SETIZOINFO, DoMsg_DBMSG_RESPONSE_SETIZOINFO);
		DBMessageMap(DBMSG_RESPONSE_SETYEZOINFO, DoMsg_DBMSG_RESPONSE_SETYEZOINFO);
		DBMessageMap(DBMSG_RESPONSE_SETGOONZUINFO, DoMsg_DBMSG_RESPONSE_SETGOONZUINFO);
		DBMessageMap(DBMSG_RESPONSE_SETGOONZUFINANCES, DoMsg_DBMSG_RESPONSE_SETGOONZUFINANCES);
		DBMessageMap(DBMSG_RESPONSE_GETANGELAPPLYERLIST, DoMsg_DBMSG_RESPONSE_GETANGELAPPLYERLIST);
		DBMessageMap(DBMSG_RESPONSE_GETANGELLIST, DoMsg_DBMSG_RESPONSE_GETANGELLIST);
		DBMessageMap(DBMSG_RESPONSE_SETANGELAPPLYER, DoMsg_DBMSG_RESPONSE_SETANGELAPPLYER);
		DBMessageMap(DBMSG_RESPONSE_SETANGEL, DoMsg_DBMSG_RESPONSE_SETANGEL);
		DBMessageMap(DBMSG_RESPONSE_GETPOLICELIST, DoMsg_DBMSG_RESPONSE_GETPOLICELIST);
		DBMessageMap(DBMSG_RESPONSE_SETPOLICE, DoMsg_DBMSG_RESPONSE_SETPOLICE);
		DBMessageMap(DBMSG_RESPONSE_GETCRIMINALLIST, DoMsg_DBMSG_RESPONSE_GETCRIMINALLIST);
		DBMessageMap(DBMSG_RESPONSE_SETCRIMINAL, DoMsg_DBMSG_RESPONSE_SETCRIMINAL);
		DBMessageMap(DBMSG_RESPONSE_GETCHANGEDNAME, DoMsg_DBMSG_RESPONSE_GETCHANGEDNAME);
		DBMessageMap(DBMSG_RESPONSE_PRISONUSER, DoMsg_DBMSG_RESPONSE_PRISONUSER);
		DBMessageMap(DBLOGMSG_RESPONSE_PERSONAL_LOG, DoMsg_DBLOGMSG_RESPONSE_PERSONAL_LOG);
		DBMessageMap(DBMSG_RESPONSE_GUILTYINFORECORD, DoMsg_DBMSG_RESPONSE_GUILTYINFORECORD);
		DBMessageMap(DBMSG_RESPONSE_GETDAILYNEWCHAR, DoMsg_DBMSG_RESPONSE_GETDAILYNEWCHAR);
		DBMessageMap(DBMSG_RESPONSE_SETMINISTER, DoMsg_DBMSG_RESPONSE_SETMINISTER);
		DBMessageMap(DBMSG_RESPONSE_SETLIQUIDATION, DoMsg_DBMSG_RESPONSE_SETLIQUIDATION);
		DBMessageMap(DBMSG_RESPONSE_GOONZU_SETBONUSTIME , DoMsg_DBMSG_RESPONSE_SETBONUSTIME);

		//----------------------------------
		// 가차
		//----------------------------------
		DBMessageMap(DBMSG_RESPONSE_GACHABUY , DoMsg_DBMSG_RESPONSE_GACHABUY);
		

		//----------------------------------
		// 수렵장
		//----------------------------------
		DBMessageMap(DBMSG_RESPONSE_HUNTMONSTERFIELDLISTADD, DoMsg_DBMSG_RESPONSE_HUNTMONSTERFIELDLISTADD);
		DBMessageMap(DBMSG_RESPONSE_HUNTMONSTERFIELDLISTDEL, DoMsg_DBMSG_RESPONSE_HUNTMONSTERFIELDLISTDEL);
		DBMessageMap(DBMSG_RESPONSE_HUNTSTORAGEMONSTERIN, DoMsg_DBMSG_RESPONSE_HUNTSTORAGEMONSTERIN);
		DBMessageMap(DBMSG_RESPONSE_HUNTSTORAGEMONSTEROUT, DoMsg_DBMSG_RESPONSE_HUNTSTORAGEMONSTEROUT);
		DBMessageMap(DBMSG_RESPONSE_HUNTSTORAGEDECREASEDOLLITEMNUM, DoMsg_DBMSG_RESPONSE_HUNTSTORAGEDECREASEDOLLITEMNUM);
		DBMessageMap(DBMSG_RESPONSE_HUNTLEFTMONSTERSTGIN, DoMsg_DBMSG_RESPONSE_HUNTLEFTMONSTERSTGIN);
		//----------------------------------
		// 친구
		//----------------------------------
		DBMessageMap(DBMSG_RESPONSE_FRIENDADD, DoMsg_DBMSG_RESPONSE_FRIENDADD);
		DBMessageMap(DBMSG_RESPONSE_FRIENDDEL, DoMsg_DBMSG_RESPONSE_FRIENDDEL);
		DBMessageMap(DBMSG_RESPONSE_FRIENDADDLIST, DoMsg_DBMSG_RESPONSE_FRIENDADDLIST);
		DBMessageMap(DBMSG_RESPONSE_FRIENDDELLIST, DoMsg_DBMSG_RESPONSE_FRIENDDELLIST);
		DBMessageMap(DBMSG_RESPONSE_FRIENDMEMO, DoMsg_DBMSG_RESPONSE_FRIENDMEMO);
		DBMessageMap(DBMSG_RESPONSE_FRIENDMEMOSET, DoMsg_DBMSG_RESPONSE_FRIENDMEMOSET);
		DBMessageMap(DBMSG_RESPONSE_FRIENDCHANGEGROUP, DoMsg_DBMSG_RESPONSE_FRIENDCHANGEGROUP);
		DBMessageMap(DBMSG_RESPONSE_FRIENDCHANGEGROUPNAME, DoMsg_DBMSG_RESPONSE_FRIENDCHANGEGROUPNAME);
		DBMessageMap(DBMSG_RESPONSE_FRIENDALLLIST, DoMsg_DBMSG_RESPONSE_FRIENDALLLIST);
		
		//----------------------------------
		// 투표
		//----------------------------------
		DBMessageMap(DBMSG_RESPONSE_VOTEINIT, DoMsg_DBMSG_RESPONSE_VOTEINIT);
		DBMessageMap(DBMSG_RESPONSE_VOTEKINGSELECTION, DoMsg_DBMSG_RESPONSE_VOTEKINGSELECTION);
		DBMessageMap(DBMSG_RESPONSE_VOTEKINGAGGREGATE, DoMsg_DBMSG_RESPONSE_VOTEKINGAGGREGATE);

		//----------------------------------
		// Daily Quest
		//----------------------------------
		DBMessageMap(DBMSG_RESPONSE_DAILYQUESTADD, DoMsg_DBMSG_RESPONSE_DAILYQUESTADD);
		DBMessageMap(DBMSG_RESPONSE_DAILYQUESTDEL, DoMsg_DBMSG_RESPONSE_DAILYQUESTDEL);
		DBMessageMap(DBMSG_RESPONSE_DAILYQUESTCHANGE, DoMsg_DBMSG_RESPONSE_DAILYQUESTCHANGE);

		//----------------------------------
		// Daily Quest2
		//----------------------------------
		DBMessageMap(DBMSG_RESPONSE_DAILYQUEST2ADD, DoMsg_DBMSG_RESPONSE_DAILYQUEST2ADD);
		DBMessageMap(DBMSG_RESPONSE_DAILYQUEST2DEL, DoMsg_DBMSG_RESPONSE_DAILYQUEST2DEL);
		DBMessageMap(DBMSG_RESPONSE_DAILYQUEST2CHANGE, DoMsg_DBMSG_RESPONSE_DAILYQUEST2CHANGE);
		//----------------------------------
		// Daily Quest3
		//----------------------------------
		DBMessageMap(DBMSG_RESPONSE_DAILYQUEST3ADD, DoMsg_DBMSG_RESPONSE_DAILYQUEST3ADD);
		DBMessageMap(DBMSG_RESPONSE_DAILYQUEST3DEL, DoMsg_DBMSG_RESPONSE_DAILYQUEST3DEL);
		DBMessageMap(DBMSG_RESPONSE_DAILYQUEST3CHANGE, DoMsg_DBMSG_RESPONSE_DAILYQUEST3CHANGE);

		//KHY - 0530 명나라 상인 구매제한.
		DBMessageMap(DBMSG_RESPONSE_GET_FOREIGNMERCHANTBUYLIMIT, DoMsg_DBMSG_RESPONSE_GET_FOREIGNMERCHANTBUYLIMIT);
		DBMessageMap(DBMSG_RESPONSE_GET_FOREIGNMERCHANTNOWMONEY, DoMsg_DBMSG_RESPONSE_GET_FOREIGNMERCHANTNOWMONEY);

		// KHY - 0901 -  과금 아이템 자동구매 설정.
		DBMessageMap(DBMSG_RESPONSE_GET_SYSTEMBUYITEMNOWMONEY, DoMsg_DBMSG_RESPONSE_GET_SYSTEMBUYITEMNOWMONEY);
		//----------------------------------
		// 교역 상인 관련 NPC ( 청상인, 왜상인 )
		//----------------------------------
		DBMessageMap(DBMSG_RESPONSE_SETFOREIGNMERCHANTNPCINFO, DoMsg_DBMSG_RESPONSE_SETFOREIGNMERCHANTNPCINFO);
		DBMessageMap(DBMSG_RESPONSE_GETFOREIGNMERCHANTNPCINFO, DoMsg_DBMSG_RESPONSE_GETFOREIGNMERCHANTNPCINFO);
		DBMessageMap(DBMSG_RESPONSE_FOREIGNMERCHANTBUYCASHITEM, DoMsg_DBMSG_RESPONSE_FOREIGNMERCHANTBUYCASHITEM);
		DBMessageMap(DBMSG_RESPONSE_TRADEMERCHANTSET, DoMsg_DBMSG_RESPONSE_TRADEMERCHANTSET);
		DBMessageMap(DBMSG_RESPONSE_TRADEMERCHANTBUYITEMFROMPERSON, DoMsg_DBMSG_RESPONSE_TRADEMERCHANTBUYITEMFROMPERSON);
		DBMessageMap(DBMSG_RESPONSE_TRADEMERCHANTBUYHORSEFROMPERSON, DoMsg_DBMSG_RESPONSE_TRADEMERCHANTBUYHORSEFROMPERSON);
		DBMessageMap(DBMSG_RESPONSE_TRADEMERCHANTBUYITEM, DoMsg_DBMSG_RESPONSE_TRADEMERCHANTBUYITEM);
		DBMessageMap(DBMSG_RESPONSE_GETVILLAGEINFO, DoMsg_DBMSG_RESPONSE_GETVILLAGEINFO);
		DBMessageMap(DBMSG_RESPONSE_DECLAREWAR, DoMsg_DBMSG_RESPONSE_DECLAREWAR);
		DBMessageMap(DBMSG_RESPONSE_CANCELDECLAREWAR, DoMsg_DBMSG_RESPONSE_CANCELDECLAREWAR);
		DBMessageMap(DBMSG_RESPONSE_SETVILLAGEWAR_RESULT, DoMsg_DBMSG_RESPONSE_SETVILLAGEWAR_RESULT);
		DBMessageMap(DBMSG_RESPONSE_SETSYMBOLSTATUS, DoMsg_DBMSG_RESPONSE_SETSYMBOLSTATUS);
		DBMessageMap(DBMSG_RESPONSE_SETCASTLESTATUS, DoMsg_DBMSG_RESPONSE_SETCASTLESTATUS);
		DBMessageMap(DBMSG_RESPONSE_SETVILLAGEWARLOSS, DoMsg_DBMSG_RESPONSE_SETVILLAGEWARLOSS);
		DBMessageMap(DBMSG_RESPONSE_SETVILLAGELEVEL, DoMsg_DBMSG_RESPONSE_SETVILLAGELEVEL);
		DBMessageMap(DBMSG_RESPONSE_VILLAGERESIDENTSVISITORSINFO, DoMsg_DBMSG_RESPONSE_VILLAGERESIDENTSVISITORSINFO);
		DBMessageMap(DBMSG_RESPONSE_ADD_VILLAGE_SCORE,			  DoMsg_DBMSG_RESPONSE_ADD_VILLAGE_SCORE);
		
		//DBMessageMap(DBMSG_RESPONSE_SETPARENTVILLAGE,
		DBMessageMap(DBMSG_RESPONSE_MASTERGIVEITEM, DoMsg_DBMSG_RESPONSE_MASTERGIVEITEM);
		DBMessageMap(DBMSG_RESPONSE_GIVEITEM, DoMsg_DBMSG_RESPONSE_GIVEITEM);
		DBMessageMap(DBMSG_RESPONSE_DBSYSTEMINFO, DoMsg_DBMSG_RESPONSE_DBSYSTEMINFO);
		DBMessageMap(DBMSG_RESPONSE_DBSTARTINFO, DoMsg_DBMSG_RESPONSE_DBSTARTINFO);
		DBMessageMap(DBMSG_RESPONSE_DBINITCOMPLETE, DoMsg_DBMSG_RESPONSE_DBINITCOMPLETE);
		DBMessageMap(DBMSG_RESPONSE_SETFOURLEAF, DoMsg_DBMSG_RESPONSE_SETFOURLEAF);
		

		DBMessageMap(DBMSG_RESPONSE_WENNYOLDMAN_SAVEINVENTORY, DoMsg_DBMSG_RESPONSE_WENNYOLDMAN_SAVEINVENTORY);
		DBMessageMap(DBMSG_RESPONSE_WENNYOLDMAN_MOVEITEMSTGTOINV, DoMsg_DBMSG_RESPONSE_WENNYOLDMAN_MOVEITEMSTGTOINV);
		DBMessageMap(DBMSG_RESPONSE_WENNYOLDMAN_INVENTORYLIST, DoMsg_DBMSG_RESPONSE_WENNYOLDMAN_INVENTORYLIST);

		DBMessageMap(DBMSG_RESPONSE_DISTRIBUTION_WORLDMONEY,DoMsg_DBMSG_RESPONSE_DISTRIBUTION_WORLDMONEY);
		DBMessageMap(DBMSG_RESPONSE_WORLDMONEY_TRADELIST,DoMsg_DBMSG_RESPONSE_WORLDMONEY_TRADELIST);
		DBMessageMap(DBMSG_RESPONSE_WORLDMONEY_SELLORDER,DoMsg_DBMSG_RESPONSE_WORLDMONEY_SELLORDER);
		DBMessageMap(DBMSG_RESPONSE_WORLDMONEY_BUYORDER,DoMsg_DBMSG_RESPONSE_WORLDMONEY_BUYORDER);
		DBMessageMap(DBMSG_RESPONSE_WORLDMONEY_CANCELORDER,DoMsg_DBMSG_RESPONSE_WORLDMONEY_CANCELORDER);
		DBMessageMap(DBMSG_RESPONSE_WORLDMONEY_SETAVERAGEPRICE,DoMsg_DBMSG_RESPONSE_WORLDMONEY_SETAVERAGEPRICE);
		DBMessageMap(DBMSG_RESPONSE_WORLDMONEY_REDUCEPRICE,DoMsg_DBMSG_RESPONSE_WORLDMONEY_REDUCEPRICE);
		DBMessageMap(DBMSG_RESPONSE_WORLDMONEY_SET_CHAR,DoMsg_DBMSG_RESPONSE_WORLDMONEY_SET_CHAR);

		DBMessageMap(DBMSG_RESPONSE_TRADESERVER_SETORDER,DoMsg_DBMSG_RESPONSE_TRADESERVER_SETORDER);
		DBMessageMap(DBMSG_RESPONSE_TRADESERVER_CANCELORDER,DoMsg_DBMSG_RESPONSE_TRADESERVER_CANCELORDER);
		DBMessageMap(DBMSG_RESPONSE_TRADESERVER_BUYITEM,DoMsg_DBMSG_RESPONSE_TRADESERVER_BUYITEM);
		DBMessageMap(DBMSG_RESPONSE_TRADESERVER_SET_SELLINFO,DoMsg_DBMSG_RESPONSE_TRADESERVER_SET_SELLINFO);

		DBMessageMap(DBMSG_RESPONSE_TRADESERVER_GET_WITHDRAW_ACU,DoMsg_DBMSG_RESPONSE_TRADESERVER_GET_WITHDRAW_ACU);

		DBMessageMap(DBMSG_RESPONSE_INITSTATISTICS, DoMsg_DBMSG_RESPONSE_INITSTATISTICS);

		DBMessageMap(DBMSG_RESPONSE_WORLDPASSPORT_SET,DoMsg_DBMSG_RESPONSE_WORLDPASSPORT_SET);
		DBMessageMap(DBMSG_RESPONSE_WORLDPASSPORT_EXTEND, DoMsg_DBMSG_RESPONSE_WORLDPASSPORT_EXTEND);
		
		DBMessageMap(DBMSG_RESPONSE_SETCOUNTRY, DoMsg_DBMSG_RESPONSE_SETCOUNTRY);
		DBMessageMap(DBMSG_RESPONSE_SETSHOWCOUNTRY, DoMsg_DBMSG_RESPONSE_SETSHOWCOUNTRY);

		DBMessageMap(DBMSG_RESPONSE_SETSHOWPUCHIKOMI ,DoMsg_DBMSG_RESPONSE_SETSHOWPUCHIKOMI);


		DBMessageMap(DBMSG_RESPONSE_GIVEFP, DoMsg_DBMSG_RESPONSE_GIVEFP);
		DBMessageMap(DBMSG_RESPONSE_ADDBUF, DoMsg_DBMSG_RESPONSE_ADDBUF);
		DBMessageMap(DBMSG_RESPONSE_DELETEBUF, DoMsg_DBMSG_RESPONSE_DELETEBUF);
		DBMessageMap(DBMSG_RESPONSE_SETTEACHERPOINT, DoMsg_DBMSG_RESPONSE_SETTEACHERPOINT);
		DBMessageMap(DBMSG_RESPONSE_GETITEM_FROM_TEACHERPOINT, DoMsg_DBMSG_RESPONSE_GETITEM_FROM_TEACHERPOINT);
		DBMessageMap(DBMSG_RESPONSE_RENOUNCEPUPIL, DoMsg_DBMSG_RESPONSE_RENOUNCEPUPIL);
		DBMessageMap(DBMSG_RESPONSE_OVERTAKETEACHERLEVEL, DoMsg_DBMSG_RESPONSE_OVERTAKETEACHERLEVEL);

		DBMessageMap(DBMSG_RESPONSE_PVPRESULT, DoMsg_DBMSG_RESPONSE_PVPRESULT);
		DBMessageMap(DBMSG_RESPONSE_ATTEND, DoMsg_DBMSG_RESPONSE_ATTEND);
		DBMessageMap(DBMSG_RESPONSE_SETATTEND, DoMsg_DBMSG_RESPONSE_SETATTEND);
		
		// Guild
		DBMessageMap( DBMSG_RESPONSE_GUILD_CREATEGUILD,DoMsg_DBMSG_RESPONSE_GUILD_CREATEGUILD);
		DBMessageMap( DBMSG_RESPONSE_GUILD_DESTROYGUILD,DoMsg_DBMSG_RESPONSE_GUILD_DESTROYGUILD);
		DBMessageMap( DBMSG_RESPONSE_GUILD_JOINGUILD,DoMsg_DBMSG_RESPONSE_GUILD_JOINGUILD);
		DBMessageMap( DBMSG_RESPONSE_GUILD_CONFIRMJOINGUILD,DoMsg_DBMSG_RESPONSE_GUILD_CONFIRMJOINGUILD);
		DBMessageMap( DBMSG_RESPONSE_GUILD_LEAVEGUILD,DoMsg_DBMSG_RESPONSE_GUILD_LEAVEGUILD);
		DBMessageMap( DBMSG_RESPONSE_GUILD_CHANGEVILLAGE,DoMsg_DBMSG_RESPONSE_GUILD_CHANGEVILLAGE);
		DBMessageMap( DBMSG_RESPONSE_GUILD_CHANGEGUILDPOINT,DoMsg_DBMSG_RESPONSE_GUILD_CHANGEGUILDPOINT);
		DBMessageMap( DBMSG_RESPONSE_GUILD_GETGUILDINFO,DOMSG_DBMSG_RESPONSE_GUILD_GETGUILDINFO);
		DBMessageMap( DBMSG_RESPONSE_GUILD_CONFIRMCREATEGUILD,DOMSG_DBMSG_RESPONSE_GUILD_CONFIRMCREATEGUILD);
		DBMessageMap( DBMSG_RESPONSE_GUILD_SETSECONDMASTER,DOMSG_DBMSG_RESPONSE_GUILD_SETSECONDMASTER);
		DBMessageMap( DBMSG_RESPONSE_GUILD_GIVEGUILDMONEY,DOMSG_DBMSG_RESPONSE_GUILD_GIVEGUILDMONEY);
		DBMessageMap( DBMSG_RESPONSE_GUILD_GIVE_FEE,DOMSG_DBMSG_RESPONSE_GUILD_GIVE_FEE);
		DBMessageMap( DBMSG_RESPONSE_GUILD_CHANGESTATUS,DOMSG_DBMSG_RESPONSE_GUILD_CHANGESTATUS);
		DBMessageMap( DBMSG_RESPONSE_GUILD_SETSTRFEERATE,DOMSG_DBMSG_RESPONSE_GUILD_SETSTRFEERATE);
		DBMessageMap( DBMSG_RESPONSE_GUILD_LEVELUP,DOMSG_DBMSG_RESPONSE_GUILD_LEVELUP);
		DBMessageMap( DBMSG_RESPONSE_GUILD_SETMARK,DOMSG_DBMSG_RESPONSE_GUILD_SETMARK);
		DBMessageMap( DBMSG_RESPONSE_GUILD_CHANGENAME,DOMSG_DBMSG_RESPONSE_GUILD_CHANGENAME);
		DBMessageMap( DBMSG_RESPONSE_GUILD_CHANGEMASTER,DoMsg_DBMSG_RESPONSE_GUILD_CHANGEMASTER);
		DBMessageMap( DBMSG_RESPONSE_GUILD_CLOSEGUILD,DoMsg_DBMSG_RESPONSE_GUILD_CLOSEGUILD);
		DBMessageMap( DBMSG_RESPONSE_GUILDWAR_ADDRESERVE, DoMsg_DBMSG_RESPONSE_GUILDWAR_ADDRESERVE);
		DBMessageMap( DBMSG_RESPONSE_GUILDWAR_RESERVELIST, DoMsg_DBMSG_RESPONSE_GUILDWAR_RESERVELIST);
		DBMessageMap( DBMSG_RESPONSE_GUILDDUNGEON_APPLY, DoMsg_DBMSG_RESPONSE_GUILDDUNGEON_APPLY);
		DBMessageMap( DBMSG_RESPONSE_GUILDDUNGEON_SAVESTATUS, DoMsg_DBMSG_RESPONSE_GUILDDUNGEON_SAVESTATUS);
		DBMessageMap( DBMSG_RESPONSE_GUILDDUNGEON_LOADSTATUS, DoMsg_DBMSG_RESPONSE_GUILDDUNGEON_LOADSTATUS);
		DBMessageMap( DBMSG_RESPONSE_GUILDDUNGEON_TRANSFEROWNERSHIP, DoMsg_DBMSG_RESPONSE_GUILDDUNGEON_TRANSFEROWNERSHIP);
		DBMessageMap( DBMSG_RESPONSE_GUILD_CHECKDESTROY_MONTH, DoMsg_DBMSG_RESPONSE_GUILD_CHECKDESTROY_MONTH);
		DBMessageMap( DBMSG_RESPONSE_GUILD_NOTCONNECT_CHANGEMASTER, DoMsg_DBMSG_RESPONSE_GUILD_NOTCONNECT_GUILDMASTER);
		DBMessageMap( DBMSG_RESPONSE_GUILDHUNTMAPWAR_REGLIST, DoMsg_DBMSG_RESPONSE_GUILDHUNTMAPWAR_REGLIST);
		DBMessageMap( DBMSG_RESPONSE_GUILDHUNTMAPWAR_RANK_GET, DoMsg_DBMSG_RESPONSE_GUILDHUNTMAPWAR_GETTOP10);
		DBMessageMap( DBMSG_RESPONSE_GUILDHUNTMAPWAR_RESULT, DoMsg_DBMSG_RESPONSE_GUILDHUNTMAPWAR_RESULT);
		

		//KHY - 1220 - 시간종량제
		//KHY - 1220 - 변신시스템.
		DBMessageMap(DBMSG_RESPONSE_TRANSFORM_ADDCHAR, DoMsg_DBMSG_RESPONSE_TRANSFORM_ADDCHAR);
		DBMessageMap(DBMSG_RESPONSE_TIMEMETERRATE_ADDTIME, DoMsg_DBMSG_RESPONSE_TIMEMETERRATE_ADDTIME);
		DBMessageMap(DBMSG_RESPONSE_TIMEMETERRATE_USETIME, DoMsg_DBMSG_RESPONSE_TIMEMETERRATE_USETIME);

		DBMessageMap(DBMSG_RESPONSE_SET_HOMEPAGE_URL, DoMsg_DBMSG_RESPONSE_SET_HOMEPAGE_URL);
		DBMessageMap(DBMSG_RESPONSE_GET_HOMEPAGE_URL, DoMsg_DBMSG_RESPONSE_GET_HOMEPAGE_URL);
				
		// 모후모후 이벤트
		DBMessageMap(DBMSG_RESPONSE_MOFUMOFUEVENT_RESERVE, DoMsg_DBMSG_RESPONSE_MOFUMOFUEVENT_RESERVE);
		DBMessageMap(DBMSG_RESPONSE_MOFUMOFUEVENT_RESERVELIST, DoMsg_DBMSG_RESPONSE_MOFUMOFUEVENT_RESERVELIST);

		//KHY - 0822 - 해피빈 퀘스트 추가.
		DBMessageMap(DBMSG_RESPONSE_GETHAPPYBEANQUESTINFO, DoMsg_DBMSG_RESPONSE_GETHAPPYBEANQUESTINFO);

		//KHY - 0906 - 게임방 이벤트 쿠폰.
		DBMessageMap(DBMSG_RESPONSE_GETEVENTCOUPONINFO, DoMsg_DBMSG_RESPONSE_GETEVENTCOUPONINFO);
		//옥션이벤트[2007.09.10 손성웅]
		/*DBMessageMap(DBMSG_RESPONSE_GETEVAUCTIONENTCOUPONINFO, DoMsg_DBMSG_RESPONSE_GETAUCTIONEVENTCOUPONINFO);*/

		DBMessageMap(DBMSG_RESPONSE_SYSTEMREWARDLIST, DoMsg_DBMSG_RESPONSE_SYSTEMREWARDLIST);
		DBMessageMap(DBMSG_RESPONSE_RECIEVESYSTEMREWARD, DoMsg_DBMSG_RESPONSE_RECIEVESYSTEMREWARD);
		DBMessageMap(DBMSG_RESPONSE_GIVESYSTEMREWARD, DoMsg_DBMSG_RESPONSE_GIVESYSTEMREWARD);

		DBMessageMap( DBMSG_RESPONSE_CREATEEMPIRE, DoMsg_DBMSG_RESPONSE_CREATEEMPIRE );
		DBMessageMap( DBMSG_RESPONSE_DESTROYEMPIRE, DoMsg_DBMSG_RESPONSE_DESTROYEMPIRE );
		DBMessageMap( DBMSG_RESPONSE_JOINEMPIRE, DoMsg_DBMSG_RESPONSE_JOINEEMPIRE );
		DBMessageMap( DBMSG_RESPONSE_SECEDEEMPIRE, DoMsg_DBMSG_RESPONSE_SECEDEEMPIRE );
		DBMessageMap( DBMSG_RESPONSE_ALLEMPIREINFO, DoMsg_DBMSG_RESPONSE_ALLEMPIREINFO );
		DBMessageMap( DBMSG_RESPONSE_SECEDEEMPIRE, DoMsg_DBMSG_RESPONSE_SETEMPIREMONEY );

		//DBMessageMap( DBMSG_RESPONSE_GUILD_CHANGEVILLAGELIST, DoMsg_DBMSG_RESPONSE_GUILD_CHANGEVILLAGELIST);

		//GMTOOL[손성웅]
        DBMessageMap( DBMSG_RESPONSE_GMTOOL_CHARBASICINFO, DoMsg_DBMSG_RESPONSE_GMTOOL_CHARBASICINFO);
		DBMessageMap( DBMSG_RESPONSE_GMTOOL_ANIMALINFO, DoMsg_DBMSG_RESPONSE_GMTOOL_ANIMALINFO);
		DBMessageMap( DBMSG_RESPONSE_GMTOOL_INVENTORYINFO, DoMsg_DBMSG_RESPONSE_GMTOOL_INVENTORYINFO);
		DBMessageMap( DBMSG_RESPONSE_GMTOOL_SUMMONINFO, DoMsg_DBMSG_RESPONSE_GMTOOL_SUMMONINFO);
		DBMessageMap( DBMSG_RESPONSE_GMTOOL_SKILLINFO, DoMsg_DBMSG_RESPONSE_GMTOOL_SKILLINFO);
		DBMessageMap( DBMSG_RESPONSE_GMTOOL_REALESTATEINFO, DoMsg_DBMSG_RESPONSE_GMTOOL_REALESTATEINFO);

		//[추가 : 황진성 2007. 12. 7 오토프로그램 경고 메시지 처리부분 DB -> S]
		DBMessageMap( DBMSG_RESPONSE_AUTOMACRO, DoMsg_DBMSG_RESPONSE_AUTOMACRO);

		//명예의 전당 리스트 페이지 [손성웅]
		DBMessageMap(DBMSG_RESPONSE_HOFLIST, DoMsg_DBMSG_RESPONSE_HOFLIST);
		//랭킹리스트 페이지 
		DBMessageMap(DBMSG_RESPONSE_YEARRANKING, DoMsg_DBMSG_RESPONSE_RANKINGLIST);
		//***************************************************************************************************
		// [추가 : 황진성 2008. 1. 30 => 공간 상자.]

		//[추가 : 황진성 2008. 1. 30 => 공간 상자(보물)에 저장. DB->S]
		DBMessageMap(DBMSG_RESPONSE_KEEP_SPACE_BOX_MOVE_ITEM,	DoMsg_DBMSG_RESPONSE_KEEP_SPACE_BOX_MOVE_ITEM);
		
		//[추가 : 황진성 2008. 1. 30 => 공간 상자(보물)에 회수.DB->S]
		DBMessageMap(DBMSG_RESPONSE_RECOVERY_SPACE_BOX_MOVE_ITEM, DoMsg_DBMSG_RESPONSE_RECOVERY_SPACE_BOX_MOVE_ITEM);

		//[추가 : 황진성 2008. 1. 30 => 공간 상자에 아이템 리스트. DB->S]
		DBMessageMap(DBMSG_RESPONSE_SPACE_BOX_ITEM_LIST, DoMsg_DBMSG_RESPONSE_SPACE_BOX_ITEM_LIST);
		//***************************************************************************************************
		//------------------------------------------------------------------------
		//	[추가 : 황진성 2008. 2. 28 => 아티펙트 DB 메시지 처리 함수 맵핑.]
        //------------------------------------------------------------------------
		DBMessageMap( DBMSG_RESPONSE_ARTIFACT_INVENTORYLIST,	DoMsg_DBMSG_RESPONSE_ARTIFACT_INVENTORYLIST );
		DBMessageMap( DBMSG_RESPONSE_ARTIFACT_SAVEINVENTORY,	DoMsg_DBMSG_RESPONSE_ARTIFACT_SAVEINVENTORY );
		DBMessageMap( DBMSG_RESPONSE_ARTIFACT_MOVEITEMSTGTOINV,	DoMsg_DBMSG_RESPONSE_ARTIFACT_MOVEITEMSTGTOINV );
		DBMessageMap( DBMSG_RESPONSE_ARTIFACT_MIXTURE,			DoMsg_DBMSG_RESPONSE_ARTIFACT_MIXTURE );
		DBMessageMap( DBMSG_RESPONSE_ARTIFACT_REMOVE,			DoMsg_DBMSG_RESPONSE_ARTIFACT_REMOVE );
		DBMessageMap( DBMSG_RESPONSE_ARTIFACT_SLOT_CREATE,		DoMsg_DBMSG_RESPONSE_ARTIFACT_SLOT_CREATE );		
		//***************************************************************************************************
		//**************************************************************************************************
		// 케릭터 옵션변경
		DBMessageMap(DBMSG_RESPONSE_CHAR_OPTION, DoMsg_DBMSG_RESPONSE_CHAR_OPTION);		
		DBMessageMap(DBMSG_RESPONSE_CHAR_GET_OPTION, DoMsg_DBMSG_RESPONSE_CHAR_GET_OPTION);
		//**************************************************************************************************
		
		//[진성] 서버 이벤트 메시지 (DB->S) => 2008-6-20 
		DBMessageMap(DBMSG_RESPONSE_SERVER_EVENT_RANK_INFO,			DoMsg_DBMSG_RESPONSE_SERVER_EVENT_RANK_INFO);		
		DBMessageMap(DBMSG_RESPONSE_SERVER_EVENT_SERVER_INFO,		DoMsg_DBMSG_RESPONSE_SERVER_EVENT_SERVER_INFO);
		DBMessageMap(DBMSG_RESPONSE_SERVER_EVENT_DAILY_SERVER_INFO,	DoMsg_DBMSG_RESPONSE_SERVER_EVENT_DAILY_SERVER_INFO);
		DBMessageMap(DBMSG_RESPONSE_SERVER_EVENT_PERSONAL_INFO,		DoMsg_DBMSG_RESPONSE_SERVER_EVENT_PERSONAL_INFO);
		DBMessageMap(DBMSG_RESPONSE_SERVER_EVENT_SERVER_BUF_KIND,	DoMsg_DBMSG_RESPONSE_SERVER_EVENT_SERVER_BUF_KIND);
		

		DBMessageMap(DBMSG_RESPONSE_SERVER_EVENT_QUEST_INFO_SET,	DoMsg_DBMSG_RESPONSE_SERVER_EVENT_QUEST_INFO_SET);
		DBMessageMap(DBMSG_RESPONSE_SERVER_EVENT_QUEST_INFO_GET,	DoMsg_DBMSG_RESPONSE_SERVER_EVENT_QUEST_INFO_GET);
		DBMessageMap(DBMSG_RESPONSE_SERVER_EVENT_PERSON_SCORE_GET,	DoMsg_DBMSG_RESPONSE_SERVER_EVENT_PERSON_SCORE_GET);

		// 소환수 무기 장착창 리스폰스
		DBMessageMap(DBMSG_RESPONSE_SUMMONUSESTON,	DoMsg_DBMSG_RESPONSE_SUMMONUSESTON);

		// PCK : 스폐셜 퀘스트 완료(로그용)
		DBMessageMap(DBMSG_RESPONSE_SETSPECIALQUEST_CHANGE, DoMsg_DBMSG_RESPONSE_SETSPECIALQUESTCHANGE);

		// PCK : 네이밍 퀘스트 완료(로그용)
		DBMessageMap(DBMSG_RESPONSE_SETNAMINGQUESTINFO, DoMsg_DBMSG_RESPONSE_SETNAMINGQUESTINFO);

		// Base에 있는 소환수를 SLot에 넣는다.
		DBMessageMap( DBMSG_RESPONSE_SUMMONSLOTIN, DoMsg_DBMSG_RESPONSE_SUMMON_SLOTIN);

		//  소환수를 SLot에서 빼낸다..
		DBMessageMap( DBMSG_RESPONSE_SUMMONSLOTOUT, DoMsg_DBMSG_RESPONSE_SUMMON_SLOTOUT);

		// PCK : 관청입출금 내역 (로그용)
		DBMessageMap( DBMSG_RESPONSE_CITYHALL_SETINOUTMONEY, DoMsg_DBMSG_RESPONSE_CITYHALL_SETINOUTMONEY);

		// PCK : 마을주민에게 아이템 지급 (로그용)
		DBMessageMap( DBMSG_RESPONSE_GIVEVILLAGEITEM, DoMsg_DBMSG_RESPONSE_GIVEVILLAGEITEM);

		// PCK : 캐릭터 보너스 수치 상태변경 (로그용)
		DBMessageMap( DBMSG_RESPONSE_SETBONUSINFO, DoMsg_DBMSG_RESPONSE_SETBONUSINFO);

		//[진성] 호박상자 선택 가능한 아이템 리스트. 클릭 후 저장된 아이템.  
		DBMessageMap( DBMSG_RESPONSE_AMBER_BOX_SELECT_ITEM_LIST, DoMsg_DBMSG_RESPONSE_AMBER_BOX_SELECT_ITEM_LIST);
		DBMessageMap( DBMSG_RESPONSE_AMBER_BOX_SELECT_ITEM_GET,  DoMsg_DBMSG_RESPONSE_AMBER_BOX_SELECT_ITEM_GET);

		// PCK : 마을 가입후 플레이시간 보기 (로그용)
		DBMessageMap( DBMSG_RESPONSE_VILLAGEJOINPLAYTIME,			DoMsg_DBMSG_RESPONSE_VILLAGEJOINPLAYTIME);

		// PCK : 마을 가입후 레벨업 횟수 (로그용)
		DBMessageMap( DBMSG_RESPONSE_VILLAGEJOINLEVELUP,			DoMsg_DBMSG_RESPONSE_VILLAGEJOINLEVELUP);

		// PCK : 마을 가입후 아이템 제조 경험치 (로그용)
		DBMessageMap(DBMSG_RESPONSE_VILLAGEJOINMAKEITEM,			DoMsg_DBMSG_RESPONSE_VILLAGEJOINMAKEITEM);

		// [영훈] PVP 무한대전 정보
		DBMessageMap(DBMSG_RESPONSE_PVP_LEAGUE_INFOGET,				DoMsg_DBMSG_RESPONSE_PVP_LEAGUE_INFOGET);
		DBMessageMap(DBMSG_RESPONSE_PVP_LEAGUE_UI_INFOGET,			DoMsg_DBMSG_RESPONSE_PVP_LEAGUE_UI_INFOGET);
		// [성웅] pvp 무한대전 정보
		DBMessageMap(DBMSG_RESPONSE_PVP_LEAGUE_BATTLE_END,			DoMsg_DBMSG_RESPONSE_PVP_LEAGUE_BATTLE_END);
		// [강형] 채팅블록
		DBMessageMap(DBMSG_RESPONSE_SETMUTETIME,					DoMsg_DBMSG_RESPONSE_SETMUTETIME);
		DBMessageMap(DBMSG_RESPONSE_GETMUTETIME,					DoMsg_DBMSG_RESPONSE_GETMUTETIME);
		
		DBMessageMap(DBMSG_RESPONSE_PVP_LEAGUE_BATTLE_CHANGEGRADE,	DoMsg_DBMSG_RESPONSE_PVP_LEAGUE_BATTLE_CHANGEGRADE );

		// 도우미
		//[진성] 도우미
		DBMessageMap(DBMSG_RESPONSE_QUESTION_DAILY_COUNT_DEL,		DoMsg_DBMSG_RESPONSE_QUESTION_DAILY_COUNT_DEL);
		DBMessageMap(DBMSG_RESPONSE_QUESTION_DAILY_COUNT_SET,		DoMsg_DBMSG_RESPONSE_QUESTION_DAILY_COUNT_SET);
		DBMessageMap(DBMSG_RESPONSE_QUESTION_DAILY_COUNT_GET,		DoMsg_DBMSG_RESPONSE_QUESTION_DAILY_COUNT_GET);
		// [성웅] 발렌타인데이 정보 업데이트
		DBMessageMap(DBMSG_RESPONSE_VALANTINE_INFO_GET,				DoMsg_DBMSG_RESPONSE_VALENTINEWAR_INFO_GET);
		// [성웅] 발렌타인데이 커플 정보 선택
		DBMessageMap(DBMSG_RESPONSE_VALANTINE_REQUEST,				DoMsg_DBMSG_RESPONSE_VALENTINEWAR_REQUEST);
		// [성웅] 발렌타인데이 전투 아이템을 받았다.
		DBMessageMap(DBMSG_RESPONSE_VALANTINE_GET_PRIZE,			DoMsg_DBMSG_RESPONSE_VALENTINEWAR_GET_PRIZE);
		//[진성] 엘릭서
		DBMessageMap(DBMSG_RESPONSE_ELIXIR_SET,						DoMsg_DBMSG_RESPONSE_ELIXIR_SET);
		DBMessageMap(DBMSG_RESPONSE_ELIXIR_GET,						DoMsg_DBMSG_RESPONSE_ELIXIR_GET);

		//[진성] 프로모터 
		DBMessageMap(DBMSG_RESPONSE_PROMOTER_INFO_GET,				DoMsg_DBMSG_RESPONSE_PROMOTER_INFO_GET);
		
		// [영훈] 새로운 선택상자 아이템 받기
		DBMessageMap(DBMSG_RESPONSE_NEWSELECTBOX_ITEM_GET,			DoMsg_DBMSG_RESPONSE_NEWSELECTBOX_ITEM_GET);

		//[진성] 통합마켓.
		DBMessageMap(DBMSG_RESPONSE_NEWMARKETACCOUNT,				DoMsg_DBMSG_RESPONSE_NEWMARKETACCOUNT);
		DBMessageMap(DBMSG_RESPONSE_NEWMARKETITEMLIST,				DoMsg_DBMSG_RESPONSE_NEWMARKETITEMLIST);
		DBMessageMap(DBMSG_RESPONSE_NEWORDERMARKET,					DoMsg_DBMSG_RESPONSE_NEWORDERMARKET);
		DBMessageMap(DBMSG_RESPONSE_NEWTRADEMARKET,					DoMsg_DBMSG_RESPONSE_NEWTRADEMARKET);
		DBMessageMap(DBMSG_RESPONSE_GETITEMFROMNEWMARKET,			DoMsg_DBMSG_RESPONSE_GETFROMNEWMARKET);
		DBMessageMap(DBMSG_RESPONSE_SETNEWMARKETFEE,				DoMsg_DBMSG_RESPONSE_SETNEWMARKETFEE);
		DBMessageMap(DBMSG_RESPONSE_NEWMARKETRESULT,				DoMsg_DBMSG_RESPONSE_NEWMARKETRESULT);
		DBMessageMap(DBMSG_RESPONSE_NEWMARKET_SETITEMPRICE,			DoMsg_DBMSG_RESPONSE_NEWMARKET_SETITEMPRICE);
		DBMessageMap(DBMSG_RESPONSE_NEWMARKET_INCREASEBANKMONEY,	DoMsg_DBMSG_RESPONSE_NEWMARKET_INCREASEBANKMONEY);
		DBMessageMap(DBMSG_RESPONSE_NEWMARKETREDUCEPRICENOTICE,		DoMsg_DBMSG_RESPONSE_NEWMARKETREDUCEPRICENOTICE);
		DBMessageMap(DBMSG_RESPONSE_ITEMMAKERNAMENEW,				DoMsg_DBMSG_RESPONSE_ITEMMAKERNAMENEW);
		DBMessageMap(DBMSG_RESPONSE_MANYITEMNEWPRICE,				DoMsg_DBMSG_RESPONSE_MANYITEMNEWPRICE);

		// [진성] 중국 핸드폰 인증과 추천인 정보 얻기
		DBMessageMap(DBMSG_RESPONSE_CELLULAR_PHONE_AUTH,			DoMsg_DBMSG_RESPONSE_CELLULAR_PHONE_AUTH);

		// [영훈] 결혼시스템
		DBMessageMap(DBMSG_RESPONSE_SET_MARRY,						DoMsg_DBMSG_DBMSG_RESPONSE_SET_MARRY);	// 결혼했다
		DBMessageMap(DBMSG_RESPONSE_GET_MARRY_INFO,					DoMsg_DBMSG_RESPONSE_GET_MARRY_INFO);	// 결혼정보를 얻는다
		DBMessageMap(DBMSG_RESPONSE_MARRY_ITEMGET_SET,				DoMsg_DBMSG_RESPONSE_MARRY_ITEMGET_SET);
		DBMessageMap(DBMSG_RESPONSE_MARRY_LOVE_SET,					DoMsg_DBMSG_RESPONSE_MARRY_LOVE_SET);

		DBMessageMap(DBMSG_RESPONSE_WEDDING_RESERVE_LIST_GET,		DoMsg_DBMSG_RESPONSE_WEDDING_RESERVE_LIST_GET);
		DBMessageMap(DBMSG_RESPONSE_WEDDING_RESERVE,				DoMsg_DBMSG_RESPONSE_WEDDING_RESERVE);
		DBMessageMap(DBMSG_RESPONSE_WEDDING_RESERVE_CANCEL,			DoMsg_DBMSG_RESPONSE_WEDDING_RESERVE_CANCEL);

		// 가족 시스템
		DBMessageMap(DBMSG_RESPONSE_GET_FAMILYINFO,					DoMsg_DBMSG_RESPONSE_GET_FAMILYINFO);	// 결혼정보를 얻는다
		DBMessageMap(DBMSG_RESPONSE_FAMILY_ADD_CHILDREN,			DoMsg_DBMSG_RESPONSE_FAMILY_ADD_CHILDREN);	// 자식추가
		DBMessageMap(DBMSG_RESPONSE_FAMILY_DEL_CHILDREN,			DoMsg_DBMSG_RESPONSE_FAMILY_DEL_CHILDREN);	// 자식삭제
		DBMessageMap(DBMSG_RESPONSE_FAMILY_PLUS_ADD_DATE,			DoMsg_DBMSG_RESPONSE_FAMILY_PLUS_ADD_DATE);	// 가족효과연장
		DBMessageMap(DBMSG_RESPONSE_FAMILY_SET_COOKIE_EFFECT,		DoMsg_DBMSG_RESPONSE_FAMILY__SET_COOKIE_EFFECT);	// 쿠키를 사용했다.
		
		//	[종호] 통화량 조절 - 잔여통화량 저장	
		DBMessageMap(DBMSG_RESPONSE_SETBALANCECANUSECURRENCY,		DoMsg_DBMSG_RESPONSE_SETBALANCECANUSECURRENCY);
		DBMessageMap(DBMSG_RESPONSE_GETBALANCECANUSECURRENCY,		DoMsg_DBMSG_RESPONSE_GETBALANCECANUSECURRENCY);

		// [영훈] 수호정령
		DBMessageMap(DBMSG_RESPONSE_SOULGUARD_CREATE,				DoMsg_DBMSG_RESPONSE_SOULGUARD_CREATE);
		DBMessageMap(DBMSG_RESPONSE_SOULGUARD_GET,					DoMsg_DBMSG_RESPONSE_SOULGUARD_GET);
		DBMessageMap(DBMSG_RESPONSE_SOULGUARD_FELLOWSHIP_SET,		DoMsg_DBMSG_RESPONSE_SOULGUARD_FELLOWSHIP_SET);
		DBMessageMap(DBMSG_RESPONSE_SOULGUARD_CHANGE_NAME,			DoMsg_DBMSG_RESPONSE_SOULGUARD_CHANGE_NAME);
		DBMessageMap(DBMSG_RESPONSE_SOULGUARD_DEAD,					DoMsg_DBMSG_RESPONSE_SOULGUARD_DEAD);

		DBMessageMap(DBMSG_RESPONSE_SOULGUARD_HOUSE_GET,			DoMsg_DBMSG_RESPONSE_SOULGUARD_HOUSE_GET);
		DBMessageMap(DBMSG_RESPONSE_SOULGUARD_HOUSE_CHANGE,			DoMsg_DBMSG_RESPONSE_SOULGUARD_HOUSE_CHANGE);
		DBMessageMap(DBMSG_RESPONSE_SOULGUARD_HOUSE_CREATE,			DoMsg_DBMSG_RESPONSE_SOULGUARD_HOUSE_CREATE);
		
		// [기형] 휴면 계정 시스템
		DBMessageMap(DBMSG_RESPONSE_DORMANCY_POINTITEM_BUY,			DoMsg_DBMSG_RESPONSE_DORMANCY_POINTITEM_BUY);
		DBMessageMap(DBMSG_RESPONSE_DORMANCY_POINTINFO_SET,			DoMsg_DBMSG_RESPONSE_DORMANCY_POINTINFO_SET);
		DBMessageMap(DBMSG_RESPONSE_DORMANCY_STATE_CHANGE,			DoMsg_DBMSG_RESPONSE_DORMANCY_STATE_CHANGE);

		// [영훈] 캐릭터 보관소
		DBMessageMap(DBMSG_RESPONSE_PERSONSLOTNUMCHANGE,			DoMsg_DBMSG_RESPONSE_PERSONSLOTNUMCHANGE);

		// [성웅] 라쿤이벤트 군주 이벤트로 변경
		DBMessageMap(DBMSG_RESPONSE_GOONZURACCOONEVENT_SETINFO,		DoMsg_DBMSG_RESPONSE_GOONZURACCOONEVENT_SETINFO);
		DBMessageMap(DBMSG_RESPONSE_GOONZURACCOONEVENT_GETINFO,		DoMsg_DBMSG_RESPONSE_GOONZURACCOONEVENT_GETINFO);

		// [진성] 스킬북
		DBMessageMap(DBMSG_RESPONSE_SKILLBOOK_MAGICINFO_GET,		DoMsg_DBMSG_RESPONSE_SKILLBOOK_MAGICINFO_GET);
		DBMessageMap(DBMSG_RESPONSE_SKILLBOOK_MAGIC_ADD,			DoMsg_DBMSG_RESPONSE_SKILLBOOK_MAGIC_ADD);
		DBMessageMap(DBMSG_RESPONSE_SKILLBOOK_MAGIC_DEL,			DoMsg_DBMSG_RESPONSE_SKILLBOOK_MAGIC_DEL);
		DBMessageMap(DBMSG_RESPONSE_SKILLBOOK_SUBMAGIC_ADD,			DoMsg_DBMSG_RESPONSE_SKILLBOOK_SUBMAGIC_ADD);
		DBMessageMap(DBMSG_RESPONSE_SKILLBOOK_SUBMAGIC_DEL,			DoMsg_DBMSG_RESPONSE_SKILLBOOK_SUBMAGIC_DEL);

		// [지연] 복불복
		DBMessageMap(DBMSG_RESPONSE_BBB_SET_REWARD_MONEY,			DoMsg_DBMSG_RESPONSE_BBB_SET_REWARDMONEY);
		DBMessageMap(DBMSG_RESPONSE_BBB_GET_REWARD_MONEY,			DoMsg_DBMSG_RESPONSE_BBB_GET_REWARD_MONEY);

		// [지연] 군주데이미션 : 미션 부여 여부에 대한 디비의 응답
		DBMessageMap(DBMSG_RESPONSE_GOONZUDAYMISSIONINFO_GET,		DoMsg_DBMSG_RESPONSE_GOONZUDAYMISSIONINFO_GET);

		// [진성] 아이템 기부하기.
		DBMessageMap(DBMSG_RESPONSE_CONTRIBUTION_ITEM_LIST_INPUT,	DoMsg_DBMSG_RESPONSE_CONTRIBUTION_ITEM_LIST_INPUT);
		DBMessageMap(DBMSG_RESPONSE_CONTRIBUTION_MAKE_NPC,			DoMsg_DBMSG_RESPONSE_CONTRIBUTION_MAKE_NPC);
	}
}

// 각 지도으 타입을 불러온다. 
bool cltServer::RequestMapTypeFromDB()
{
	if(bGetMapTypeInfoSwitch == true)return true;

	if(pclGameDBProcess == NULL)return false;
	if(pclGameDBProcess->IsEstablished() == FALSE )return false;

	// 시간을 요청한다. 
	if(bMapTypeInfoRequestSwitch == false)
	{
		bMapTypeInfoRequestSwitch = true;

		sDBRequest_MapTypeInfo clMsg;
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsg);
	}

	return false;

}


// 게임 시간을 얻어온다. 
// 게임 시간을 얻어오기 전까지는 서버는 동작하지 않는다. 
bool cltServer::RequestGameTimeFromDB()
{
	if(bGetTimeSwitch	== true)return true;

	if(pclGameDBProcess == NULL)return false;
	if(pclGameDBProcess->IsEstablished() == FALSE )return false;

	// 시간을 요청한다. 
	if(bGameTimeRequestSwitch == false)
	{
		bGameTimeRequestSwitch = true;

		// 게임이 시작됨을 DB로 알린다.
		{
			sDBRequest_StartGame clMsg;
			pclGameDBProcess->SendMsg((sPacketHeader *)&clMsg);
		}

		sDBRequest_GetTime clMsg;
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsg);
	}

	return false;
}

// 서버의 최초 작동시 DB로부터 값을 얻어온다. 
bool cltServer::InitializeDB1()
{
	SI32 i, j;

	if(pclGameDBProcess == NULL)return false;


	// 게임 시작시 필요한 정보를 요청
	{
		sDBRequest_DBStartInfo clMsg;
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsg);
		pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_DBStartInfo"));
	}


	for(i = 1;i < MAX_VILLAGE_NUMBER;i++)
	{
		if(pclVillageManager->pclVillageInfo[i])
		{
			// 건물 정보를 요청한다. 
			{
				sDBRequest_GetStructureInfo clMsg(0, i);
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStructureInfo"));
			}

			// 시전 임차 희망자 명단을 요청한다. 
			{
				sDBRequest_GetHouseApplyerList clMsg(0, i);
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetHouseApplyerList"));
			}

			// 단위 시전의 정보를 요청한다. 
			/*{
				sDBRequest_ManyHouseUnit clMsg(0, i);
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_ManyHouseUnit"));
			}*/

			// 시전의 종합 정보를 요청한다. 
			{
				sDBRequest_GetStrInfo clMsg(0, i, RANKTYPE_HOUSE);
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStrInfo : RANKTYPE_HOUSE"));
			}

			// 모든 전장 정보를 요청한다. 
			{
				sDBRequest_GetStrInfo clMsg(0, i, RANKTYPE_BANK);
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStrInfo : RANKTYPE_BANK"));
			}

			// 모든 객주 정보를 요청한다
			{
				sDBRequest_GetStrInfo clMsg(0, i, RANKTYPE_MARKET );
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStrInfo : RANKTYPE_MARKET"));
			}

			// 모든 여각 정보를 요청한다
			{
				sDBRequest_GetStrInfo clMsg(0, i, RANKTYPE_STOCK );
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStrInfo : RANKTYPE_STOCK"));
			}


			// 모든 상단 정보를 요청한다 
			{
				sDBRequest_GetStrInfo clMsg(0, i, RANKTYPE_CITYHALL );
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStrInfo : RANKTYPE_CITYHALL"));
			}
			// 모든 수렵장 정보를 요청한다
			{
				sDBRequest_GetStrInfo clMsg(0, i, RANKTYPE_HUNT );
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStrInfo : RANKTYPE_HUNT"));
			}

			// 모든 역참 정보를 요청한다
			{
				sDBRequest_GetStrInfo clMsg(0, i, RANKTYPE_POSTOFFICE );
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStrInfo : RANKTYPE_POSTOFFICE"));
			}

			// 모든 사복시 정보를 요청한다
			{
				sDBRequest_GetStrInfo clMsg(0, i, RANKTYPE_HORSEMARKET );
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStrInfo : RANKTYPE_HORSEMARKET"));
			}

			// 모든 거간 정보를 요청한다
			{
				sDBRequest_GetStrInfo clMsg(0, i, RANKTYPE_REALESTATEMARKET );
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStrInfo  : RANKTYPE_REALESTATEMARKET"));
			}

			// 모든 장예원 정보를 요청한다
			{
				sDBRequest_GetStrInfo clMsg(0, i, RANKTYPE_SUMMONMARKET );
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStrInfo : RANKTYPE_SUMMONMARKET"));
			}


			// 모든 농장 정보를 요청한다
			{
				sDBRequest_GetStrInfo clMsg(0, i, RANKTYPE_LAND );
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStrInfo : RANKTYPE_LAND"));
			}

			// 모든 광산 정보를 요청한다
			{
				sDBRequest_GetStrInfo clMsg(0, i, RANKTYPE_MINE );
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStrInfo : RANKTYPE_MINE"));
			}

			// 모든 내자시 정보를 요청한다
			{
				sDBRequest_GetStrInfo clMsg(0, i, RANKTYPE_FEAST );
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStrInfo : RANKTYPE_FEAST"));
			}

			// 모든 비변사 정보를 요청한다
			{
				sDBRequest_GetStrInfo clMsg(0, i, RANKTYPE_SUMMONHEROMARKET );
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStrInfo : RANKTYPE_SUMMONHEROMARKET"));
			}

			// 모든 길드 건물의 정보를 요청한다.
			{
				sDBRequest_GetStrInfo clMsg(0, i, RANKTYPE_GUILD );
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStrInfo : RANKTYPE_GUILD"));
			}

			//[진성] 모든 통합마켓 건물의 정보를 요청한다.
			{
				sDBRequest_GetStrInfo clMsg(0, i, RANKTYPE_NEWMARKET );
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStrInfo : RANKTYPE_NEWMARKET"));
			}

			// 단위 농장의 정보를 요청한다. 
			{
				sDBRequest_ManyLandUnit clMsg(0, i);
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_ManyLandUnit"));
			}

			// 단위 광산의 정보를 요청한다. 
			{
				sDBRequest_ManyMineUnit clMsg(0, i);
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_ManyMineUnit"));
			}

			// 농장 임차 희망자 명단을 요청한다. 
			{
				sDBRequest_LandApplyerList clMsg(0, i);
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_LandApplyerList"));
			}

			// 광산 임차 희망자 명단을 요청한다. 
			{
				sDBRequest_MineApplyerList clMsg(0, i);
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_MineApplyerList"));
			}


			// 마을의 주주총회 정보를 요청한다
			{
				sDBRequest_GeneralMeetingInfo clMsg( i );
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GeneralMeetingInfo"));
			}

			// 모든 마을의 투자자 정보를 요청한다. 
			sDBRequest_InvestList clMsgInvest(i);
			pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsgInvest);
			pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_InvestList"));

			// 후보자 정보를 요청한다. 
			for( j = 0; j < MAX_RANKTYPE_NUMBER; j++ )
			{
				cltSimpleRank		clRank(j, i);
				sDBRequest_ManyCandidateInfo clMsgCandidate(&clRank);
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsgCandidate);
				
			}
			pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_ManyCandidateInfo"));

			// 주민 등록 신청자 정보를 요청한다
			{
				sDBRequest_GetResidentApplyerList clMsg( 0, i );
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetResidentApplyerList"));
			}

			// 주민 정보를 요청한다 
			//{
			//	sDBRequest_GetResidentList clMsg( 0, i );
			//	pclGameDBProcess->SendMsg((sPacketHeader *)&clMsg);
			//}


			// 모든 마을의 부모마을, 선전포고 마을 정보 및 마을마크정보를 요청한다 
			{
				sDBRequest_GetVillageInfo clMsg( i );
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetVillageInfo"));

			}

			// 주식 공모 정보를 요청한다.
			{
				sDBRequest_GetStockOfferingInfo clMsg( i );
				pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
				pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStockOfferingInfo"));
			}

		}
	}
	
	// 맨 마지막으로 호출 (DB 초기화 첫번째 완료)
	for( i = 0; i < DBCONNECTION_NUMBER; ++i ) {
		sDBRequest_DBInitComplete sendMsg( i , DBINITIALIZE_STEP_1 );
		pclGameDBProcess->SendMsg((sPacketHeader *)&sendMsg);
	}
	siCurrentDBInit = DBINITIALIZE_STEP_1;

	pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_DBInitComplete STEP 1"));
	return true;
}

bool cltServer::InitializeDB2()
{
	SI32 i;

	for(i = 1;i < MAX_VILLAGE_NUMBER;i++)
	{
		if(pclVillageManager->pclVillageInfo[i])
		{
			// 단위 시전의 정보를 요청한다. 
			{
			sDBRequest_ManyHouseUnit clMsg(0, i);
			pclGameDBProcess->SendMsg( i % DBCONNECTION_NUMBER, (sPacketHeader *)&clMsg);
			pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_ManyHouseUnit"));
			}
		}
	}
	// 길드의 모든 정보를 요청한다.
	{
		sDBRequest_Guild_GetGuildInfo clMsg(true);
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsg);
		pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_Guild_GetGuildInfo"));
	}
	// 길드전 예약 정보를 요청한다.
	{
		if( IsCountrySwitch(Switch_NewGuildHuntMapWar ) )	// 변경후
		{
			for ( SI32 i=0; i<GUILDWAR_FIELDNUM_OLD; i++)
			{
				if(i >= GUILDWAR_FIELDNUM_OLD) continue	;
				sDBRequest_GuildWar_ReserveList clMsg(i);
				pclGameDBProcess->SendMsg((sPacketHeader*)&clMsg);

			}
			pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GuildWar_ReserveList"));

		}
		else
		{
			for ( SI32 i=0; i<GUILDWAR_FIELDNUM; i++)	//변경전 
			{
				if(i >= GUILDWAR_FIELDNUM) continue	;
				sDBRequest_GuildWar_ReserveList clMsg(i);
				pclGameDBProcess->SendMsg((sPacketHeader*)&clMsg);

			}
			pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GuildWar_ReserveList"));

		}
	}
	// 길드 사냥터 정보를 요청한다.
	{
		pclGuildDungeonMgr->LoadFromDB();
		pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("pclGuildDungeonMgr->LoadFromDB();"));
	}

	// 신분 정보를 요청한다.
	{
		sDBRequest_ManyRank clMsg;
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsg);
		pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_ManyRank"));
	}

	// 증자 마을 리스트를 요청한다.
	{
		cltMsg clMsg( DBMSG_REQUEST_GETSTOCKBIDVILLAGELIST, 0 );
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsg);
		pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("cltMsg clMsg( DBMSG_REQUEST_GETSTOCKBIDVILLAGELIST, 0 );"));
	}

	// 증자 마을의 입찰자 리스트를 요청한다 
	{
		for( int i = 1; i < MAX_VILLAGE_NUMBER; ++i ) {
			sDBRequest_GetStockBidderList clMsg( i );
			pclGameDBProcess->SendMsg((sPacketHeader *)&clMsg);
			pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetStockBidderList"));
		}
	}

	// 주식의 주문 정보를 요청한다. 
	for(i = 0;i < MAX_STOCK_ORDER_NUMBER;i+= GET_MANY_STOCK_ORDER_NUM)
	{
		sDBRequest_GetManyStockOrder clMsgSell(0, ORDERMODE_SELL, i);
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsgSell);
		pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetManyStockOrder :  ORDERMODE_SELL "));

		sDBRequest_GetManyStockOrder clMsgBuy( 0, ORDERMODE_BUY, i);
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsgBuy);
		pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetManyStockOrder :ORDERMODE_BUY "));
	}


	// 객주의 주문 정보를 요청한다. 
	for(i = 0;i < MAX_MARKET_ORDER_NUMBER;i+= GET_MANY_MARKET_ORDER_NUM)
	{
		sDBRequest_GetManyMarketOrder clMsgSell(0, ORDERMODE_SELL, i);
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsgSell);
	}
	pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetManyMarketOrder"));

	// 사복시의 주문 정보를 요청한다
	{
		sDBRequest_HorseMarketGetManyOrder clMsg;
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsg);
		pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_HorseMarketGetManyOrder"));
	}

	// 거간의 주문 정보를 요청한다
	{
		sDBRequest_RealEstateMarketGetManyOrder clMsg;
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsg);
		pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_RealEstateMarketGetManyOrder"));
	}

	// 장예원의 주문 정보를 요청한다 
	{
		sDBRequest_SummonMarketGetManyOrder clMsg;
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsg);
		pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_SummonMarketGetManyOrder"));
	}

	// 비변사의 주문 정보를 요청한다 
	{
		sDBRequest_SummonHeroMarketGetManyOrder clMsg;
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsg);
		pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_SummonHeroMarketGetManyOrder"));
	}	


	// 아이템 가격 정보를 요청한다. 
	{
		sDBRequest_ManyItemPrice clMsgItemPrice;
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsgItemPrice);
		pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_ManyItemPrice"));
	}

	// 주가정보를 요청한다. 
	{
		sDBRequest_ManyStockPrice clMsgStockPrice;
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsgStockPrice);
		pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_ManyStockPrice"));
	}


	// 아큐 거래소의 정보를 요청한다.

	for ( i = 0 ; i < MAX_WORLDMONEY_TRADELIST_NUM ; i+= MAX_WORLDMONEY_TRADELIST_PER_SEND )
	{
		sDBRequest_WorldMoney_TradeList clMsgDep(i);
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsgDep);
	}
	pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_WorldMoney_TradeList"));

	// 육조판서의 정보를 요청한다.
	pclMinisterMgr->InitializeDB();
	pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("pclMinisterMgr->InitializeDB();"));


	// 통계정보를 요청한다
	{
		sDBRequest_InitStatistics clMsg;
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsg);
		pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_InitStatistics"));
	}

	// 전쟁 순위 정보를 요청한다
	{
		for( int i = 0; i < MAX_BLACKARMY_MAP_CNT; ++i ) {
			sDBRequest_GetWarRankInfo clMsg( i );
			pclGameDBProcess->SendMsg((sPacketHeader *)&clMsg);
		}
		pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetWarRankInfo"));
	}

	// 모후모후 이벤트 예약 리스트를 요청한다.
	SYSTEMTIME Cur;
	GetLocalTime(&Cur);
	Cur.wMinute = 0;
	Cur.wSecond = 0;
	Cur.wMilliseconds = 0;

	sDBRequest_MofuMofuEvent_ReserveList clMsg( Cur );
	pclGameDBProcess->SendMsg((sPacketHeader *)&clMsg);
	pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_MofuMofuEvent_ReserveList"));

	SI32 Request_Page = 1; //최신정보는 1페이지니까. 
	// 인스턴스 던젼의 최고길드 정보를 요청한다.
	sDBRequest_YearRanking clCurYearMsg(0, INSTANCEMAPPOINT_TYPE_GUILD, pclTime->clDate.uiYear, false, Request_Page);
	pclGameDBProcess->SendMsg((sPacketHeader *)&clCurYearMsg);
	pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_YearRanking : clCurYearMsg"));

	sDBRequest_YearRanking clBeforeYearMsg(0, INSTANCEMAPPOINT_TYPE_GUILD, pclTime->clDate.uiYear - 1, false, Request_Page);
	pclGameDBProcess->SendMsg((sPacketHeader *)&clBeforeYearMsg);
	pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_YearRanking : clBeforeYearMsg"));

	// DB에 저장된 제국정보를 요청한다.
	{
		sDBRequest_AllEmpireInfo clMsg;
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsg);
		pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_AllEmpireInfo"));
	}

	//[진성] 파티홀. 파티장 예약자 리스트 전체를 요청. => 2008-3-23
	sDBRequest_PartyHall_ReserveList clPartyHallMsg( Cur );
	pclGameDBProcess->SendMsg((sPacketHeader *)&clPartyHallMsg);
	pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_PartyHall_ReserveList"));

	//[진성] 파티홀. 파티홀의 장식물 전체 요청. => 2008-3-23
	sDBRequest_PartyHall_Decoration_List clPartyHallDecorationMsg;
	pclGameDBProcess->SendMsg((sPacketHeader *)&clPartyHallDecorationMsg);
	pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_PartyHall_Decoration_List"));

	//KHY - 0530 명나라 상인 구매제한.
	sDBRequest_GetForeignMerchantBuyLimit GetForeignMerchantBuyLimitMsg;
	pclGameDBProcess->SendMsg((sPacketHeader *)&GetForeignMerchantBuyLimitMsg);
	pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetForeignMerchantBuyLimit"));

	sDBRequest_GetForeignMerchantNowMoney GetForeignMerchantNowMoney;
	pclGameDBProcess->SendMsg((sPacketHeader *)&GetForeignMerchantNowMoney);
	pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetForeignMerchantNowMoney"));

	// KHY - 0901 -  과금 아이템 자동구매 설정.
	sDBRequest_GetSystemBuyItemNowMoney GetSystemBuyItemNowMoney;
	pclGameDBProcess->SendMsg((sPacketHeader *)&GetSystemBuyItemNowMoney);
	pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_GetSystemBuyItemNowMoney"));

	// 복불복
	sDBRequest_BBB_Get_RewardMoney Get_BBB_RewardMoney(0);
	pclGameDBProcess->SendMsg((sPacketHeader*)&Get_BBB_RewardMoney);
	pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_BBB_Get_RewardMoney"));

	
	// 계산된 통화량을 요청한다.
	sDBRequest_DBSystemInfo clMsgReq( 0, 0, DBSYSTEMINFO_GET_TOTALMONEY,sTime);
	pclGameDBProcess->SendMsg( DBSELECT_SYSTEM, (sPacketHeader *)&clMsgReq);		


	if(IsCountrySwitch(Switch_BalanceCurrency))
	{
		// 계산된 통화량을 요청한다.
		sDBRequest_DBSystemInfo clMsgReq2( 0, 0, DBSYSTEMINFO_GET_TOTALMONEY_YESTERDAY,sTime);
		pclGameDBProcess->SendMsg( DBSELECT_SYSTEM, (sPacketHeader *)&clMsgReq2);		

		// 잔여 통화량을 요청한다.
		sDBRequest_GetBalanceCanUseCurrency clMsgReq3;
		pclGameDBProcess->SendMsg( DBSELECT_SYSTEM, (sPacketHeader *)&clMsgReq3);		

		//sDBRequest_SetBalanceCanUseCurrency clMsgReq3(8000000000);
		//pclGameDBProcess->SendMsg( DBSELECT_SYSTEM, (sPacketHeader *)&clMsgReq3);		

		//m_pclBalanceCurrencyMgr->SetCanUserMoney(8000000000);
	}

	// 서버 이벤트 중이면.
	if(IsCountrySwitch(Switch_Server_Event))
	{
		pclClient->pclServerEventManager->SendDBMsgServerEventRequest();
	}

	if( pclClient->IsCountrySwitch( Switch_NewMarket ) )
	{
		// 통합 마켓 아이템 시세 얻기.
		sDBRequest_ManyItemNewPrice clMsg( 0, &sTime );
		pclClient->SendDBMsg( DBSELECT_SUB, (sPacketHeader *)&clMsg);
	}
	if( pclClient->IsCountrySwitch( Switch_RaccoonEvent_Change_Goonzu ) )
	{
		//[성웅] 라쿤이벤트 군주 이벤트로 변경
		sDBRequest_GoonzuRaccoonEvent_GetInfo clMsg;
		pclGameDBProcess->SendMsg((sPacketHeader *)&clMsg);
	}
	// 맨 마지막으로 호출 (DB초기화 완료)
	for( i = 0; i < DBCONNECTION_NUMBER; ++i ) {
		sDBRequest_DBInitComplete sendMsg( i , DBINITIALIZE_STEP_2 );
		pclGameDBProcess->SendMsg((sPacketHeader *)&sendMsg);
	}
	siCurrentDBInit = DBINITIALIZE_STEP_2;
	pclClient->pclserverinfoDlg->OnServerInfoDialog(TEXT("sDBRequest_DBInitComplete STEP 2"));

	return true;
}

void cltServer::DoDBMsg(sPacketHeader* pPacket)
{
	// DB와의 교신 시간을 업데이트 한다. 
	dwLastDBClock	= CurrentClock;

	// DB로부터 받은 메시지의 양을 합계한다. 
	if(pclStatisticsManager)
	{
		pclStatisticsManager->clDailyStatistics.siReceiveFromDBMsgNumber++;
	}

	//NStatistics_Add("DBNetMessage", pPacket->usCmd, "RecvCount", 1);
	//NStatistics_Add("DBNetMessage", pPacket->usCmd, "RecvSize", pPacket->usSize);

	WRITE_MEMLOG( WRITELOG_DBMSG, pPacket->usCmd, 0, 0 );

	if(pPacket->usCmd >= 0 && pPacket->usCmd < DBMSG_END)
	{
		(this->*(this->m_pDBMsgPtr[pPacket->usCmd].DBMsgFunc))(pPacket);
	}
	else
	{
		DBMsgNullFunc(pPacket);
	}
}

void cltServer::DBMsgNullFunc(sPacketHeader* pPacket)
{
	//pclLog->FilePrint(TEXT("Config\\ErrorLog.log"), TEXT("DBErr:Msg:%d Size:%d"), pPacket->usCmd, pPacket->usSize);
}


void cltServer::DoDBMsg2(sPacketHeader* pPacket)
{

	WRITE_MEMLOG( WRITELOG_DBMSG2, pPacket->usCmd, 0, 0 );

	switch( pPacket->usCmd ) {
	case DBMSG_RESPONSE_NEWS:
		DoMsg_DBMSG_RESPONSE_NEWS( pPacket );
		break;

	}
}

void cltServer::DoLogMsg(sPacketHeader* pPacket)
{

	WRITE_MEMLOG( WRITELOG_DBLOG, pPacket->usCmd, 0, 0 );

	switch(pPacket->usCmd)
	{
	case DBLOGMSG_RESPONSE_PERSONAL_LOG:
		DoMsg_DBLOGMSG_RESPONSE_PERSONAL_LOG(pPacket);
		break;
	default:
		{
			pclLog->FilePrint(TEXT("Config\\ErrorLog.log"), TEXT("LogDBErr:Msg:%d Size:%d"), pPacket->usCmd, pPacket->usSize);
		}
		break;
	}
}
