// This file, generated by XDR Compiler for C++ version 1.0.2220. Release: Feb 17 2006. 16:36:02.

#ifndef __XDR_XNotiAppMessage__
#define __XDR_XNotiAppMessage__

#include <XDR.h>

#ifndef __XDR_MESSAGE_XNotiNormalAppMessageReq_154014938__
#define __XDR_MESSAGE_XNotiNormalAppMessageReq_154014938__
class XNotiNormalAppMessageReq : public XDR::IMessage
{
public:
    enum {tagMsgID = 154014938};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 m_nSeq;
    int32 m_nFunctionType;
    int32 m_nTimeType;
    int32 m_nPersistantTime;
    int32 m_nIntervalDisplay;
    int32 m_nStartDisplayTime;
    int32 m_nEndDisplayTime;
    std::string m_strContent;

public:
    XNotiNormalAppMessageReq(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        m_nSeq = 0;
        m_nFunctionType = 0;
        m_nTimeType = 0;
        m_nPersistantTime = 0;
        m_nIntervalDisplay = 0;
        m_nStartDisplayTime = 0;
        m_nEndDisplayTime = 0;
    }
    virtual ~XNotiNormalAppMessageReq(void)
    {
    }

    virtual void Clear(void)
    {
        m_nSeq = 0;
        m_nFunctionType = 0;
        m_nTimeType = 0;
        m_nPersistantTime = 0;
        m_nIntervalDisplay = 0;
        m_nStartDisplayTime = 0;
        m_nEndDisplayTime = 0;
        m_strContent.resize(0);
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "XNotiNormalAppMessageReq";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&m_nSeq);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&m_nSeq);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&m_nFunctionType);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&m_nFunctionType);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&m_nTimeType);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&m_nTimeType);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&m_nPersistantTime);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&m_nPersistantTime);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&m_nIntervalDisplay);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&m_nIntervalDisplay);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&m_nStartDisplayTime);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&m_nStartDisplayTime);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&m_nEndDisplayTime);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&m_nEndDisplayTime);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&m_strContent);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&m_strContent);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_nSeq
        if (XDR::EncodingRules::Save(hStream, &m_nSeq) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_nSeq
        if (XDR::EncodingRules::Save(hStream, &m_nSeq) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_nFunctionType
        if (XDR::EncodingRules::Save(hStream, &m_nFunctionType) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_nFunctionType
        if (XDR::EncodingRules::Save(hStream, &m_nFunctionType) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_nTimeType
        if (XDR::EncodingRules::Save(hStream, &m_nTimeType) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_nTimeType
        if (XDR::EncodingRules::Save(hStream, &m_nTimeType) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_nPersistantTime
        if (XDR::EncodingRules::Save(hStream, &m_nPersistantTime) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_nPersistantTime
        if (XDR::EncodingRules::Save(hStream, &m_nPersistantTime) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_nIntervalDisplay
        if (XDR::EncodingRules::Save(hStream, &m_nIntervalDisplay) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_nIntervalDisplay
        if (XDR::EncodingRules::Save(hStream, &m_nIntervalDisplay) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_nStartDisplayTime
        if (XDR::EncodingRules::Save(hStream, &m_nStartDisplayTime) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_nStartDisplayTime
        if (XDR::EncodingRules::Save(hStream, &m_nStartDisplayTime) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_nEndDisplayTime
        if (XDR::EncodingRules::Save(hStream, &m_nEndDisplayTime) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_nEndDisplayTime
        if (XDR::EncodingRules::Save(hStream, &m_nEndDisplayTime) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_strContent
        if (XDR::EncodingRules::Save(hStream, &m_strContent) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_strContent
        if (XDR::EncodingRules::Save(hStream, &m_strContent) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_nSeq
        if (XDR::EncodingRules::Load(hStream, &m_nSeq) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_nSeq
        if (XDR::EncodingRules::Load(hStream, &m_nSeq) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_nFunctionType
        if (XDR::EncodingRules::Load(hStream, &m_nFunctionType) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_nFunctionType
        if (XDR::EncodingRules::Load(hStream, &m_nFunctionType) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_nTimeType
        if (XDR::EncodingRules::Load(hStream, &m_nTimeType) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_nTimeType
        if (XDR::EncodingRules::Load(hStream, &m_nTimeType) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_nPersistantTime
        if (XDR::EncodingRules::Load(hStream, &m_nPersistantTime) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_nPersistantTime
        if (XDR::EncodingRules::Load(hStream, &m_nPersistantTime) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_nIntervalDisplay
        if (XDR::EncodingRules::Load(hStream, &m_nIntervalDisplay) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_nIntervalDisplay
        if (XDR::EncodingRules::Load(hStream, &m_nIntervalDisplay) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_nStartDisplayTime
        if (XDR::EncodingRules::Load(hStream, &m_nStartDisplayTime) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_nStartDisplayTime
        if (XDR::EncodingRules::Load(hStream, &m_nStartDisplayTime) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_nEndDisplayTime
        if (XDR::EncodingRules::Load(hStream, &m_nEndDisplayTime) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_nEndDisplayTime
        if (XDR::EncodingRules::Load(hStream, &m_nEndDisplayTime) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_strContent
        if (XDR::EncodingRules::Load(hStream, &m_strContent) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_strContent
        if (XDR::EncodingRules::Load(hStream, &m_strContent) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_XNotiNormalAppMessageReq_154014938__

#ifndef __XDR_MESSAGE_XNotiNormalAppMessageAns_236480970__
#define __XDR_MESSAGE_XNotiNormalAppMessageAns_236480970__
class XNotiNormalAppMessageAns : public XDR::IMessage
{
public:
    enum {tagMsgID = 236480970};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 m_nSeq;
    int32 m_nRetCode;

public:
    XNotiNormalAppMessageAns(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        m_nSeq = 0;
        m_nRetCode = 0;
    }
    virtual ~XNotiNormalAppMessageAns(void)
    {
    }

    virtual void Clear(void)
    {
        m_nSeq = 0;
        m_nRetCode = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "XNotiNormalAppMessageAns";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&m_nSeq);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&m_nSeq);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&m_nRetCode);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&m_nRetCode);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_nSeq
        if (XDR::EncodingRules::Save(hStream, &m_nSeq) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_nSeq
        if (XDR::EncodingRules::Save(hStream, &m_nSeq) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_nRetCode
        if (XDR::EncodingRules::Save(hStream, &m_nRetCode) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_nRetCode
        if (XDR::EncodingRules::Save(hStream, &m_nRetCode) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_nSeq
        if (XDR::EncodingRules::Load(hStream, &m_nSeq) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_nSeq
        if (XDR::EncodingRules::Load(hStream, &m_nSeq) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // m_nRetCode
        if (XDR::EncodingRules::Load(hStream, &m_nRetCode) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // m_nRetCode
        if (XDR::EncodingRules::Load(hStream, &m_nRetCode) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_XNotiNormalAppMessageAns_236480970__

#endif
