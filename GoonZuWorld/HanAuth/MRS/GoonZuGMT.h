// This file, generated by XDR Compiler for C++ version 1.0.2220. Release: Aug 22 2006. 12:23:51.

#ifndef __XDR_GoonZuGMT__
#define __XDR_GoonZuGMT__

#include <XDR/XDR.h>

#ifndef __XDR_MESSAGE_GMTMessageReq_K_GOONZU_84613898__
#define __XDR_MESSAGE_GMTMessageReq_K_GOONZU_84613898__
class GMTMessageReq_K_GOONZU : public XDR::IMessage
{
public:
    enum {tagMsgID = 84613898};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    std::string strMessage;
    int32 nContinueTime;

public:
    GMTMessageReq_K_GOONZU(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        nContinueTime = 0;
    }
    virtual ~GMTMessageReq_K_GOONZU(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        strMessage.resize(0);
        nContinueTime = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "GMTMessageReq_K_GOONZU";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&strMessage);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&strMessage);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nContinueTime);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nContinueTime);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // strMessage
        if (XDR::EncodingRules::Save(hStream, &strMessage) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // strMessage
        if (XDR::EncodingRules::Save(hStream, &strMessage) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nContinueTime
        if (XDR::EncodingRules::Save(hStream, &nContinueTime) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nContinueTime
        if (XDR::EncodingRules::Save(hStream, &nContinueTime) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // strMessage
        if (XDR::EncodingRules::Load(hStream, &strMessage) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // strMessage
        if (XDR::EncodingRules::Load(hStream, &strMessage) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nContinueTime
        if (XDR::EncodingRules::Load(hStream, &nContinueTime) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nContinueTime
        if (XDR::EncodingRules::Load(hStream, &nContinueTime) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_GMTMessageReq_K_GOONZU_84613898__

#ifndef __XDR_MESSAGE_GMTMessageAns_K_GOONZU_192424746__
#define __XDR_MESSAGE_GMTMessageAns_K_GOONZU_192424746__
class GMTMessageAns_K_GOONZU : public XDR::IMessage
{
public:
    enum {tagMsgID = 192424746};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    int32 nErrCode;

public:
    GMTMessageAns_K_GOONZU(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        nErrCode = 0;
    }
    virtual ~GMTMessageAns_K_GOONZU(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        nErrCode = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "GMTMessageAns_K_GOONZU";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nErrCode);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nErrCode);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nErrCode
        if (XDR::EncodingRules::Save(hStream, &nErrCode) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nErrCode
        if (XDR::EncodingRules::Save(hStream, &nErrCode) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nErrCode
        if (XDR::EncodingRules::Load(hStream, &nErrCode) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nErrCode
        if (XDR::EncodingRules::Load(hStream, &nErrCode) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_GMTMessageAns_K_GOONZU_192424746__

#ifndef __XDR_MESSAGE_GMTKickReq_K_GOONZU_204133530__
#define __XDR_MESSAGE_GMTKickReq_K_GOONZU_204133530__
class GMTKickReq_K_GOONZU : public XDR::IMessage
{
public:
    enum {tagMsgID = 204133530};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    std::string strPlayerName;
    std::string strTime;

public:
    GMTKickReq_K_GOONZU(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
    }
    virtual ~GMTKickReq_K_GOONZU(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        strPlayerName.resize(0);
        strTime.resize(0);
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "GMTKickReq_K_GOONZU";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&strPlayerName);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&strPlayerName);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&strTime);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&strTime);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // strPlayerName
        if (XDR::EncodingRules::Save(hStream, &strPlayerName) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // strPlayerName
        if (XDR::EncodingRules::Save(hStream, &strPlayerName) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // strTime
        if (XDR::EncodingRules::Save(hStream, &strTime) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // strTime
        if (XDR::EncodingRules::Save(hStream, &strTime) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // strPlayerName
        if (XDR::EncodingRules::Load(hStream, &strPlayerName) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // strPlayerName
        if (XDR::EncodingRules::Load(hStream, &strPlayerName) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // strTime
        if (XDR::EncodingRules::Load(hStream, &strTime) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // strTime
        if (XDR::EncodingRules::Load(hStream, &strTime) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_GMTKickReq_K_GOONZU_204133530__

#ifndef __XDR_MESSAGE_GMTKickAns_K_GOONZU_153929338__
#define __XDR_MESSAGE_GMTKickAns_K_GOONZU_153929338__
class GMTKickAns_K_GOONZU : public XDR::IMessage
{
public:
    enum {tagMsgID = 153929338};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    int32 nErrCode;

public:
    GMTKickAns_K_GOONZU(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        nErrCode = 0;
    }
    virtual ~GMTKickAns_K_GOONZU(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        nErrCode = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "GMTKickAns_K_GOONZU";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nErrCode);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nErrCode);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nErrCode
        if (XDR::EncodingRules::Save(hStream, &nErrCode) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nErrCode
        if (XDR::EncodingRules::Save(hStream, &nErrCode) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nErrCode
        if (XDR::EncodingRules::Load(hStream, &nErrCode) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nErrCode
        if (XDR::EncodingRules::Load(hStream, &nErrCode) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_GMTKickAns_K_GOONZU_153929338__

#ifndef __XDR_MESSAGE_GMTChatBlockReq_K_GOONZU_212517946__
#define __XDR_MESSAGE_GMTChatBlockReq_K_GOONZU_212517946__
class GMTChatBlockReq_K_GOONZU : public XDR::IMessage
{
public:
    enum {tagMsgID = 212517946};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    std::string strPlayerName;
    std::string strTime;

public:
    GMTChatBlockReq_K_GOONZU(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
    }
    virtual ~GMTChatBlockReq_K_GOONZU(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        strPlayerName.resize(0);
        strTime.resize(0);
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "GMTChatBlockReq_K_GOONZU";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&strPlayerName);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&strPlayerName);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&strTime);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&strTime);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // strPlayerName
        if (XDR::EncodingRules::Save(hStream, &strPlayerName) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // strPlayerName
        if (XDR::EncodingRules::Save(hStream, &strPlayerName) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // strTime
        if (XDR::EncodingRules::Save(hStream, &strTime) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // strTime
        if (XDR::EncodingRules::Save(hStream, &strTime) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // strPlayerName
        if (XDR::EncodingRules::Load(hStream, &strPlayerName) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // strPlayerName
        if (XDR::EncodingRules::Load(hStream, &strPlayerName) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // strTime
        if (XDR::EncodingRules::Load(hStream, &strTime) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // strTime
        if (XDR::EncodingRules::Load(hStream, &strTime) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_GMTChatBlockReq_K_GOONZU_212517946__

#ifndef __XDR_MESSAGE_GMTChatBlockAns_K_GOONZU_146010794__
#define __XDR_MESSAGE_GMTChatBlockAns_K_GOONZU_146010794__
class GMTChatBlockAns_K_GOONZU : public XDR::IMessage
{
public:
    enum {tagMsgID = 146010794};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    int32 nErrCode;

public:
    GMTChatBlockAns_K_GOONZU(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        nErrCode = 0;
    }
    virtual ~GMTChatBlockAns_K_GOONZU(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        nErrCode = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "GMTChatBlockAns_K_GOONZU";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nErrCode);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nErrCode);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nErrCode
        if (XDR::EncodingRules::Save(hStream, &nErrCode) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nErrCode
        if (XDR::EncodingRules::Save(hStream, &nErrCode) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nErrCode
        if (XDR::EncodingRules::Load(hStream, &nErrCode) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nErrCode
        if (XDR::EncodingRules::Load(hStream, &nErrCode) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_GMTChatBlockAns_K_GOONZU_146010794__

#ifndef __XDR_MESSAGE_GMTCmdReq_K_GOONZU_3627738__
#define __XDR_MESSAGE_GMTCmdReq_K_GOONZU_3627738__
class GMTCmdReq_K_GOONZU : public XDR::IMessage
{
public:
    enum {tagMsgID = 3627738};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    int32 nServerId;
    std::string strCmd;

public:
    GMTCmdReq_K_GOONZU(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        nServerId = 0;
    }
    virtual ~GMTCmdReq_K_GOONZU(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        nServerId = 0;
        strCmd.resize(0);
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "GMTCmdReq_K_GOONZU";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nServerId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nServerId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&strCmd);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&strCmd);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nServerId
        if (XDR::EncodingRules::Save(hStream, &nServerId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nServerId
        if (XDR::EncodingRules::Save(hStream, &nServerId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // strCmd
        if (XDR::EncodingRules::Save(hStream, &strCmd) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // strCmd
        if (XDR::EncodingRules::Save(hStream, &strCmd) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nServerId
        if (XDR::EncodingRules::Load(hStream, &nServerId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nServerId
        if (XDR::EncodingRules::Load(hStream, &nServerId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // strCmd
        if (XDR::EncodingRules::Load(hStream, &strCmd) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // strCmd
        if (XDR::EncodingRules::Load(hStream, &strCmd) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_GMTCmdReq_K_GOONZU_3627738__

#ifndef __XDR_MESSAGE_GMTCmdAns_K_GOONZU_5758554__
#define __XDR_MESSAGE_GMTCmdAns_K_GOONZU_5758554__
class GMTCmdAns_K_GOONZU : public XDR::IMessage
{
public:
    enum {tagMsgID = 5758554};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    int32 nErrCode;

public:
    GMTCmdAns_K_GOONZU(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        nErrCode = 0;
    }
    virtual ~GMTCmdAns_K_GOONZU(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        nErrCode = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "GMTCmdAns_K_GOONZU";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nErrCode);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nErrCode);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nErrCode
        if (XDR::EncodingRules::Save(hStream, &nErrCode) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nErrCode
        if (XDR::EncodingRules::Save(hStream, &nErrCode) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nErrCode
        if (XDR::EncodingRules::Load(hStream, &nErrCode) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nErrCode
        if (XDR::EncodingRules::Load(hStream, &nErrCode) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_GMTCmdAns_K_GOONZU_5758554__

#endif
