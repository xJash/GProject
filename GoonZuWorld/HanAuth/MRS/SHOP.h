// This file, generated by XDR Compiler for C++ version 1.0.2220. Release: Aug 22 2006. 12:23:51.

#ifndef __XDR_SHOP__
#define __XDR_SHOP__

#include <XDR/XDR.h>

#ifndef __XDR_MESSAGE_GameCharacter_67182506__
#define __XDR_MESSAGE_GameCharacter_67182506__
class GameCharacter : public XDR::IMessage
{
public:
    enum {tagMsgID = 67182506};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    std::string memberid;
    std::string serverid;
    std::string characterId;
    std::string characterType;
    int32 level;
    int64 gameMoney;

public:
    GameCharacter(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        level = 0;
        gameMoney = 0;
    }
    virtual ~GameCharacter(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        memberid.resize(0);
        serverid.resize(0);
        characterId.resize(0);
        characterType.resize(0);
        level = 0;
        gameMoney = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "GameCharacter";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&memberid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&memberid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&serverid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&serverid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&characterId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&characterId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&characterType);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&characterType);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&level);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&level);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&gameMoney);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&gameMoney);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterType
        if (XDR::EncodingRules::Save(hStream, &characterType) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterType
        if (XDR::EncodingRules::Save(hStream, &characterType) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // level
        if (XDR::EncodingRules::Save(hStream, &level) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // level
        if (XDR::EncodingRules::Save(hStream, &level) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameMoney
        if (XDR::EncodingRules::Save(hStream, &gameMoney) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameMoney
        if (XDR::EncodingRules::Save(hStream, &gameMoney) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterType
        if (XDR::EncodingRules::Load(hStream, &characterType) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterType
        if (XDR::EncodingRules::Load(hStream, &characterType) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // level
        if (XDR::EncodingRules::Load(hStream, &level) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // level
        if (XDR::EncodingRules::Load(hStream, &level) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameMoney
        if (XDR::EncodingRules::Load(hStream, &gameMoney) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameMoney
        if (XDR::EncodingRules::Load(hStream, &gameMoney) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_GameCharacter_67182506__

#ifndef __XDR_MESSAGE_GameCharacterListReq_178082442__
#define __XDR_MESSAGE_GameCharacterListReq_178082442__
class GameCharacterListReq : public XDR::IMessage
{
public:
    enum {tagMsgID = 178082442};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    std::string gameId;
    std::string memberid;
    std::string serverid;
    std::string characterId;
    bool isanycast;

public:
    GameCharacterListReq(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        isanycast = 0;
    }
    virtual ~GameCharacterListReq(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        gameId.resize(0);
        memberid.resize(0);
        serverid.resize(0);
        characterId.resize(0);
        isanycast = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "GameCharacterListReq";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&gameId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&gameId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&memberid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&memberid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&serverid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&serverid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&characterId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&characterId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&isanycast);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&isanycast);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isanycast
        if (XDR::EncodingRules::Save(hStream, &isanycast) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isanycast
        if (XDR::EncodingRules::Save(hStream, &isanycast) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isanycast
        if (XDR::EncodingRules::Load(hStream, &isanycast) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isanycast
        if (XDR::EncodingRules::Load(hStream, &isanycast) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_GameCharacterListReq_178082442__

#ifndef __XDR_MESSAGE_GameCharacterListAns_186380938__
#define __XDR_MESSAGE_GameCharacterListAns_186380938__
class GameCharacterListAns : public XDR::IMessage
{
public:
    enum {tagMsgID = 186380938};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    typedef std::list<GameCharacter *> listcharactersType;
    listcharactersType listcharacters;

public:
    GameCharacterListAns(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
    }
    virtual ~GameCharacterListAns(void)
    {
        while (listcharacters.empty() == false)
        {
            GameCharacter *pItem = listcharacters.back();
            listcharacters.pop_back();
            delete pItem;
        }
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        while (listcharacters.empty() == false)
        {
            GameCharacter *pItem = listcharacters.back();
            listcharacters.pop_back();
            delete pItem;
        }
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "GameCharacterListAns";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&listcharacters);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        {nLength += sizeof(int32);
        for (listcharactersType::iterator it = listcharacters.begin(); it != listcharacters.end(); ++it)
        {
            nLength += XDR::EncodingRules::GetLength(*it);
        }}
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // listcharacters
        if (XDR::EncodingRules::Save(hStream, &listcharacters) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // listcharacters
        {int32 nLength = static_cast<int32>(listcharacters.size());
        if (XDR::EncodingRules::Save(hStream, &nLength) == false)
        {
            return false;
        }

        for (listcharactersType::iterator it = listcharacters.begin(); it != listcharacters.end(); ++it)
        {
            if (XDR::EncodingRules::Save(hStream, *it) == false)
            {
                return false;
            }
        }}
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // listcharacters
        if (XDR::EncodingRules::Load(hStream, &listcharacters) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // listcharacters
        {int32 nLength = 0;
        if (XDR::EncodingRules::Load(hStream, &nLength) == false)
        {
            return false;
        }

        for (int i = 0; i < nLength; ++i)
        {
            GameCharacter *pItem = new GameCharacter;
            if (XDR::EncodingRules::Load(hStream, pItem) == false)
            {
                return false;
            }
            listcharacters.push_back(pItem);
        }}
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_GameCharacterListAns_186380938__

#ifndef __XDR_MESSAGE_GameCharacterReq_243251882__
#define __XDR_MESSAGE_GameCharacterReq_243251882__
class GameCharacterReq : public XDR::IMessage
{
public:
    enum {tagMsgID = 243251882};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    std::string gameId;
    std::string memberid;
    std::string serverid;
    std::string characterId;
    bool isanycast;

public:
    GameCharacterReq(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        isanycast = 0;
    }
    virtual ~GameCharacterReq(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        gameId.resize(0);
        memberid.resize(0);
        serverid.resize(0);
        characterId.resize(0);
        isanycast = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "GameCharacterReq";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&gameId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&gameId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&memberid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&memberid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&serverid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&serverid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&characterId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&characterId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&isanycast);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&isanycast);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isanycast
        if (XDR::EncodingRules::Save(hStream, &isanycast) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isanycast
        if (XDR::EncodingRules::Save(hStream, &isanycast) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isanycast
        if (XDR::EncodingRules::Load(hStream, &isanycast) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isanycast
        if (XDR::EncodingRules::Load(hStream, &isanycast) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_GameCharacterReq_243251882__

#ifndef __XDR_MESSAGE_GameCharacterAns_51582650__
#define __XDR_MESSAGE_GameCharacterAns_51582650__
class GameCharacterAns : public XDR::IMessage
{
public:
    enum {tagMsgID = 51582650};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    std::string memberid;
    std::string serverid;
    std::string characterId;
    std::string characterType;
    int32 level;
    int64 gameMoney;

public:
    GameCharacterAns(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        level = 0;
        gameMoney = 0;
    }
    virtual ~GameCharacterAns(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        memberid.resize(0);
        serverid.resize(0);
        characterId.resize(0);
        characterType.resize(0);
        level = 0;
        gameMoney = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "GameCharacterAns";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&memberid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&memberid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&serverid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&serverid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&characterId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&characterId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&characterType);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&characterType);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&level);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&level);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&gameMoney);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&gameMoney);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterType
        if (XDR::EncodingRules::Save(hStream, &characterType) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterType
        if (XDR::EncodingRules::Save(hStream, &characterType) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // level
        if (XDR::EncodingRules::Save(hStream, &level) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // level
        if (XDR::EncodingRules::Save(hStream, &level) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameMoney
        if (XDR::EncodingRules::Save(hStream, &gameMoney) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameMoney
        if (XDR::EncodingRules::Save(hStream, &gameMoney) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterType
        if (XDR::EncodingRules::Load(hStream, &characterType) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterType
        if (XDR::EncodingRules::Load(hStream, &characterType) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // level
        if (XDR::EncodingRules::Load(hStream, &level) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // level
        if (XDR::EncodingRules::Load(hStream, &level) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameMoney
        if (XDR::EncodingRules::Load(hStream, &gameMoney) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameMoney
        if (XDR::EncodingRules::Load(hStream, &gameMoney) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_GameCharacterAns_51582650__

#ifndef __XDR_MESSAGE_HasNecessaryItemReq_265895082__
#define __XDR_MESSAGE_HasNecessaryItemReq_265895082__
class HasNecessaryItemReq : public XDR::IMessage
{
public:
    enum {tagMsgID = 265895082};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    std::string gameId;
    std::string memberid;
    std::string serverid;
    std::string characterId;
    std::string itemId;
    bool isanycast;

public:
    HasNecessaryItemReq(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        isanycast = 0;
    }
    virtual ~HasNecessaryItemReq(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        gameId.resize(0);
        memberid.resize(0);
        serverid.resize(0);
        characterId.resize(0);
        itemId.resize(0);
        isanycast = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "HasNecessaryItemReq";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&gameId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&gameId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&memberid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&memberid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&serverid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&serverid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&characterId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&characterId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&itemId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&itemId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&isanycast);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&isanycast);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // itemId
        if (XDR::EncodingRules::Save(hStream, &itemId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // itemId
        if (XDR::EncodingRules::Save(hStream, &itemId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isanycast
        if (XDR::EncodingRules::Save(hStream, &isanycast) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isanycast
        if (XDR::EncodingRules::Save(hStream, &isanycast) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // itemId
        if (XDR::EncodingRules::Load(hStream, &itemId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // itemId
        if (XDR::EncodingRules::Load(hStream, &itemId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isanycast
        if (XDR::EncodingRules::Load(hStream, &isanycast) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isanycast
        if (XDR::EncodingRules::Load(hStream, &isanycast) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_HasNecessaryItemReq_265895082__

#ifndef __XDR_MESSAGE_HasNecessaryItemAns_104819738__
#define __XDR_MESSAGE_HasNecessaryItemAns_104819738__
class HasNecessaryItemAns : public XDR::IMessage
{
public:
    enum {tagMsgID = 104819738};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    bool hasNecessaryItem;

public:
    HasNecessaryItemAns(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        hasNecessaryItem = 0;
    }
    virtual ~HasNecessaryItemAns(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        hasNecessaryItem = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "HasNecessaryItemAns";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&hasNecessaryItem);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&hasNecessaryItem);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // hasNecessaryItem
        if (XDR::EncodingRules::Save(hStream, &hasNecessaryItem) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // hasNecessaryItem
        if (XDR::EncodingRules::Save(hStream, &hasNecessaryItem) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // hasNecessaryItem
        if (XDR::EncodingRules::Load(hStream, &hasNecessaryItem) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // hasNecessaryItem
        if (XDR::EncodingRules::Load(hStream, &hasNecessaryItem) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_HasNecessaryItemAns_104819738__

#ifndef __XDR_MESSAGE_HasDuplicatedItemReq_68498074__
#define __XDR_MESSAGE_HasDuplicatedItemReq_68498074__
class HasDuplicatedItemReq : public XDR::IMessage
{
public:
    enum {tagMsgID = 68498074};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    std::string gameId;
    std::string memberid;
    std::string serverid;
    std::string characterId;
    std::string itemId;
    bool isanycast;

public:
    HasDuplicatedItemReq(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        isanycast = 0;
    }
    virtual ~HasDuplicatedItemReq(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        gameId.resize(0);
        memberid.resize(0);
        serverid.resize(0);
        characterId.resize(0);
        itemId.resize(0);
        isanycast = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "HasDuplicatedItemReq";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&gameId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&gameId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&memberid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&memberid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&serverid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&serverid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&characterId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&characterId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&itemId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&itemId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&isanycast);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&isanycast);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // itemId
        if (XDR::EncodingRules::Save(hStream, &itemId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // itemId
        if (XDR::EncodingRules::Save(hStream, &itemId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isanycast
        if (XDR::EncodingRules::Save(hStream, &isanycast) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isanycast
        if (XDR::EncodingRules::Save(hStream, &isanycast) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // itemId
        if (XDR::EncodingRules::Load(hStream, &itemId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // itemId
        if (XDR::EncodingRules::Load(hStream, &itemId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isanycast
        if (XDR::EncodingRules::Load(hStream, &isanycast) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isanycast
        if (XDR::EncodingRules::Load(hStream, &isanycast) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_HasDuplicatedItemReq_68498074__

#ifndef __XDR_MESSAGE_HasDuplicatedItemAns_80000538__
#define __XDR_MESSAGE_HasDuplicatedItemAns_80000538__
class HasDuplicatedItemAns : public XDR::IMessage
{
public:
    enum {tagMsgID = 80000538};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    bool hasDuplicatedItem;

public:
    HasDuplicatedItemAns(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        hasDuplicatedItem = 0;
    }
    virtual ~HasDuplicatedItemAns(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        hasDuplicatedItem = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "HasDuplicatedItemAns";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&hasDuplicatedItem);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&hasDuplicatedItem);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // hasDuplicatedItem
        if (XDR::EncodingRules::Save(hStream, &hasDuplicatedItem) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // hasDuplicatedItem
        if (XDR::EncodingRules::Save(hStream, &hasDuplicatedItem) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // hasDuplicatedItem
        if (XDR::EncodingRules::Load(hStream, &hasDuplicatedItem) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // hasDuplicatedItem
        if (XDR::EncodingRules::Load(hStream, &hasDuplicatedItem) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_HasDuplicatedItemAns_80000538__

#ifndef __XDR_MESSAGE_AddInventoryItemReq_63612586__
#define __XDR_MESSAGE_AddInventoryItemReq_63612586__
class AddInventoryItemReq : public XDR::IMessage
{
public:
    enum {tagMsgID = 63612586};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    int32 orderseq;
    std::string gameId;
    std::string sendmemberid;
    std::string sendserverid;
    std::string sendcharacterId;
    std::string memberid;
    std::string serverid;
    std::string characterId;
    std::string itemId;
    int32 count;
    std::string giftMessage;
    int64 price;
    bool isanycast;

public:
    AddInventoryItemReq(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        orderseq = 0;
        count = 0;
        price = 0;
        isanycast = 0;
    }
    virtual ~AddInventoryItemReq(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        orderseq = 0;
        gameId.resize(0);
        sendmemberid.resize(0);
        sendserverid.resize(0);
        sendcharacterId.resize(0);
        memberid.resize(0);
        serverid.resize(0);
        characterId.resize(0);
        itemId.resize(0);
        count = 0;
        giftMessage.resize(0);
        price = 0;
        isanycast = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "AddInventoryItemReq";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&orderseq);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&orderseq);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&gameId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&gameId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&sendmemberid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&sendmemberid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&sendserverid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&sendserverid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&sendcharacterId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&sendcharacterId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&memberid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&memberid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&serverid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&serverid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&characterId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&characterId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&itemId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&itemId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&count);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&count);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&giftMessage);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&giftMessage);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&price);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&price);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&isanycast);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&isanycast);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // orderseq
        if (XDR::EncodingRules::Save(hStream, &orderseq) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // orderseq
        if (XDR::EncodingRules::Save(hStream, &orderseq) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // sendmemberid
        if (XDR::EncodingRules::Save(hStream, &sendmemberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // sendmemberid
        if (XDR::EncodingRules::Save(hStream, &sendmemberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // sendserverid
        if (XDR::EncodingRules::Save(hStream, &sendserverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // sendserverid
        if (XDR::EncodingRules::Save(hStream, &sendserverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // sendcharacterId
        if (XDR::EncodingRules::Save(hStream, &sendcharacterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // sendcharacterId
        if (XDR::EncodingRules::Save(hStream, &sendcharacterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // itemId
        if (XDR::EncodingRules::Save(hStream, &itemId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // itemId
        if (XDR::EncodingRules::Save(hStream, &itemId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // count
        if (XDR::EncodingRules::Save(hStream, &count) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // count
        if (XDR::EncodingRules::Save(hStream, &count) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // giftMessage
        if (XDR::EncodingRules::Save(hStream, &giftMessage) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // giftMessage
        if (XDR::EncodingRules::Save(hStream, &giftMessage) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // price
        if (XDR::EncodingRules::Save(hStream, &price) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // price
        if (XDR::EncodingRules::Save(hStream, &price) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isanycast
        if (XDR::EncodingRules::Save(hStream, &isanycast) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isanycast
        if (XDR::EncodingRules::Save(hStream, &isanycast) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // orderseq
        if (XDR::EncodingRules::Load(hStream, &orderseq) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // orderseq
        if (XDR::EncodingRules::Load(hStream, &orderseq) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // sendmemberid
        if (XDR::EncodingRules::Load(hStream, &sendmemberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // sendmemberid
        if (XDR::EncodingRules::Load(hStream, &sendmemberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // sendserverid
        if (XDR::EncodingRules::Load(hStream, &sendserverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // sendserverid
        if (XDR::EncodingRules::Load(hStream, &sendserverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // sendcharacterId
        if (XDR::EncodingRules::Load(hStream, &sendcharacterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // sendcharacterId
        if (XDR::EncodingRules::Load(hStream, &sendcharacterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // itemId
        if (XDR::EncodingRules::Load(hStream, &itemId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // itemId
        if (XDR::EncodingRules::Load(hStream, &itemId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // count
        if (XDR::EncodingRules::Load(hStream, &count) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // count
        if (XDR::EncodingRules::Load(hStream, &count) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // giftMessage
        if (XDR::EncodingRules::Load(hStream, &giftMessage) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // giftMessage
        if (XDR::EncodingRules::Load(hStream, &giftMessage) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // price
        if (XDR::EncodingRules::Load(hStream, &price) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // price
        if (XDR::EncodingRules::Load(hStream, &price) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isanycast
        if (XDR::EncodingRules::Load(hStream, &isanycast) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isanycast
        if (XDR::EncodingRules::Load(hStream, &isanycast) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_AddInventoryItemReq_63612586__

#ifndef __XDR_MESSAGE_AddInventoryItemAns_225834218__
#define __XDR_MESSAGE_AddInventoryItemAns_225834218__
class AddInventoryItemAns : public XDR::IMessage
{
public:
    enum {tagMsgID = 225834218};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    int32 result;
    std::string message;

public:
    AddInventoryItemAns(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        result = 0;
    }
    virtual ~AddInventoryItemAns(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        result = 0;
        message.resize(0);
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "AddInventoryItemAns";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&result);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&result);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&message);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&message);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // result
        if (XDR::EncodingRules::Save(hStream, &result) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // result
        if (XDR::EncodingRules::Save(hStream, &result) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // message
        if (XDR::EncodingRules::Save(hStream, &message) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // message
        if (XDR::EncodingRules::Save(hStream, &message) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // result
        if (XDR::EncodingRules::Load(hStream, &result) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // result
        if (XDR::EncodingRules::Load(hStream, &result) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // message
        if (XDR::EncodingRules::Load(hStream, &message) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // message
        if (XDR::EncodingRules::Load(hStream, &message) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_AddInventoryItemAns_225834218__

#ifndef __XDR_MESSAGE_GameInventory_62960826__
#define __XDR_MESSAGE_GameInventory_62960826__
class GameInventory : public XDR::IMessage
{
public:
    enum {tagMsgID = 62960826};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 orderseq;
    std::string itemId;
    int64 buyDate;
    std::string buyDateStr;
    int32 count;
    std::string directUseYn;
    std::string rateDivision;
    int32 useCount;
    int32 period;
    std::string optionCode;
    std::string optionValue;
    int64 price;
    std::string status;

public:
    GameInventory(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        orderseq = 0;
        buyDate = 0;
        count = 0;
        useCount = 0;
        period = 0;
        price = 0;
    }
    virtual ~GameInventory(void)
    {
    }

    virtual void Clear(void)
    {
        orderseq = 0;
        itemId.resize(0);
        buyDate = 0;
        buyDateStr.resize(0);
        count = 0;
        directUseYn.resize(0);
        rateDivision.resize(0);
        useCount = 0;
        period = 0;
        optionCode.resize(0);
        optionValue.resize(0);
        price = 0;
        status.resize(0);
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "GameInventory";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&orderseq);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&orderseq);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&itemId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&itemId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&buyDate);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&buyDate);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&buyDateStr);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&buyDateStr);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&count);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&count);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&directUseYn);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&directUseYn);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&rateDivision);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&rateDivision);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&useCount);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&useCount);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&period);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&period);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&optionCode);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&optionCode);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&optionValue);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&optionValue);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&price);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&price);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&status);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&status);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // orderseq
        if (XDR::EncodingRules::Save(hStream, &orderseq) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // orderseq
        if (XDR::EncodingRules::Save(hStream, &orderseq) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // itemId
        if (XDR::EncodingRules::Save(hStream, &itemId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // itemId
        if (XDR::EncodingRules::Save(hStream, &itemId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // buyDate
        if (XDR::EncodingRules::Save(hStream, &buyDate) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // buyDate
        if (XDR::EncodingRules::Save(hStream, &buyDate) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // buyDateStr
        if (XDR::EncodingRules::Save(hStream, &buyDateStr) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // buyDateStr
        if (XDR::EncodingRules::Save(hStream, &buyDateStr) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // count
        if (XDR::EncodingRules::Save(hStream, &count) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // count
        if (XDR::EncodingRules::Save(hStream, &count) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // directUseYn
        if (XDR::EncodingRules::Save(hStream, &directUseYn) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // directUseYn
        if (XDR::EncodingRules::Save(hStream, &directUseYn) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // rateDivision
        if (XDR::EncodingRules::Save(hStream, &rateDivision) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // rateDivision
        if (XDR::EncodingRules::Save(hStream, &rateDivision) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // useCount
        if (XDR::EncodingRules::Save(hStream, &useCount) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // useCount
        if (XDR::EncodingRules::Save(hStream, &useCount) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // period
        if (XDR::EncodingRules::Save(hStream, &period) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // period
        if (XDR::EncodingRules::Save(hStream, &period) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // optionCode
        if (XDR::EncodingRules::Save(hStream, &optionCode) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // optionCode
        if (XDR::EncodingRules::Save(hStream, &optionCode) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // optionValue
        if (XDR::EncodingRules::Save(hStream, &optionValue) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // optionValue
        if (XDR::EncodingRules::Save(hStream, &optionValue) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // price
        if (XDR::EncodingRules::Save(hStream, &price) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // price
        if (XDR::EncodingRules::Save(hStream, &price) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // status
        if (XDR::EncodingRules::Save(hStream, &status) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // status
        if (XDR::EncodingRules::Save(hStream, &status) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // orderseq
        if (XDR::EncodingRules::Load(hStream, &orderseq) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // orderseq
        if (XDR::EncodingRules::Load(hStream, &orderseq) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // itemId
        if (XDR::EncodingRules::Load(hStream, &itemId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // itemId
        if (XDR::EncodingRules::Load(hStream, &itemId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // buyDate
        if (XDR::EncodingRules::Load(hStream, &buyDate) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // buyDate
        if (XDR::EncodingRules::Load(hStream, &buyDate) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // buyDateStr
        if (XDR::EncodingRules::Load(hStream, &buyDateStr) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // buyDateStr
        if (XDR::EncodingRules::Load(hStream, &buyDateStr) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // count
        if (XDR::EncodingRules::Load(hStream, &count) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // count
        if (XDR::EncodingRules::Load(hStream, &count) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // directUseYn
        if (XDR::EncodingRules::Load(hStream, &directUseYn) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // directUseYn
        if (XDR::EncodingRules::Load(hStream, &directUseYn) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // rateDivision
        if (XDR::EncodingRules::Load(hStream, &rateDivision) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // rateDivision
        if (XDR::EncodingRules::Load(hStream, &rateDivision) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // useCount
        if (XDR::EncodingRules::Load(hStream, &useCount) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // useCount
        if (XDR::EncodingRules::Load(hStream, &useCount) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // period
        if (XDR::EncodingRules::Load(hStream, &period) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // period
        if (XDR::EncodingRules::Load(hStream, &period) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // optionCode
        if (XDR::EncodingRules::Load(hStream, &optionCode) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // optionCode
        if (XDR::EncodingRules::Load(hStream, &optionCode) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // optionValue
        if (XDR::EncodingRules::Load(hStream, &optionValue) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // optionValue
        if (XDR::EncodingRules::Load(hStream, &optionValue) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // price
        if (XDR::EncodingRules::Load(hStream, &price) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // price
        if (XDR::EncodingRules::Load(hStream, &price) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // status
        if (XDR::EncodingRules::Load(hStream, &status) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // status
        if (XDR::EncodingRules::Load(hStream, &status) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_GameInventory_62960826__

#ifndef __XDR_MESSAGE_GameInventoryListReq_18716282__
#define __XDR_MESSAGE_GameInventoryListReq_18716282__
class GameInventoryListReq : public XDR::IMessage
{
public:
    enum {tagMsgID = 18716282};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    std::string gameId;
    std::string memberid;
    std::string serverid;
    std::string characterId;
    bool isanycast;

public:
    GameInventoryListReq(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        isanycast = 0;
    }
    virtual ~GameInventoryListReq(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        gameId.resize(0);
        memberid.resize(0);
        serverid.resize(0);
        characterId.resize(0);
        isanycast = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "GameInventoryListReq";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&gameId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&gameId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&memberid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&memberid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&serverid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&serverid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&characterId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&characterId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&isanycast);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&isanycast);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isanycast
        if (XDR::EncodingRules::Save(hStream, &isanycast) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isanycast
        if (XDR::EncodingRules::Save(hStream, &isanycast) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isanycast
        if (XDR::EncodingRules::Load(hStream, &isanycast) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isanycast
        if (XDR::EncodingRules::Load(hStream, &isanycast) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_GameInventoryListReq_18716282__

#ifndef __XDR_MESSAGE_GameInventoryListAns_24403034__
#define __XDR_MESSAGE_GameInventoryListAns_24403034__
class GameInventoryListAns : public XDR::IMessage
{
public:
    enum {tagMsgID = 24403034};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    typedef std::list<GameInventory *> inventorylistType;
    inventorylistType inventorylist;

public:
    GameInventoryListAns(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
    }
    virtual ~GameInventoryListAns(void)
    {
        while (inventorylist.empty() == false)
        {
            GameInventory *pItem = inventorylist.back();
            inventorylist.pop_back();
            delete pItem;
        }
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        while (inventorylist.empty() == false)
        {
            GameInventory *pItem = inventorylist.back();
            inventorylist.pop_back();
            delete pItem;
        }
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "GameInventoryListAns";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&inventorylist);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        {nLength += sizeof(int32);
        for (inventorylistType::iterator it = inventorylist.begin(); it != inventorylist.end(); ++it)
        {
            nLength += XDR::EncodingRules::GetLength(*it);
        }}
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // inventorylist
        if (XDR::EncodingRules::Save(hStream, &inventorylist) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // inventorylist
        {int32 nLength = static_cast<int32>(inventorylist.size());
        if (XDR::EncodingRules::Save(hStream, &nLength) == false)
        {
            return false;
        }

        for (inventorylistType::iterator it = inventorylist.begin(); it != inventorylist.end(); ++it)
        {
            if (XDR::EncodingRules::Save(hStream, *it) == false)
            {
                return false;
            }
        }}
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // inventorylist
        if (XDR::EncodingRules::Load(hStream, &inventorylist) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // inventorylist
        {int32 nLength = 0;
        if (XDR::EncodingRules::Load(hStream, &nLength) == false)
        {
            return false;
        }

        for (int i = 0; i < nLength; ++i)
        {
            GameInventory *pItem = new GameInventory;
            if (XDR::EncodingRules::Load(hStream, pItem) == false)
            {
                return false;
            }
            inventorylist.push_back(pItem);
        }}
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_GameInventoryListAns_24403034__

#ifndef __XDR_MESSAGE_IsMoneyBackReq_126787466__
#define __XDR_MESSAGE_IsMoneyBackReq_126787466__
class IsMoneyBackReq : public XDR::IMessage
{
public:
    enum {tagMsgID = 126787466};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    int32 orderseq;
    std::string gameId;
    std::string memberid;
    std::string serverid;
    std::string characterId;
    std::string itemId;
    bool isanycast;

public:
    IsMoneyBackReq(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        orderseq = 0;
        isanycast = 0;
    }
    virtual ~IsMoneyBackReq(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        orderseq = 0;
        gameId.resize(0);
        memberid.resize(0);
        serverid.resize(0);
        characterId.resize(0);
        itemId.resize(0);
        isanycast = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "IsMoneyBackReq";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&orderseq);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&orderseq);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&gameId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&gameId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&memberid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&memberid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&serverid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&serverid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&characterId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&characterId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&itemId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&itemId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&isanycast);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&isanycast);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // orderseq
        if (XDR::EncodingRules::Save(hStream, &orderseq) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // orderseq
        if (XDR::EncodingRules::Save(hStream, &orderseq) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // itemId
        if (XDR::EncodingRules::Save(hStream, &itemId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // itemId
        if (XDR::EncodingRules::Save(hStream, &itemId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isanycast
        if (XDR::EncodingRules::Save(hStream, &isanycast) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isanycast
        if (XDR::EncodingRules::Save(hStream, &isanycast) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // orderseq
        if (XDR::EncodingRules::Load(hStream, &orderseq) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // orderseq
        if (XDR::EncodingRules::Load(hStream, &orderseq) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // itemId
        if (XDR::EncodingRules::Load(hStream, &itemId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // itemId
        if (XDR::EncodingRules::Load(hStream, &itemId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isanycast
        if (XDR::EncodingRules::Load(hStream, &isanycast) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isanycast
        if (XDR::EncodingRules::Load(hStream, &isanycast) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_IsMoneyBackReq_126787466__

#ifndef __XDR_MESSAGE_IsMoneyBackAns_150757834__
#define __XDR_MESSAGE_IsMoneyBackAns_150757834__
class IsMoneyBackAns : public XDR::IMessage
{
public:
    enum {tagMsgID = 150757834};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    bool isMoneyBackItem;

public:
    IsMoneyBackAns(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        isMoneyBackItem = 0;
    }
    virtual ~IsMoneyBackAns(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        isMoneyBackItem = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "IsMoneyBackAns";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&isMoneyBackItem);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&isMoneyBackItem);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isMoneyBackItem
        if (XDR::EncodingRules::Save(hStream, &isMoneyBackItem) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isMoneyBackItem
        if (XDR::EncodingRules::Save(hStream, &isMoneyBackItem) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isMoneyBackItem
        if (XDR::EncodingRules::Load(hStream, &isMoneyBackItem) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isMoneyBackItem
        if (XDR::EncodingRules::Load(hStream, &isMoneyBackItem) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_IsMoneyBackAns_150757834__

#ifndef __XDR_MESSAGE_DeleteInventoryReq_207611930__
#define __XDR_MESSAGE_DeleteInventoryReq_207611930__
class DeleteInventoryReq : public XDR::IMessage
{
public:
    enum {tagMsgID = 207611930};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    int32 orderseq;
    std::string gameId;
    std::string memberid;
    std::string serverid;
    std::string characterId;
    std::string itemId;
    bool isanycast;

public:
    DeleteInventoryReq(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        orderseq = 0;
        isanycast = 0;
    }
    virtual ~DeleteInventoryReq(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        orderseq = 0;
        gameId.resize(0);
        memberid.resize(0);
        serverid.resize(0);
        characterId.resize(0);
        itemId.resize(0);
        isanycast = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "DeleteInventoryReq";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&orderseq);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&orderseq);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&gameId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&gameId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&memberid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&memberid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&serverid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&serverid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&characterId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&characterId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&itemId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&itemId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&isanycast);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&isanycast);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // orderseq
        if (XDR::EncodingRules::Save(hStream, &orderseq) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // orderseq
        if (XDR::EncodingRules::Save(hStream, &orderseq) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // itemId
        if (XDR::EncodingRules::Save(hStream, &itemId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // itemId
        if (XDR::EncodingRules::Save(hStream, &itemId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isanycast
        if (XDR::EncodingRules::Save(hStream, &isanycast) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isanycast
        if (XDR::EncodingRules::Save(hStream, &isanycast) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // orderseq
        if (XDR::EncodingRules::Load(hStream, &orderseq) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // orderseq
        if (XDR::EncodingRules::Load(hStream, &orderseq) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // itemId
        if (XDR::EncodingRules::Load(hStream, &itemId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // itemId
        if (XDR::EncodingRules::Load(hStream, &itemId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isanycast
        if (XDR::EncodingRules::Load(hStream, &isanycast) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isanycast
        if (XDR::EncodingRules::Load(hStream, &isanycast) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_DeleteInventoryReq_207611930__

#ifndef __XDR_MESSAGE_DeleteInventoryAns_33952842__
#define __XDR_MESSAGE_DeleteInventoryAns_33952842__
class DeleteInventoryAns : public XDR::IMessage
{
public:
    enum {tagMsgID = 33952842};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    int32 result;
    std::string message;

public:
    DeleteInventoryAns(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        result = 0;
    }
    virtual ~DeleteInventoryAns(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        result = 0;
        message.resize(0);
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "DeleteInventoryAns";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&result);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&result);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&message);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&message);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // result
        if (XDR::EncodingRules::Save(hStream, &result) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // result
        if (XDR::EncodingRules::Save(hStream, &result) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // message
        if (XDR::EncodingRules::Save(hStream, &message) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // message
        if (XDR::EncodingRules::Save(hStream, &message) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // result
        if (XDR::EncodingRules::Load(hStream, &result) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // result
        if (XDR::EncodingRules::Load(hStream, &result) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // message
        if (XDR::EncodingRules::Load(hStream, &message) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // message
        if (XDR::EncodingRules::Load(hStream, &message) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_DeleteInventoryAns_33952842__

#ifndef __XDR_MESSAGE_GetHanCoinReq_15772810__
#define __XDR_MESSAGE_GetHanCoinReq_15772810__
class GetHanCoinReq : public XDR::IMessage
{
public:
    enum {tagMsgID = 15772810};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    std::string memberid;

public:
    GetHanCoinReq(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
    }
    virtual ~GetHanCoinReq(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        memberid.resize(0);
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "GetHanCoinReq";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&memberid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&memberid);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_GetHanCoinReq_15772810__

#ifndef __XDR_MESSAGE_GetHanCoinAns_244177226__
#define __XDR_MESSAGE_GetHanCoinAns_244177226__
class GetHanCoinAns : public XDR::IMessage
{
public:
    enum {tagMsgID = 244177226};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    int64 hancoin;

public:
    GetHanCoinAns(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        hancoin = 0;
    }
    virtual ~GetHanCoinAns(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        hancoin = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "GetHanCoinAns";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&hancoin);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&hancoin);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // hancoin
        if (XDR::EncodingRules::Save(hStream, &hancoin) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // hancoin
        if (XDR::EncodingRules::Save(hStream, &hancoin) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // hancoin
        if (XDR::EncodingRules::Load(hStream, &hancoin) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // hancoin
        if (XDR::EncodingRules::Load(hStream, &hancoin) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_GetHanCoinAns_244177226__

#ifndef __XDR_MESSAGE_SettleProductReq_261451690__
#define __XDR_MESSAGE_SettleProductReq_261451690__
class SettleProductReq : public XDR::IMessage
{
public:
    enum {tagMsgID = 261451690};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    std::string gameId;
    std::string senderId;
    std::string serverid;
    std::string characterId;
    std::string receiveId;
    std::string recvserverid;
    std::string recvcharacterId;
    std::string prodId;
    int32 count;
    std::string giftMessage;
    std::string userIp;

public:
    SettleProductReq(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        count = 0;
    }
    virtual ~SettleProductReq(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        gameId.resize(0);
        senderId.resize(0);
        serverid.resize(0);
        characterId.resize(0);
        receiveId.resize(0);
        recvserverid.resize(0);
        recvcharacterId.resize(0);
        prodId.resize(0);
        count = 0;
        giftMessage.resize(0);
        userIp.resize(0);
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "SettleProductReq";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&gameId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&gameId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&senderId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&senderId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&serverid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&serverid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&characterId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&characterId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&receiveId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&receiveId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&recvserverid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&recvserverid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&recvcharacterId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&recvcharacterId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&prodId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&prodId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&count);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&count);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&giftMessage);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&giftMessage);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&userIp);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&userIp);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // senderId
        if (XDR::EncodingRules::Save(hStream, &senderId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // senderId
        if (XDR::EncodingRules::Save(hStream, &senderId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Save(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Save(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // receiveId
        if (XDR::EncodingRules::Save(hStream, &receiveId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // receiveId
        if (XDR::EncodingRules::Save(hStream, &receiveId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // recvserverid
        if (XDR::EncodingRules::Save(hStream, &recvserverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // recvserverid
        if (XDR::EncodingRules::Save(hStream, &recvserverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // recvcharacterId
        if (XDR::EncodingRules::Save(hStream, &recvcharacterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // recvcharacterId
        if (XDR::EncodingRules::Save(hStream, &recvcharacterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // prodId
        if (XDR::EncodingRules::Save(hStream, &prodId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // prodId
        if (XDR::EncodingRules::Save(hStream, &prodId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // count
        if (XDR::EncodingRules::Save(hStream, &count) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // count
        if (XDR::EncodingRules::Save(hStream, &count) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // giftMessage
        if (XDR::EncodingRules::Save(hStream, &giftMessage) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // giftMessage
        if (XDR::EncodingRules::Save(hStream, &giftMessage) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // userIp
        if (XDR::EncodingRules::Save(hStream, &userIp) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // userIp
        if (XDR::EncodingRules::Save(hStream, &userIp) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // senderId
        if (XDR::EncodingRules::Load(hStream, &senderId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // senderId
        if (XDR::EncodingRules::Load(hStream, &senderId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // serverid
        if (XDR::EncodingRules::Load(hStream, &serverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // characterId
        if (XDR::EncodingRules::Load(hStream, &characterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // receiveId
        if (XDR::EncodingRules::Load(hStream, &receiveId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // receiveId
        if (XDR::EncodingRules::Load(hStream, &receiveId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // recvserverid
        if (XDR::EncodingRules::Load(hStream, &recvserverid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // recvserverid
        if (XDR::EncodingRules::Load(hStream, &recvserverid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // recvcharacterId
        if (XDR::EncodingRules::Load(hStream, &recvcharacterId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // recvcharacterId
        if (XDR::EncodingRules::Load(hStream, &recvcharacterId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // prodId
        if (XDR::EncodingRules::Load(hStream, &prodId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // prodId
        if (XDR::EncodingRules::Load(hStream, &prodId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // count
        if (XDR::EncodingRules::Load(hStream, &count) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // count
        if (XDR::EncodingRules::Load(hStream, &count) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // giftMessage
        if (XDR::EncodingRules::Load(hStream, &giftMessage) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // giftMessage
        if (XDR::EncodingRules::Load(hStream, &giftMessage) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // userIp
        if (XDR::EncodingRules::Load(hStream, &userIp) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // userIp
        if (XDR::EncodingRules::Load(hStream, &userIp) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_SettleProductReq_261451690__

#ifndef __XDR_MESSAGE_SettleProductAns_258025658__
#define __XDR_MESSAGE_SettleProductAns_258025658__
class SettleProductAns : public XDR::IMessage
{
public:
    enum {tagMsgID = 258025658};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    int32 result;
    std::string message;
    int32 orderseq;

public:
    SettleProductAns(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        result = 0;
        orderseq = 0;
    }
    virtual ~SettleProductAns(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        result = 0;
        message.resize(0);
        orderseq = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "SettleProductAns";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&result);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&result);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&message);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&message);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&orderseq);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&orderseq);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // result
        if (XDR::EncodingRules::Save(hStream, &result) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // result
        if (XDR::EncodingRules::Save(hStream, &result) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // message
        if (XDR::EncodingRules::Save(hStream, &message) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // message
        if (XDR::EncodingRules::Save(hStream, &message) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // orderseq
        if (XDR::EncodingRules::Save(hStream, &orderseq) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // orderseq
        if (XDR::EncodingRules::Save(hStream, &orderseq) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // result
        if (XDR::EncodingRules::Load(hStream, &result) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // result
        if (XDR::EncodingRules::Load(hStream, &result) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // message
        if (XDR::EncodingRules::Load(hStream, &message) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // message
        if (XDR::EncodingRules::Load(hStream, &message) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // orderseq
        if (XDR::EncodingRules::Load(hStream, &orderseq) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // orderseq
        if (XDR::EncodingRules::Load(hStream, &orderseq) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_SettleProductAns_258025658__

#ifndef __XDR_MESSAGE_CancelSettlementReq_253456570__
#define __XDR_MESSAGE_CancelSettlementReq_253456570__
class CancelSettlementReq : public XDR::IMessage
{
public:
    enum {tagMsgID = 253456570};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    std::string gameId;
    std::string memberid;
    int32 orderseq;

public:
    CancelSettlementReq(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        orderseq = 0;
    }
    virtual ~CancelSettlementReq(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        gameId.resize(0);
        memberid.resize(0);
        orderseq = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "CancelSettlementReq";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&gameId);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&gameId);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&memberid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&memberid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&orderseq);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&orderseq);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Save(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // orderseq
        if (XDR::EncodingRules::Save(hStream, &orderseq) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // orderseq
        if (XDR::EncodingRules::Save(hStream, &orderseq) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // gameId
        if (XDR::EncodingRules::Load(hStream, &gameId) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // orderseq
        if (XDR::EncodingRules::Load(hStream, &orderseq) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // orderseq
        if (XDR::EncodingRules::Load(hStream, &orderseq) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_CancelSettlementReq_253456570__

#ifndef __XDR_MESSAGE_CancelSettlementAns_102350170__
#define __XDR_MESSAGE_CancelSettlementAns_102350170__
class CancelSettlementAns : public XDR::IMessage
{
public:
    enum {tagMsgID = 102350170};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    int32 result;
    std::string message;

public:
    CancelSettlementAns(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        result = 0;
    }
    virtual ~CancelSettlementAns(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        result = 0;
        message.resize(0);
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "CancelSettlementAns";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&result);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&result);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&message);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&message);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // result
        if (XDR::EncodingRules::Save(hStream, &result) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // result
        if (XDR::EncodingRules::Save(hStream, &result) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // message
        if (XDR::EncodingRules::Save(hStream, &message) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // message
        if (XDR::EncodingRules::Save(hStream, &message) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // result
        if (XDR::EncodingRules::Load(hStream, &result) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // result
        if (XDR::EncodingRules::Load(hStream, &result) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // message
        if (XDR::EncodingRules::Load(hStream, &message) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // message
        if (XDR::EncodingRules::Load(hStream, &message) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_CancelSettlementAns_102350170__

#ifndef __XDR_MESSAGE_IsValidPasswdReq_935850__
#define __XDR_MESSAGE_IsValidPasswdReq_935850__
class IsValidPasswdReq : public XDR::IMessage
{
public:
    enum {tagMsgID = 935850};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    std::string memberid;
    std::string passwd;

public:
    IsValidPasswdReq(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
    }
    virtual ~IsValidPasswdReq(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        memberid.resize(0);
        passwd.resize(0);
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "IsValidPasswdReq";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&memberid);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&memberid);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&passwd);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&passwd);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Save(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // passwd
        if (XDR::EncodingRules::Save(hStream, &passwd) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // passwd
        if (XDR::EncodingRules::Save(hStream, &passwd) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // memberid
        if (XDR::EncodingRules::Load(hStream, &memberid) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // passwd
        if (XDR::EncodingRules::Load(hStream, &passwd) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // passwd
        if (XDR::EncodingRules::Load(hStream, &passwd) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_IsValidPasswdReq_935850__

#ifndef __XDR_MESSAGE_IsValidPasswdAns_121314618__
#define __XDR_MESSAGE_IsValidPasswdAns_121314618__
class IsValidPasswdAns : public XDR::IMessage
{
public:
    enum {tagMsgID = 121314618};

protected:
    bool bSubMessageFlag;
    int32 nMsgID;

public:
    // User defined data fields
    int32 nIdx;
    bool isValidPasswd;

public:
    IsValidPasswdAns(void) : bSubMessageFlag(false), nMsgID(tagMsgID)
    {
        nIdx = 0;
        isValidPasswd = 0;
    }
    virtual ~IsValidPasswdAns(void)
    {
    }

    virtual void Clear(void)
    {
        nIdx = 0;
        isValidPasswd = 0;
    }
    virtual int32 GetID(void) const
    {
        return tagMsgID;
    }
    virtual const char *GetName(void) const
    {
        return "IsValidPasswdAns";
    }
    virtual int32 GetLength(void)
    {
        int32 nLength = 0;

#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            nLength += XDR::EncodingRules::GetLength(&nMsgID);
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&nIdx);
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        nLength += XDR::EncodingRules::GetLength(&isValidPasswd);
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        nLength += XDR::EncodingRules::GetLength(&isValidPasswd);
#endif

        return nLength;
    }
    virtual bool Save(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Save(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Save(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isValidPasswd
        if (XDR::EncodingRules::Save(hStream, &isValidPasswd) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isValidPasswd
        if (XDR::EncodingRules::Save(hStream, &isValidPasswd) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual bool Load(XStream::THandle hStream)
    {
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        if (bSubMessageFlag == false)
        {
            if (XDR::EncodingRules::Load(hStream, &nMsgID) == false)
            {
                return false;
            }
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // nIdx
        if (XDR::EncodingRules::Load(hStream, &nIdx) == false)
        {
            return false;
        }
#endif
#if (_MSC_VER >= 1301) || defined(_UNIX_)
        // isValidPasswd
        if (XDR::EncodingRules::Load(hStream, &isValidPasswd) == false)
        {
            return false;
        }
#elif (_MSC_VER >= 1200)
        // Visual C++ 6.0
        // isValidPasswd
        if (XDR::EncodingRules::Load(hStream, &isValidPasswd) == false)
        {
            return false;
        }
#endif

        return true;
    }
    virtual void SetSubMessageFlag(bool bSubMessageFlag)
    {
        this->bSubMessageFlag = bSubMessageFlag;
    }
    virtual bool GetSubMessageFlag(void) const
    {
        return bSubMessageFlag;
    }
};
#endif // __XDR_MESSAGE_IsValidPasswdAns_121314618__

#endif
